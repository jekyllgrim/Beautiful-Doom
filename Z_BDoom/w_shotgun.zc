Class BD_Shotgun : BDoomWeapon {
	Default {
		Weapon.AmmoType1 			"Shell";
		Weapon.AmmoUse1			1;
		Weapon.AmmoGive1			0;
		BDoomWeapon.magammo		"BD_ShotgunClip";
		Weapon.AmmoType2			"Shell";
		Weapon.AmmoUse2			0;
		Weapon.AmmoGive2			8;
		Inventory.PickupMessage "$GOTSHOTGUN";
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
		weapon.selectionorder 130;
		+WEAPON.NOALERT //for melee
		weapon.slotnumber 3;
		weapon.slotpriority 0;
		BDoomWeapon.AutoReloadTime 200;
		BDoomWeapon.reloadsound "Mweapons/shotgun/shellin";
		BDoomWeapon.ClassicIcon "SHOTA0";
		BDoomWeapon.ModernIcon "SHOTB0";
	}
	override void Tick() {
		If (Owner)
			return;
		else {
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN) {
				pickupsound = "Mweapons/shotgun/pump";
			}
			else {
				pickupsound = "weapons/shotgun/pump";
			}
		}
		Super.Tick();
	}
	override void DoEffect() {
		Super.DoEffect();
		if (!owner)
			return;
		if(bdoom_weapons == BD_WeaponSet.WS_MODERN) {
			bNOAUTOFIRE = true;
			bAMMO_OPTIONAL = true;
			bALT_AMMO_OPTIONAL = false;
		}
		else {
			bNOAUTOFIRE = false;
			bAMMO_OPTIONAL = false;
			bALT_AMMO_OPTIONAL = true;
		}
	}
	States {
	Spawn:
		SHOT A 1 {
			If(bdoom_weapons == BD_WeaponSet.WS_MODERN)
				frame = 1;
		}
		loop;
	Ready:
		SHOG A 1 {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Ready.Modern");
			BD_SetSprite("SHOG","QHOG");
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				 A_WeaponReady();
			else
				A_WeaponReady(WRF_NOSECONDARY);
			return ResolveState(null);
		}
		loop;
	Deselect:
		TNT1 A 1 {
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Deselect.Modern");
			else if(bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				return ResolveState("Deselect.Enhanced");		
			BD_SetSprite("SHOG","QHOG");	
			return ResolveState(null);
		}
		#### A 1 A_Lower();
		wait;
	Select:
		TNT1 A 0 { 
			if (bdoom_weapons > BD_WeaponSet.WS_VANILLA)
				A_StartSound("weapons/shotgun/draw");
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Select.Modern");
			A_WeaponOffset(0,86);
			BD_SetSprite("SHOG","QHOG");	
			return ResolveState(null);
		}
		#### JIGFED 1 {
			A_WeaponOffset(0,-9,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		goto ready;
	Fire: //pre-fire 3 tics, fire 34 tics, refire 7 tics;
		SHOG A 3 { 
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Fire.Modern");
			A_AlertMonsters();
			BD_SetSprite("SHOG","QHOG");	
			return ResolveState(null);
		}
		SHOF A 1 {
			BD_SetSprite("SHOF","QHOF");	
			A_WeaponOffset(frandom(-0.5,0.5),frandom(8,9),WOF_ADD);
			A_gunflash();
			BD_FireBullets (5.6, 0, 7, 5,"weapons/shotgf","weapons/shotgun/fire");
		}
		#### A 2 A_WeaponOffset(0,-2,WOF_ADD);
		TNT1 A 0 BD_SetSprite("SHOG","QHOG");
		#### BCD 1 A_WeaponOffset(0,-2,WOF_ADD);
		#### # 0  A_WeaponOffset(0,32,WOF_INTERPOLATE);
		#### FHIJKL 1;
		#### M 2 {
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				 A_StartSound("weapons/shotgun/pump",slot:CHAN_5);
		}
		#### N 4;
		#### O 3 { 
			If(bdoom_debris)
				A_Eject("BD_ShotgunCasing",20,frandom(-7,-8),6.5,frandom(0,1),FRandom(3,5),frandom(3,4));
		}
		#### NMLKJIHGFE 1;
		#### DCB 1 {
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				A_WeaponReady(WRF_NOPRIMARY);
		}
		#### A 7 A_ReFire();
		Goto Ready;
	Flash:
		TNT1 A 2 {
			A_Light2();
			if(!invoker.c_muzzle)
				A_Overlay(PSP_EFLASH,"FlashVanilla");
			else {				
				DrawMuzzleSmoke((0,10), sAlpha: 0.38, sVSpeed: 1.3, sScale: 0.7);
				A_Overlay(PSP_EFLASH,"FlashEnhanced");
				A_Overlay(PSP_MFLASH,"FlashMuzzle");
				//A_OverlayOffset(PSP_MFLASH,0,53);
				if (random(0,1) == 1) 
					A_OverlayFlags(PSP_MFLASH,PSPF_FLIP,true);
			}
			A_OverlayFlags(PSP_EFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayRenderstyle(PSP_EFLASH,STYLE_Add);
			A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
		}
		TNT1 A 1 A_light1();
		goto lightdone;
	FlashVanilla:
		SHOL B 2 bright;		
		SHOL A 1 bright;
		stop;		
	FlashEnhanced:
		SHOL C 1 bright;
		SHOL C 1 bright A_OverlayAlpha(OverlayID(),0.8);
		SHOL C 1 bright A_OverlayAlpha(OverlayID(),0.5);
		stop;
	FlashMuzzle:
		MUZ2 A 1 bright {
				let fl = player.FindPSprite(OverlayID());
				fl.frame = random(0,3);
			}
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.8);
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.5);
		stop;

	Deselect.Enhanced:
		TNT1 A 0 BD_SetSprite("SHOG","QHOG");
		#### A 1 A_Lower(12);
		loop;
	Altfire:
		TNT1 A 0 BD_SetSprite("SHOG","QHOG");
		#### DEGHIJ 1 A_WeaponOffset(0,9,WOF_ADD);
	AltHold:
		TNT1 A 0 {
			A_WeaponOffset(0,32);
			if (FindInventory("PowerStrength"))
				return ResolveState("AltHoldStrong");
			A_StartSound("weapons/fist/swing");
			BD_SetSprite("SHOM","QHOM");
			return ResolveState(null);
		}
		#### ABC 1;
		#### D 3 A_CustomPunch(6*random(2,6),TRUE,CPF_NOTURN,"BD_ShotgunMeleePuff",72);
		#### EF 2;
		#### GHI 2;
		#### JJ 1 A_WeaponReady(WRF_NOSECONDARY);
		TNT1 A 3 A_WeaponReady(WRF_NOSECONDARY);
		TNT1 A 0 A_ReFire("AltHold");
		TNT1 A 0 {
			A_WeaponOffset(0,86);
			BD_SetSprite("SHOG","QHOG");
		}
		#### JIHGED 1 {
			A_WeaponOffset(0,-9,WOF_ADD);
			A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB);
		}
		TNT1 A 0 A_WeaponOffset(0,32);
		goto ready;
	AltHoldStrong:
		TNT1 A 0 {
			A_StartSound("weapons/fist/swing");
			BD_SetSprite("SHOM","QHOM");
		}
		#### ABC 1;
		#### D 1 A_CustomPunch(42*random(1,6),TRUE,CPF_NOTURN,"BD_ShotgunMeleePuff",72);
		#### DDDD 1 A_WeaponOffset(frandom(-1,1),frandom(32,33.5),WOF_INTERPOLATE);
		#### EF 2;
		#### GHI 2 A_WeaponReady(WRF_NOSECONDARY);
		#### JJ 1 A_WeaponReady(WRF_NOSECONDARY);
		TNT1 A 1 A_WeaponReady(WRF_NOSECONDARY);
		TNT1 A 0 A_ReFire("AltHoldStrong");
		TNT1 A 0 {
			A_WeaponOffset(0,86);
			BD_SetSprite("SHOG","QHOG");
		}
		#### JIHGED 1 A_WeaponOffset(0,-9,WOF_ADD);
		goto ready;

// MODERN GUNS

	Select.Modern:
		TNT1 A 0 {
			A_WeaponOffset(-32.0,80);
			BD_SetSprite("SHOR","QHOR");
		}
		#### HGFEDCBA 1 {
			A_WeaponOffset(4.0,-6.0,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		TNT1 A 0 A_WeaponOffset(0.0,32.0,WOF_INTERPOLATE);
		goto ready;
	Deselect.Modern:
		TNT1 A 0 BD_SetSprite("SHON","QHON");
		#### A 1 A_Lower(12);
		wait;
	Ready.Modern:
		SHON A 1 {
			BD_WeaponReady();
			BD_SetSprite("SHON","QHON");
		}
		goto ready;
	DryReload:
		SHON A 8 {
			A_StartSound("Mweapons/dry");
			BD_SetSprite("SHON","QHON");
		}
		goto reload;
	Fire.Modern:
		#### # 0 A_JumpIfNoAmmo("DryReload");
		SHON A 2 {
			BD_FireModernBullet("BD_ShotgunPellet", 4.1, 3.0, numbullets: 7);
			//A_FireBullets (4.1, 3.0, 7, 0, "BD_NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_ShotgunPellet",0,0);
			A_AlertMonsters();
			A_gunflash("ModernFlash");
			A_StartSound("Mweapons/shotgun/fire");
			BD_SetPitch(pitch-frandom(1.4,1.7),SPF_INTERPOLATE);
			A_ZoomFactor(0.99,ZOOM_NOSCALETURNING);
			BD_SetSprite("SHON","QHON");
		}
		#### A 0 A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		#### BC 1 A_WeaponOffset(frandom(-0.5,0.5),frandom(0.3,1),WOF_ADD);
		#### A 0 A_StartSound("Mweapons/shotgun/pump",slot:CHAN_6);
		#### DEFGH 1 A_WeaponOffset(frandom(-0.85,0.85),frandom(0.5,1.2),WOF_ADD);
		#### A 0 { 
			If(bdoom_debris)
				A_Eject("BD_ShotgunCasing",20,frandom(3,4),11.0,frandom(0,1),FRandom(3,5),frandom(2,3));
		}
		#### HGFE 2;
		#### DCB 2  A_WeaponOffset(0,32,WOF_INTERPOLATE);
		Goto Ready	;
	ModernFlash:
		TNT1 A 2 {
			A_Light2();
			if(!invoker.c_muzzle)
				A_Overlay(PSP_EFLASH,"ModernFlashVanilla");
			else {
				DrawMuzzleSmoke((0,15), sAlpha: 0.38, sVSpeed: 1.3, sScale: 0.7);
				A_Overlay(PSP_EFLASH,"ModernFlashEnhanced");
				A_Overlay(PSP_MFLASH,"ModernFlashMuzzle");
				//A_OverlayOffset(PSP_MFLASH,0,53);
				if (random(0,1) == 1) 
					A_OverlayFlags(PSP_MFLASH,PSPF_FLIP,true);
			}
			A_OverlayFlags(PSP_EFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayRenderstyle(PSP_EFLASH,STYLE_Add);
			A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
		}
		TNT1 A 1 A_light1();
		goto lightdone;
	ModernFlashVanilla:
		SHOL E 2 bright;		
		SHOL D 1 bright;
		stop;		
	ModernFlashEnhanced:
		SHOL F 1 bright;
		SHOL F 1 bright A_OverlayAlpha(PSP_EFLASH,0.5);
		stop;
	ModernFlashMuzzle:
		MUZ2 A 1 bright {
			let fl = player.FindPSprite(OverlayID());
			fl.frame = random(0,3);
		}
		#### # 1 bright A_OverlayAlpha(PSP_MFLASH,0.8);
		stop;
	Reload:
		TNT1 A 0 A_JumpIf(CountInv("Shell") == 0, "Ready");
		TNT1 A 0 BD_SetSprite("SHOR","QHOR");
		#### ABDFHIJKLLL 1;
	ReloadDo:
		#### A 0 {
			If(CountInv("BD_ShotgunClip") == 8 || CountINv("Shell") == 0 )
				return ResolveState("ReloadEnd");
			A_TakeInventory("Shell",1,TIF_NOTAKEINFINITE);
			GiveInventory("BD_ShotgunClip",1); 
			A_StartSound("Mweapons/shotgun/shellin",slot:CHAN_AUTO);
			return ResolveState(null);
		}
		#### LLL 2 A_Weaponoffset(0.12,0.3,WOF_ADD);
		#### LLLLLL 1 {
			A_Weaponoffset(-0.6,-0.15,WOF_ADD);
			A_WeaponReady(WRF_NOSECONDARY);
		}
		#### A 0 A_JumpIfInventory("BD_ShotgunClip",2,"ReloadDo");
		#### A 0 A_StartSound("Mweapons/shotgun/pump",slot:CHAN_AUTO);
		#### KLMNOP 1;
		#### ONMLK 2 A_WeaponReady(WRF_NOSECONDARY);
		loop;
	ReloadEnd:
		#### LKJIH 1;
		#### FDBA 1;
		goto ready;
	}
}

Class BD_ShotgunClip : ammo {
	Default {
		inventory.icon "HSHLZ0";
		inventory.amount 1;
		inventory.maxamount 8;
		ammo.backpackamount 0;
		ammo.backpackmaxamount 8;
		+INVENTORY.IGNORESKILL
	}
}


Class BD_ShotgunMeleePuff : BD_ModernFistPuffHeavy {
	Default {
		attacksound "weapons/shotgun/melee";
	}
	states {
	Crash:
		TNT1 A 1 {
			if (bdoom_debris) {
				for (int i = 4; i > 0; i--)
					A_SpawnItemEx("BD_WallSmoke",frandom(-3.0,3.0),frandom(-3.0,3.0),frandom(-1.0,1.0),frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3),0,0,32);
				for (int i = 7; i > 0; i--)
					A_SpawnItemEx("BD_WallPart",0,0,0,	frandom(1,3),0,frandom(3,5),	random(0,360),0,64);
			}
		}
		stop;
	Melee:
		TNT1 A 1 {
			A_AlertMonsters(196,AMF_EMITFROMTARGET);
			if (tracer) {
				if (tracer.bISMONSTER == false || tracer.bNOBLOOD == true)
					return ResolveState("Crash");		
				if (!tracer.bNOGRAVITY)
					tracer.vel.z += clamp(7.0 * 120 / tracer.mass, 0.0, 8.0);
				if (target)
					tracer.vel += AngleToVector (target.AngleTo (tracer), 0.5);
			}
			return ResolveState(null);
		}
		stop;
	}
}

