Class BD_WeaponPickupControl : BD_DummyInventory {
	static const Class<Inventory> vanillaWeapons[] = {
		"Fist",
		"Chainsaw",
		"Pistol",
		"Shotgun",
		"SuperShotgun",
		"Chaingun",
		"RocketLauncher",
		"PlasmaRifle",
		"BFG9000"
	};
	static const Class<Inventory> modWeapons[] = {
		"BD_Fist",
		"BD_Chainsaw",
		"BD_Pistol",
		"BD_Shotgun",
		"BD_SuperShotgun",
		"BD_Chaingun",
		"BD_RocketLauncher",
		"BD_PlasmaRifle",
		"BD_BFG9000"
	};
	static const Class<Inventory> modKeys[] = {	
		"BD_RedCard",
		"BD_BlueCard",
		"BD_YellowCard",
		"BD_RedSkull",
		"BD_BlueSkull",
		"BD_YellowSkull"
	};
	static const Class<Inventory> vanillaKeys[] = {	
		"RedCard",
		"BlueCard",
		"YellowCard",
		"RedSkull",
		"BlueSkull",
		"YellowSkull"
	};
	//here we make sure that the player will never have vanilla weapons in their inventory:
	override void DoEffect() {
		super.DoEffect();
		if (!owner || !owner.player)
			return;
		let plr = owner.player;
		array < int > changeweapons; //stores all weapons that need to be exchanged
		int selweap = -1; //will store readyweapon
		//record all weapons that need to be replaced
		for (int i = 0; i < vanillaWeapons.Size(); i++) {
			//if a weapon is found, cache its position in the array:
			Class<Inventory> oldweap = bdoom_replaceweapons ? vanillaWeapons[i] : modWeapons[i];
			if (owner.CountInv(oldweap) >= 1) {
				if (bdoom_debug)  console.printf("found %s that shouldn't be here",oldweap.GetClassName());
				changeweapons.Push(i);
			}
			//also, if it was seleted, cache its number separately:
			if (owner.player.readyweapon && owner.player.readyweapon.GetClass() == oldweap)
				selweap = i;
		}
		//if no old weapons were found, do nothing else:
		if (changeweapons.Size() <= 0)
			return;
		for (int i = 0; i < vanillaWeapons.Size(); i++) {
			//do nothing if this weapon wasn't cached:
			if (changeweapons.Find(i) == changeweapons.Size())
				continue;
			let oldweap = bdoom_replaceweapons ? vanillaWeapons[i] : modWeapons[i];
			let newweap = bdoom_replaceweapons ? modWeapons[i] : vanillaWeapons[i];
			//remove old weapon
			owner.A_TakeInventory(oldweap);
			if (bdoom_debug) console.printf("Exchanging %s for %s",oldweap.GetClassName(),newweap.GetClassName());
			if (!owner.CountInv(newweap)) {
				//create a copy that won't give any ammo and attach it to the player
				let wp = Weapon(Spawn(newweap));
				if (wp) {
					wp.ammogive1 = 0;
					wp.ammogive2 = 0;
					wp.AttachToOwner(owner);
					//console.printf("Giving %s",wp.GetClassName());
				}
			}
		}		
		//select the corresponding new weapon if an old weapon was selected:
		if (selweap != -1) {
			let newsel = bdoom_replaceweapons ? modWeapons[selweap] : vanillaWeapons[selweap];
			let wp = Weapon(owner.FindInventory(newsel));
			if (wp) {
				if (bdoom_debug) console.printf("Selecting %s", wp.GetClassName());
				owner.player.pendingweapon = wp;
				//tried to set readyweapon but it's wonky, so it's easier to modify pendingweapon instead
				/*owner.player.readyweapon = wp;
				let psp = owner.player.FindPSprite(PSP_WEAPON);
				if (psp) {
					owner.player.SetPSprite(PSP_WEAPON,wp.ResolveState("Ready"));
					psp.y = WEAPONTOP;
				}*/
			}
		}
		changeweapons.Clear();
	}
	
	Class<Inventory> GetWeaponReplacement(Class<Inventory> replacee) {
        Class<Inventory> replacement = null;
        if (bdoom_replaceweapons) {
			for (int i = 0; i < vanillaWeapons.Size(); i++) {
				if (modWeapons[i] && replacee == vanillaWeapons[i]) {
					replacement = modWeapons[i];
					break;
				}
			}
		}
		else {
			for (int i = 0; i < vanillaWeapons.Size(); i++) {
				if (vanillaWeapons[i] && replacee == modWeapons[i]) {
					replacement = vanillaWeapons[i];
					break;
				}
			}
		}
		return replacement;
	}
	
	Class<Inventory> GetKeyReplacement(Class<Inventory> replacee) {
        Class<Inventory> replacement = null;
		for (int i = 0; i < modKeys.Size(); i++) {
			if (vanillaKeys[i] && replacee == modKeys[i]) {
				replacement = vanillaKeys[i];
				break;
			}
		}
		return replacement;
	}
    
	override bool HandlePickup (Inventory item) {
        let replacee = item.GetClassName();
		Class<Inventory> replacement = null;
		if (item is "Weapon")
			replacement = GetWeaponReplacement(replacee);
		else if (item is "Key")
			replacement = GetKeyReplacement(replacee);
        if (!replacement)
            return false;
		int r_amount = GetDefaultByType(replacement).amount;
        item.bPickupGood = true;
        owner.A_GiveInventory(replacement,r_amount);
		if (bdoom_debug)
			console.printf("Replacing %s with %s (amount: %d)",replacee,replacement.GetClassName(),r_amount);
        return true;
    }
}
		

Class BDoomWeapon : Weapon abstract {	
	mixin BD_LinearMapCheck;
	
	protected Weapon prevReadyweapon;

	protected bool picked; //has this gun been picked up before?
	protected int offsetTics; // current camera sway timer
	protected double maxOffsetTics; // starting point for the timer
	protected double offsetAngle; // the target angle for the camera sway
	protected double offsetPitch;
	protected double currentAngleOffset; // how much has the camera already been offset?
	protected double currentPitchOffset;
	property maxOffsetTics : maxOffsetTics;
	property offsetTics : offsetTics;
	
	protected sound reloadsound;	//used as a sound cue in background reload
	property reloadsound : reloadsound;
	
	protected int NonselTimer; //counts how long the weapon was deselected, used for automatic background reload
	protected int AutoReloadTime; //the value that NonselTimer is compared to
	property AutoReloadTime : AutoReloadTime;		
	protected Class<Ammo> magammo;		//magazine ammo used by Modern Guns
	property magammo : magammo;
	protected int magammogive;			//amount of magazine ammo given at first pickup (full mag for most weapons except Rocket Launcher)
	property magammogive : magammogive;
	
	protected int smokeFrame; //to create multiple smoke layers
	const SMOKELAYERS = 21;
	protected double smokeFade;
	protected double prevAngle[SMOKELAYERS];
	protected double prevPitch[SMOKELAYERS];
	protected double smokeVVel[SMOKELAYERS];
	protected double smokeHVel[SMOKELAYERS];
	protected double smokeRollChange[SMOKELAYERS];
	protected int smokeTics[SMOKELAYERS];
	
	
	protected transient CVar c_muzzle_cache;	
	protected transient CVar c_blackgloves;
	protected transient CVar c_bobstyle_cache;
	protected transient CVar c_freelook;
	protected bool c_muzzle;	
	protected bool c_bobstyle;
	protected bool wasempty;			//used in reload animations to keep track of whether reload was dry (affects animations)
	protected bool dontforcebob;		//if false, weapons will bob all the time
	property dontforcebob : dontforcebob;
	//keep track of states:
	protected state mreload;
	protected state mready;
	
	protected double preKickSpeed;
	
	protected Name ClassicIcon;
	protected Name ModernIcon;
	property ClassicIcon : ClassicIcon;
	property ModernIcon : ModernIcon;
	
	enum BD_PSpriteLayers {
		PSP_KICK 			= -50,
		PSP_SMOKE			= -30,
		PSP_MFLASH 		= -5,
		PSP_REDDOT 		= -4,
		PSP_SMOKEEND		= -10,
		PSP_MAG 			= -3,
		PSP_GUN2 			=  2,
		PSP_GUN3 			=  3,
		PSP_HEAT 			=  5,
		PSP_LIGHTS 		=  10,
		PSP_HLIGHTS 		=  11,
		PSP_EFLASH 		=  12,
		PSP_CHAINBLOOD 	=  30,
		PSP_CHAINBLOODR 	=  31,
		PSP_CHAINBLOODG 	=  32,
		PSP_CHAINBLOODB 	=  33,
		PSP_SMOKETOP		= 500,
		PSP_SMOKEENDTOP	= 520
	};

	enum BD_SoundChannels {
		CHAN_CHGSPIN	= 9,
		CHAN_CHGCOOL	= 10
	}
	
	Default {
		BDoomWeapon.AutoReloadTime 60;
		BDoomWeapon.maxOffsetTics 1; //required default values for A_CameraSway. Otherwise it'll crash due to division by zero
		BDoomWeapon.offsetTics -1;
	}	
	//Selects between regular weapon sprite and the one with black gloves:
	action void BD_SetSprite(name sprite1, name sprite2) {
		if (!player)
			return;
		
		let psp = player.FindPSprite(OverlayID());
		if (!psp)
			return;
		if (invoker.c_blackgloves == null)
			invoker.c_blackgloves = CVar.GetCVar('bdoom_blackgloves',player);
		if (invoker.c_blackgloves.GetBool() == false)
			psp.sprite = GetSpriteIndex(sprite1);
		else
			psp.sprite = GetSpriteIndex(sprite2);
	}
	
	//draw multi-layered muzzle smoke in an overlay
	action void DrawMuzzleSmoke(vector2 ofs = (0,0), double sAlpha = 0.75, double fade = 0.9, double sVSpeed = 1.2, double sScale = 0.5, bool drawOver = false) {
		if (!bdoom_debris)
			return;
		invoker.smokeFade = fade;
		if (waterlevel > 1) {
			A_ClearOverlays(PSP_SMOKE,PSP_SMOKEEND);
			A_ClearOverlays(PSP_SMOKETOP,PSP_SMOKEENDTOP);
			return;
		}
		int smokeStart = drawOver ? PSP_SMOKETOP : PSP_SMOKE;
		int smokeEnd = drawOver ? PSP_SMOKEEND : PSP_SMOKEENDTOP;
		if (invoker.smokeFrame >= SMOKELAYERS)
			invoker.smokeFrame = 0;
		int layer = smokeStart + invoker.smokeFrame;
		A_Overlay(layer,"GunSmokeDo");
		A_OverlayOffset(layer,ofs.x,ofs.y+32);
		A_OverlayPivotAlign(layer,PSPA_CENTER,PSPA_CENTER);
		A_OverlayFlags(layer,PSPF_FORCEALPHA|PSPF_Alpha,true);
		A_OverlayFlags(layer,PSPF_ADDBOB|PSPF_ADDWEAPON,false);
		A_OverlayAlpha(layer,sAlpha);
		A_OverlayRotate(layer,frandom[sfx](0,359));
		//int valueID = layer - smokeStart;
		invoker.smokeVVel[invoker.smokeFrame] = sVSpeed*frandom[sfx](0.75,1.25);
		invoker.smokeHVel[invoker.smokeFrame] = frandom[sfx](-0.08,0.08);
		invoker.smokeRollChange[invoker.smokeFrame] = frandom[sfx](-1,1);
		invoker.prevAngle[invoker.smokeFrame] = angle;
		invoker.prevPitch[invoker.smokeFrame] = pitch;
		invoker.smokeTics[invoker.smokeFrame] = 0;
		A_OverlayScale(layer,sScale,sScale);
		//console.printf("smokeframe %d",invoker.smokeframe);
		invoker.smokeFrame++;
	}
	
	//Removes PSprite. Can be called both from state and from DoEffect and allows removing multiple psprite IDs, not a from-to range.
	action void BD_ClearPSprite(int layer1, int layer2 = 0, int layer3 = 0, int layer4 = 0, int layer5 = 0) {
		array <int> layers = { layer1, layer2, layer3, layer4, layer5 };
		PlayerInfo plr;
		if (self && self.player)
			plr = self.player;
		else if (invoker.owner && invoker.owner.player)
			plr = invoker.owner.player;
		else
			return;
		for (int i = layers.Size() - 1; i >= 0; i--) {
			if (layers[i] != 0) {
				plr.SetPSprite(layers[i],null);
			}
		}
		return;
	}
	
	// Camera sway function by josh771
	action void A_CameraSway(double aoffset, double poffset, int tics) {
		invoker.offsetTics = tics;
		invoker.maxOffsetTics = tics;
		
		invoker.offsetAngle = aoffset;
		//pitch offset is ignored if freelook isn't in use:
		invoker.offsetPitch = CheckFreeLook() ? poffset : 0;

		invoker.currentAngleOffset = 0.0;
		invoker.currentPitchOffset = 0.0;
	}
	
	action void BD_ModernPunch(int damage, int berserkdamage = 0, Class<Actor> pufftype = null, Class<Actor> berserkpuff = null, int range = 0) {
		A_CustomPunch (
			(FindInventory("PowerStrength") && berserkdamage != 0) ? berserkdamage : damage,
			norandom: true,
			flags: 0, //don't use ammo
			pufftype: (FindInventory("PowerStrength" /*"BD_ModernBerserk_Regen"*/) && berserkpuff) ? berserkpuff : pufftype,
			range : range
		);
	}
	
	// fires projectile-based bullets; designed to look 
	// as similar to A_FireBullets as possible
	action void BD_FireModernBullet(Class<Actor> bullet, double spread_horz = 0, double spread_vert = 0, int numbullets = 1, bool useammo = true) {
		if (numbullets < 1) numbullets = 1;
		let weapon = player.ReadyWeapon;
		if (!weapon || (useammo && !weapon.DepleteAmmo(weapon.bAltFire, true)))
			return;
		
		// Alert the monsters:
		A_AlertMonsters();
		// Activate shootable linedefs:
		LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "BD_NullPuff", LAF_NOIMPACTDECAL, offsetforward: radius);
		
		vector2 spread = (0,0);
		for (int i = 0; i < numbullets; i++) {
			spread.x = random2[BDFireBull]() * (spread_horz / 256);
			spread.y = BulletSlope() - pitch + random2[BDFireBull]() * (spread_vert / 256);
			A_FireProjectile(
				bullet, 
				angle: spread.x,
				useammo:false,
				spawnheight: 2,
				pitch: spread.y
			);
		}
	}
	
	// a wrapper function that automatically plays either 
	// vanilla or enhanced weapon sound, and fires tracers 
	// with A_FireProjectile so that they don't break on 
	// portals and such:
	action void BD_FireBullets(double spread_horz = 0, double spread_vert = 0, int numbullets = 1, int damage = 1, sound vanillasnd = "", sound enhancedsnd = "", Class<Actor> pufftype = "BD_EnBulletPuff", double spawnheight = 0, double spawnofs = 0) {
		if (numbullets == 0) numbullets = 1;
		let weapon = player.ReadyWeapon;
		//deplete the appropriate ammo
		if (!weapon || !weapon.DepleteAmmo(weapon.bAltFire, true))
			return;
			
		//decide which sound to play based on current weapon set
		sound snd = (enhancedsnd && bdoom_weapons == BD_WeaponSet.WS_ENHANCED) ? enhancedsnd : vanillasnd;
		//play only if non-null
		if (snd)
			A_StartSound(snd,CHAN_WEAPON);
		// emulate perfect accuracy on first bullet: it'll 
		// happen if there's only 1 bullet, player isn't in 
		// refire (holding attack button), and numbullets 
		// is positive
		bool held = (numbullets != 1 || player.refire);
		//make sure numbullets is positive, now that the check is finished
		numbullets = abs(numbullets);
		// fire bullets with explicit angle and simply pass 
		// the offsets to the projectiles instead of using 
		// AimBulletMissile at puffs (because puffs don't 
		// always spawn!)
		for (int i = 0; i < numbullets; i++) {
			vector2 spread = (0,0);
			if (held) {
				spread.x = random2[BDFireBull]() * (spread_horz / 256);
				spread.y = BulletSlope() - pitch + random2[BDFireBull]() * (spread_vert / 256);
			}
			
			if (bdoom_tracers) {
				A_FireProjectile(
					"BD_BulletTracer",
					spread.x,
					useammo:false,
					spawnofs_xy:spawnofs,
					spawnheight:spawnheight,
					pitch:spread.y
				);
			}
			A_FireBullets (spread.x, spread.y, -1, damage, pufftype,flags:FBF_NORANDOMPUFFZ|FBF_EXPLICITANGLE|FBF_NOPITCH);
		}
	}
	
	//Version of A_WeaponReady that incorporates reloading and kicking
	action void BD_WeaponReady (bool allowSecondary = false, bool allowReload = true, bool allowKick = true) {
		int flags = 0;
		if (allowReload && IsReadyForReload())
			flags |= WRF_ALLOWRELOAD;
		if (!allowSecondary)
			flags |= WRF_NOSECONDARY;
		if (allowKick)
			flags |= WRF_ALLOWUSER1;		
		A_WeaponReady (flags);
	}

	action void BD_Overlay(int layer = 0, statelabel statename = null, int flags = 0, double xofs = 0, double yofs = 0, int offsetflags = 0, int style = 0, double alpha = 0) {
		if (layer == 0 || !statename)
			return;
		A_Overlay(layer, statename, 0);
		if (flags != 0)
			A_OverlayFlags(layer, flags, true);
		if (xofs != 0 && yofs != 0)
			A_OverlayOffset(layer, xofs,yofs, offsetflags);
		if (style)
			A_OverlayRenderstyle(layer,style);
		if (alpha != 0)	{
			A_OverlayFlags(layer,PSPF_Alpha|PSPF_FORCEALPHA,true);
			A_OverlayAlpha(layer,alpha);
		}
	}

	action void BD_Reload()	{
		if (invoker.ammo1 && invoker.ammo2) {
			while (invoker.ammo2.amount > 0 && invoker.ammo1.amount < invoker.ammo1.maxamount) {
				A_TakeInventory(invoker.ammotype2, 1, TIF_NOTAKEINFINITE);
				GiveInventory(invoker.ammotype1, 1);
			}
		}
	}
	
	action bool IsReadyForReload() {
		return (
			invoker.ammo1 && invoker.ammo2 && 
			(invoker.ammo2 != invoker.ammo1) && 
			(invoker.ammo2.amount > 0) && 
			(invoker.ammo1.amount < invoker.ammo1.maxamount)
		);
	}
	
	action bool A_CheckAmmo(bool secondary = false, int amount = -1) {
		if (A_CheckInfiniteAmmo())
			return true;
		
		let tAmmo = secondary ? invoker.ammo2 : invoker.ammo1;
		if (!tAmmo)
			return true; //this weapon doesn't use ammo at all
		
		// check for default ammouse value if -1, 
		// otherwise check for specified:
		if (amount <= -1) {
			amount = secondary ? invoker.ammouse2 : invoker.ammouse1;
		}
		
		if (tAmmo.amount < amount) {
			return false;
		}
		
		return true;
	}
	
	action bool A_CheckInfiniteAmmo() {
		return (sv_infiniteammo || FindInventory("PowerInfiniteAmmo", true) );
	}

	//Casing spawn function with math by Marisa Kirisame (see mk_matrix)
	action actor A_Eject(class<Actor> itemtype, double xofs = 0, double yofs = 0, double zofs = 0, double xvel = 0, double yvel = 0, double zvel = 0) {
		if (!player || !player.mo)
			return null;
		PlayerInfo plr = player;
		PlayerPawn pmo = player.mo;
		Vector3 ofs = pmo.pos+(0,0,plr.viewheight-GetFloorTerrain().footclip);
		Vector3 x, y, z;
		[x, y, z] = Matrix4.getaxes(pmo.pitch,pmo.angle,pmo.roll);
		let targofs = ofs+x*xofs+y*yofs-z*zofs;
		if (!Level.IsPointInLevel(targofs))
			return null;
		let c = Spawn(itemtype,targofs);
		if (c) {
			c.vel = x*xvel+y*yvel+z*zvel;
			c.target = self;
			c.angle = angle;
			return c;
		}
		return null;
	}
	
	//check if freelook is in use
	action bool CheckFreeLook() {
		if (!player)
			return false;
		//double-check 'freelook' cvar was cached correctly
		if (!invoker.c_freelook)
			invoker.c_freelook = CVar.GetCvar('freelook',player);
		// Return true if freelook is allowed
		// AND the player is using it:
		return (Level.IsFreelookAllowed() && invoker.c_freelook.GetBool());
	}
	
	action void BD_SetPitch(double pitch, int flags = 0) {
		if (!CheckFreeLook())
			return;
		A_SetPitch(pitch, flags);
	}
	
	override void PostBeginPlay() {
		super.PostBeginPlay();
		mreload = FindState("Reload.Modern");
		if (!mreload)
			mreload = FindState("Reload");
		if (!mreload)
			mreload = FindState("ForcedCool");
		mready = FindState("Ready.Modern");
	}
	
	// Make sure player's magazine isn't empty when
	// a weapon is first picked up (for Modern Guns):
	override void AttachToOwner(actor other) {
		super.AttachToOwner(other);
		if (!owner)
			return;
		if (picked)
			return;
		int ama = (magammogive > 0) ? magammogive : 100; //give either full mag, or however much is specified with magammo property
		owner.GiveInventory(magammo,ama);
		picked = true;
	}
	
	override void DoEffect() {
		if (!owner || !owner.player)
			return;
			
		let plr = owner.player;
		
		//double-check if user cvars are cached correctly:
		if (c_muzzle_cache == null)
			c_muzzle_cache = CVar.GetCVar('bdoom_muzzle',plr);
		if (c_bobstyle_cache == null)
			c_bobstyle_cache = CVar.GetCvar('bdoom_weaponbobstyle',plr);
		
		c_muzzle = c_muzzle_cache.GetBool();
		c_bobstyle = c_bobstyle_cache.GetBool();
		
		Super.DoEffect();
		if (!default.icon) {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN && ModernIcon)
				icon = texman.CheckForTexture(ModernIcon, TexMan.Type_Any);
			else if (ClassicIcon)
				icon = texman.CheckForTexture(ClassicIcon, TexMan.Type_Any);
		}
		if (magammo) {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN) {
				ammo1 = ammo(owner.FindInventory(magammo));
				ammotype1 = magammo;
			}
			else {
				ammo1 = ammo(owner.FindInventory(default.ammotype1));
				ammotype1 = default.ammotype1;
			}
		}
		if (!bdoom_replaceweapons)
			self.SelectionOrder = self.default.SelectionOrder+50000;
		else
			self.SelectionOrder = self.default.SelectionOrder;
		//Console.Printf("x: %d, y: %d, z:%d", owner.pos.x,owner.pos.y,owner.pos.z);
		//allow switching weapons during reload:
		if(bdoom_weapons == BD_WeaponSet.WS_MODERN) {
			plr.cheats |= CF_INTERPVIEW; //force mouse smoothing to avoid screwy camera when A_CameraSway is used
			let psp = plr.FindPSprite(PSP_Weapon);
			if (psp && (InStateSequence(psp.curstate,mreload)))
				plr.WeaponState |= WF_WEAPONSWITCHOK;
		}
		if (c_bobstyle == true) {
			BobRangeX = 0.2;
			BobRangeY = 0.2;
			BobStyle = 5;
			BobSpeed = 2.0;
			//force bobbing all the time:
			if (plr.readyweapon && plr.readyweapon == self && !dontforcebob)
				plr.WeaponState |= WF_WEAPONBOBBING;
		}
		else {
			BobRangeX = 1.0;
			BobRangeY = 1.0;
			BobStyle = 0;
			BobSpeed = 1.0;
		}
		//CameraSway in action	
		if (offsetTics >= 0) {
			double phase = (offsetTics / maxOffsetTics) * 90.0;
			double newAngleOffset = (cos(phase) * offsetAngle);
			double newPitchOffset = (cos(phase) * offsetPitch);
			double finalAngle = (owner.angle - currentAngleOffset) + newAngleOffset;
			double finalPitch = (owner.pitch - currentPitchOffset) + newPitchOffset;
			currentAngleOffset = newAngleOffset;
			currentPitchOffset = newPitchOffset;
			owner.A_SetAngle(finalAngle, SPF_INTERPOLATE);
			owner.A_SetPitch(finalPitch, SPF_INTERPOLATE);
			offsetTics--;
		}
		
	//QUICK KICK
		//if player presses +user1 (default Q and Mouse4)
		if 	((plr.cmd.buttons & BT_USER1) && !(plr.oldbuttons & BT_USER1)) {
			let psp = plr.FindPSprite(PSP_WEAPON);
			let kicks = plr.FindPSprite(PSP_KICK);
			if(!psp || bdoom_weapons != BD_WeaponSet.WS_MODERN  || kicks) //if dead, or not Modern guns selected, or is already kicking
				return;
			//do this if used from Ready: will not only kick in overlay but will also move the weapon aside
			else if	(InStateSequence(psp.curstate, mready) )
				plr.setPSprite(PSP_Weapon,ResolveState("QKick"));
			//do this if used during Reload: weapon sprite will stay the same, kick will be shown and executed independently in overlay
			else if (InStateSequence(psp.curstate, mreload))
				plr.setPSprite(PSP_KICK,FindState("QuickKick"));
		}
	//BACKGROUND RELOAD
		if (bdoom_weapons != BD_WeaponSet.WS_MODERN || !bdoom_autoreload || !ammo1 || !ammo2 || (ammo1 == ammo2))
			return;
		if (plr.readyweapon == self || ammo1.amount == ammo1.maxamount || ammo2.amount < 1) {
			NonselTimer = 0;
			return;
		}
		if (NonselTimer < AutoReloadTime)
			NonselTimer++;
		else {
			while (ammo2.amount > 0 && ammo1.amount < ammo1.maxamount)	{
				owner.TakeInventory(ammo2.GetClass(),1);
				owner.GiveInventory(ammo1.GetClass(),1);
			}
			if (plr == players[consoleplayer])
				Console.Printf("%s reloaded",GetTag());
			owner.A_StartSound(reloadsound,slot:CHAN_AUTO,flags:CHAN_NOPAUSE,volume:0.5,attenuation:20);
		}			
	}

	states {
		GunSmokeDo:
			GSMO A 0 {
				let psp = Player.FindPSprite(OverlayID());
				if (psp)
					psp.frame = random[sfx](0,5);
			}
			#### # 1 {
				int smokeStart = OverlayID() > 0 ? PSP_SMOKETOP : PSP_SMOKE;
				int valueID = Clamp(OverlayID() - smokeStart, 0, SMOKELAYERS-1);
				A_OverlayOffset(
					OverlayID(),
					invoker.smokeHVel[valueID] - (invoker.prevAngle[valueID] - angle),
					-invoker.smokeVVel[valueID] + (invoker.prevPitch[valueID] - pitch),
					WOF_ADD
				);				
				invoker.smokeTics[valueID]++;
				invoker.prevAngle[valueID] = angle;
				invoker.prevPitch[valueID] = pitch;
				invoker.smokeVVel[valueID] *= 0.95;
				A_OverlayRotate(OverlayID(),invoker.smokeRollChange[valueID],WOF_ADD);
				let psp = player.FindPSprite(OverlayID());
				if (psp) {
					//console.printf("layer %d alpha: %f",OverlayID(),psp.alpha);
					if (invoker.smokeTics[valueID] > 12) {
						if (psp.alpha <= 0)
							return ResolveState("Null");
						else if (psp.alpha > 0.1)
							A_OverlayAlpha(OverlayID(),psp.alpha * invoker.smokeFade);
						else
							A_OverlayAlpha(OverlayID(),psp.alpha - 0.01);
					}
					A_OverlayScale(OverlayID(),psp.scale.x*1.015,psp.scale.y*1.015,WOF_INTERPOLATE);
				}
				return ResolveState(null);
			}
			wait;				
		QKick:
			#### # 0 A_Overlay(PSP_KICK,"QuickKick");
			#### ###### 1 A_WeaponOffset(7,4,WOF_ADD);
			#### ############ 1 A_WeaponOffset(-3.5,-2,WOF_ADD);
			#### # 0 A_jump(256,"Ready");
			wait;
		QuickKick:
			TNT1 A 0 {
				invoker.preKickSpeed = speed;
				A_OverlayOffset(OverlayID(),28,32);
				A_OverlayFlags(OverlayID(),PSPF_ADDBOB|PSPF_ADDWEAPON,false);
				A_OverlayFlags(OverlayID(),PSPF_FLIP|PSPF_MIRROR|PSPF_PLAYERTRANSLATED,true);
				if (player.onGround) {
					if (CountInv("BD_ModernBerserk_Regen") > 0)
						speed = invoker.preKickSpeed * 0.5;
					else
						speed = invoker.preKickSpeed * 0.25;
				}
			}
			KICK AB 1;
			TNT1 A 0 { 
				if(CountInv("PowerStrength") > 0)
					A_StartSound("Mweapons/fist/heavyswing",slot:CHAN_AUTO);
				else
					A_StartSound("Mweapons/fist/swing",slot:CHAN_AUTO);
				A_CameraSway(0.0,3.0,5);
			}
			KICK CD 1;
			KICK EF 1 {
				if (CountInv("BD_ModernBerserk_Regen") > 0)
					A_Recoil(-6);
				else
					A_Recoil(-3);
			}
			KICK G 3 {
				if (CountInv("BD_ModernBerserk_Regen") > 0) {
					A_Recoil(-5);
				}
				else {
					A_Recoil(-1.5);
				}
				BD_ModernPunch(10*frandom(3,5.5), berserkdamage: 20*frandom(4.5,6), pufftype:"BD_ModernKickPuff", berserkpuff:"BD_ModernKickPuff_Berserk", range: 85);
			}
			TNT1 A 0 A_CameraSway(0.0,-3.0,8);
			KICK HDC 2;
			TNT1 A 0 {
				speed = invoker.preKickSpeed;
			}
			KICK BA 3;
			TNT1 A 7 ;
			stop;
		DryReload:
			#### # 8 {
				A_ClearRefire();
				if (!IsReadyForReload())
					return ResolveState("Ready");
				A_StartSound("Mweapons/dry",0);
				return ResolveState(null);
			}
			#### # 0 {
				return ResolveState("Reload");
			}
			wait;
		LoadSprites:
			GSMO A 0;
			MUZ1 A 0;
			MUZ2 A 0;
			MUZ3 A 0;
			MUZ4 A 0;
			MUZ6 A 0;
			MUZ7 A 0;
			MUZ8 A 0;
			PZ11 A 0;
			PZ12 A 0;
			PZ21 A 0;
			PZ22 A 0;
			PZ31 A 0;
			PZ32 A 0;
			ROR1 A 0;
			ROR2 A 0;
			ROR3 A 0;
			RORR A 0;
			RORS A 0;
			RORN A 0; 
			RORE A 0; 
			RORV A 0; 
			RORT A 0;
			PLHE Z 0;
			PLH1 A 0;
			PLH2 A 0;
			BBGG A 0;
			stop;
			
	}
}



//////////////



Class BD_RealBullet : FastProjectile {
	protected bool dead;
	mixin BD_DecalControl;
	protected vector3 SpawnPos; //where the bullet was shot from
	double bulletdamage; 		//the actual damage value
	double falloffstrength; 	//how quickly the damage is reduced during travel
	double mindamage; 			//minimum damage value at any distance
	int falloffdistance; 		//distance at which the falloff begins
	int bulletspeed; 			//actual bullet speed (since 'speed' property is used to determine spawn distance only)
	property bulletdamage : bulletdamage;
	property bulletspeed : bulletspeed;
	property falloffstrength : falloffstrength;
	property falloffdistance : falloffdistance;
	property mindamage : mindamage;
	
	Default {
		BD_RealBullet.bulletDamage 10;
		BD_RealBullet.bulletspeed 200;
		BD_RealBullet.FalloffDistance 1024;
		BD_RealBullet.falloffstrength 0.3;
		BD_RealBullet.mindamage 1;
		//projectile;
		//+NOINTERACTION
		+BLOODSPLATTER
		+HITTRACER
		radius 1;
		height 1;
		alpha 0.75;
		speed 64;
		renderstyle "add";
		seesound "";
		deathsound "";
		DamageFunction CalculateDamage();
	}
	
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (!(vel ~== (0,0,0))) {
			vel = vel.unit() * bulletspeed;
		}
		A_FaceMovementDirection();
		if (target)
			SpawnPos = target.pos;
		//Console.Printf("bullet spawned at %.1f, %.1f, %.1f | vel: %.1f, %.1f, %.1f",pos.x,pos.y,pos.z,vel.x,vel.y,vel.z);
	}
	
	/*bool FireLineActivator(){
		if (!target || !bACTIVATEIMPACT)
			return false;
		
		LineAttack(angle, PLAYERMISSILERANGE, pitch, 0, 'Normal', "BD_NullPuff", LAF_NOIMPACTDECAL, offsetforward: radius);
		
		return true;
	}*/
	
	/*virtual void HitSolidActor(Actor victim) {
		if (target && victim && (victim.bSHOOTABLE || victim.bSOLID)) {
			dead = true;
			FireLineActivator();
			if (victim.bSHOOTABLE) {
				let dmg = victim.DamageMobj(self, target, CalculateDamage(), 'Normal');
				if (dmg > 0 && bBLOODSPLATTER && !victim.bNOBLOOD) {
					victim.TraceBleed(dmg, self);
					victim.SpawnBlood(pos, AngleTo(victim), dmg);
				}
				SetStateLabel("XDeath");
			}
			else if (victim.bSOLID) {
				SetStateLabel("Death");
			}
		}
	}*/
	
	int CalculateDamage() {
		double ddamage;
		double FalloffFactor = 0;
		double ddistance = level.Vec3Diff(pos, SpawnPos).length() - falloffdistance;
		//Essentially falloff factor is retroactively applied "every tick", so there are fewer falloff steps for faster projectiles:
		if (ddistance > 0)
			FalloffFactor = ddistance / bulletspeed;
		//falloffstrength is by how much it's reduced—this is applied to damage "every tick"
		ddamage = clamp(bulletdamage*(falloffstrength**FalloffFactor),mindamage,100);
		//console.printf("distance: %d Damage: %d",level.Vec3Diff(pos, SpawnPos).length(),ddamage);
		return int(ddamage);
	}
	
	//whizz sound snippet by phantombeta
	override void Tick () {
		if (isFrozen())
			return;
		Vector3 oldPos = pos;		
		Super.Tick();
		/*if (dead)
			return;
		
		A_FaceMovementDirection();
		FLineTraceData colcheck;
		LineTrace(angle, vel.length(), pitch, TRF_SOLIDACTORS, data: colcheck);
		let ht = colcheck.HitType;
		if (ht == TRACE_HitActor) {
			let act = colcheck.HitActor;
			if (act && act != target && (act.BSOLID || act.bSHOOTABLE)) {
				HitSolidActor(act);
			}
		}
		if (!dead && (ht == TRACE_HitFloor || ht == TRACE_HitCeiling || ht == TRACE_HitWall)) {
			A_Stop();
			FireLineActivator();
			SetStateLabel("Death");
			dead = true;
		}*/
		
		// Spawn underwater bubbles:
		if (bdoom_debris && waterlevel > 2 && level.Vec3Diff(oldPos, SpawnPos).length() > 100) {
			Vector3 path = level.vec3Diff( pos, oldPos );
			double distance = path.length() / 4;
			Vector3 direction = path / distance;
			int steps = int( distance );			
			for( int i = 0; i < steps; i++ )  {
				if (level.Vec3Diff(oldPos, SpawnPos).length() > 16) {
					actor mo = Spawn("BD_WaterBubble", oldPos );
					if (mo)
						mo.vel = (frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5));
				}
				oldPos = level.vec3Offset( oldPos, direction );
			}
		}
		if (!playeringame [consolePlayer])
			return;		
		let curCamera = players [consolePlayer].camera;
		if (!curCamera) // If the player's "camera" variable is null, set it to their PlayerPawn
			curCamera = players [consolePlayer].mo;
		if (!curCamera) // If the player's PlayerPawn is null too, just stop trying
			return;
		if (CheckIfCloser (curCamera, 192))
			A_StartSound("weapons/tracerwhizz",slot:CHAN_WEAPON,attenuation:8);
	}
		
	states {
		Spawn:
			TNT1 A 1; /*NoDelay {
				vel = vel.unit() * bulletspeed;
			}*/
			M000 A 1 {
				if (!bdoom_tracers) {
					return ResolveState("SpawnInvisible");
				}
				if (waterlevel > 2) {
					sprite = GetSpriteIndex("M001");
					bBRIGHT = false;
					for (int i = 20; i > 0; i--) {
						A_SpawnItemEx(
							"BD_WaterBubble",
							//xofs:i*16,
							xvel:frandom[wtr](-1,1),yvel:frandom[wtr](-1,1),zvel:frandom[wtr](-1,1)
						);
					}
				}
				else {
					sprite = GetSpriteIndex("M000");
					bBRIGHT = true;
				}
				return ResolveState(null);
			}
			wait;
		SpawnInvisible:
			TNT1 A -1;
			stop;
		XDeath:
			TNT1 A 1 {
				let mon = BDoomMonster(tracer);
				if (mon)
					mon.hitheight = pos.z - mon.pos.z;
			}
			stop;
		Death:
			TNT1 A 1 {
				CreateDecal();
				//FireLineActivator();
				let puf = Spawn("BD_EnBulletPuff",pos);
				if (puf)
					puf.SetStateLabel("PuffSpawn");
			}
			stop;
	}
}

Class BD_BulletTracer : BD_RealBullet {

	Default {
		BD_RealBullet.bulletspeed 256;
		-ACTIVATEIMPACT;
		-ACTIVATEPCROSS;
		+BLOODLESSIMPACT;
		damage 0;
		radius 4;
		height 4;
	}   
	
	states {
		Death:
			TNT1 A 1;
			stop;
	}
}

Class BD_PistolBullet : BD_RealBullet {
	Default {
		BD_RealBullet.bulletDamage 15;
		BD_RealBullet.bulletspeed 170;
		BD_RealBullet.FalloffDistance 512;
		BD_RealBullet.falloffstrength 0.9;
	}
}

Class BD_RifleBullet : BD_RealBullet {
	Default {
		BD_RealBullet.bulletDamage 15;
		BD_RealBullet.bulletspeed 230;
		BD_RealBullet.FalloffDistance 640;
		BD_RealBullet.falloffstrength 0.93;
	}
}

Class BD_ShotgunPellet : BD_RealBullet {
	Default {
		BD_RealBullet.bulletDamage 12;
		BD_RealBullet.bulletspeed 140;
		BD_RealBullet.FalloffDistance 400;
		BD_RealBullet.falloffstrength 0.85;
	}
}

// Modern SSG is the only piercing weapon in the mod but it deals damage only once upon contact, not continuously
// Piercing strength depends on enemy health: the "thicker" the enemy is, the harder it is for the bullet to go through them
Class BD_SSGPellet : BD_RealBullet {
	private int ripdepth; 		//how much health it can pierce through
	private actor hitvictim;	//the actor that was hit
	property ripdepth : ripdepth;
	Default {
		BD_SSGPellet.ripdepth 300;
		BD_RealBullet.bulletDamage 12;		
		BD_RealBullet.Bulletspeed 140;
		BD_RealBullet.FalloffDistance 300;
		BD_RealBullet.falloffstrength 0.8;
	}
	
	/*override void HitSolidActor(Actor victim) {
		//deal damage only ONCE even if the pellet rips through
		//first we make sure the vicitm hasn't been hit yet and isn't the shooter:
		if (victim && target && victim.bSHOOTABLE && (victim != target) && (victim != hitvictim)) {
			//reduce ripping ability based on victim's current health (thick monsters are harder to pierce):
			ripdepth -= victim.health; 
			hitvictim = victim;
			bulletdamage = CalculateDamage();
			let dmg = victim.DamageMobj(self,target,bulletdamage, 'Normal');
			if (dmg > 0 && !victim.bNOBLOOD && victim.bSHOOTABLE) {
				if (Distance3D(target) <= 320) {
					let xd = victim.FindState("XDeath");
					if (xd && !InStateSequence(victim.curstate,xd)) {
						if (!victim.FindInventory("BD_SSGGibControl"))
							victim.GiveInventory("BD_SSGGibControl",1);
						let ssgib = BD_SSGGibControl(victim.FindInventory("BD_SSGGibControl"));
						if (ssgib)
							ssgib.dmgtotal -= bulletdamage*2;
						//Console.Printf("%s dmgtotal: %d/%d",victim.GetClassName(),ssgib.dmgtotal,victim.GetGibHealth());
					}
				}
				victim.TraceBleed(bulletdamage,self);
				victim.SpawnBlood(pos,AngleTo(victim),bulletdamage);
			}
			if (ripdepth <= 0) {
				dead = true;
				SetStateLabel("XDeath");
			}
		}
		else if (victim.bSOLID) {
			dead = true;
			FireLineActivator();
			SetStateLabel("Death");
		}
	}*/
	
	override int SpecialMissileHit(actor victim) {
		//deal damage only ONCE even if the pellet rips through
		//first we make sure the vicitm hasn't been hit yet and isn't the shooter:
		if (victim && target && (victim != target) && (victim != hitvictim)) { 
				//reduce ripping ability based on victim's current health (thick monsters are harder to pierce):
				ripdepth -= victim.health; 
				hitvictim = victim;
				bulletdamage = CalculateDamage();
				victim.DamageMobj(self,target,bulletdamage,"normal");
				if (!victim.bNOBLOOD && victim.bSHOOTABLE) {
					if (Distance3D(target) <= 320) {
						let xd = victim.FindState("XDeath");
						if (xd && !InStateSequence(victim.curstate,xd)) {
							if (!victim.FindInventory("BD_SSGGibControl"))
								victim.GiveInventory("BD_SSGGibControl",1);
							let ssgib = BD_SSGGibControl(victim.FindInventory("BD_SSGGibControl"));
							if (ssgib)
								ssgib.dmgtotal -= bulletdamage*2;
							//Console.Printf("%s dmgtotal: %d/%d",victim.GetClassName(),ssgib.dmgtotal,victim.GetGibHealth());
						}
					}
					victim.TraceBleed(bulletdamage,self);
					victim.SpawnBlood(pos,AngleTo(victim),bulletdamage);
				}
			}
		if (ripdepth <= 0)
			return 0;
		return 1;
	}
}


class BD_MuzzleSmoke : BD_BaseSmoke {
	Default {
		alpha 0.5;
		scale 0.05;
		renderstyle 'shaded';
		stencilcolor "FFFFFF";
	}
	override void PostBeginPlay() {
		vel = vel.unit() * frandom(1,3);
		super.PostBeginPlay();
		//wrot = (random[bdsfx](3,10)*randompick(-1,1));
		//frame = random[bdsfx](0,5);
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		vel *= 0.8;
		vel.z = clamp(vel.z*0.85,0.04,0.1);
		A_FadeOut(0.0003);
		scale *= 1.02;
	}
	states {
	Spawn:
		SMOK AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRR 1 {
		}
		stop;

	}
}	


//***************
// EMPTY CASINGS
//***************

Class BD_BaseEmptyCasing : BD_SmallDebris {
	protected name spawnsprite;
	property spawnsprite : spawnsprite;
	Default {
		BD_SmallDebris.dbrake 0.75;
		BD_SmallDebris.liquidsound "world/watersplashsmall";
		+ROLLCENTER
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		renderstyle "normal";
		seesound "none";
		mass 1;
		Radius 1;
		Height 4;
		bouncefactor 0.3;
		wallbouncefactor 0.4;
		bouncecount 6;
		Scale 0.15;
	}
	Override Void PostBeginPlay() {
		if(!target) {
			destroy();
			return;
		}
		super.PostBeginPlay();
		wrot = frandom(-18,-24);
		roll = frandom(190,195);
		sprite = GetSpriteIndex(spawnsprite);
	}
	override void BD_HitFloor() {
		if (target && target.bISMONSTER) {
			destroy();
			return;
		}
		//Console.Printf("splash %d",GetFloorTerrain().Splash);
		super.BD_HitFloor();		
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (waterlevel > 1) {
			bBOUNCEONFLOORS = false;
			bNOGRAVITY = true;
			if (abs(wrot) > 1)
				wrot *= 0.93;
			if (pos.z > floorz) {
				roll+=wrot;
				vel.z = Clamp(vel.z - 0.1,-0.1,5);
				vel.xy *= 0.92;
			}
		}
		else
			bBOUNCEONFLOORS = true;
			bNOGRAVITY = false;
			gravity = default.gravity;
	}		
	states {
	Spawn:
		#### AABBCCBBAABBCCBB 1 {
			roll += wrot;
			wrot *= 0.99;
		}
		loop;
	Death:
		#### # -1 {
			if (waterlevel == 0) {
				roll = frandom(-8,8);
				bSPRITEFLIP = random(0,1);
				A_StartSound(bouncesound);
			}
		}
		stop;
	loadsprites:
		CAS1 ABC 0;	CAS2 ABC 0;	CAS3 ABC 0;
		stop;
	}
}


Class BD_PistolCasing : BD_BaseEmptyCasing {
	Default {
		Scale 0.11;
		BD_BaseEmptyCasing.spawnsprite 'CAS1';
		bouncesound "weapons/casing";
	}
}

Class BD_ShotgunCasing : BD_BaseEmptyCasing { 
	Default {
		Scale 0.2;
		BD_BaseEmptyCasing.spawnsprite 'CAS2';
		bouncesound "weapons/shotgunshells";
	}
}

Class BD_ChaingunCasing : BD_BaseEmptyCasing { 
	Default {
		BD_BaseEmptyCasing.spawnsprite 'CAS3';
		bouncefactor 0.35;
		wallbouncefactor 0.4;
		Scale 0.15;
		bouncesound "chaingun/casing";
	}
}
