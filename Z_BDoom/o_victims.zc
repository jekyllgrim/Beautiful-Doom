//***************************\\
//***************************\\
//****** V I C T I M S ******\\
//***************************\\
//***************************\\




//decorative blood drop for gory decorations
Class DecorBloodDrop : BD_CeilingBloodDrop {
	Default {
		scale 0.18;
	}
	states {
	spawn:
		CEBL CDE 3;
		TNT1 A 0 { 
			gravity = frandom(0.28,0.32); 
		}
		CEBL F 25;
		stop;
	}
}

Class BD_BaseVictim : BDoomActor abstract {
	mixin BD_PlayerSightCheck;

	protected bool vdead;
	protected double swingspeed;
	property swingspeed : swingspeed;
	protected int spriterange;
	protected name spritename;
	property spriterange : spriterange;
	property spritename : spritename;
	
	protected double rollangVel;
	protected double rollang;
	protected double damping;
	protected int bleedfrequency;
	protected double bleedradius;
	property BleedFrequency : bleedfrequency;
	property BleedRadius : bleedradius;
	protected bool SpawnBloodPool;
	property SpawnBloodPool : SpawnBloodPool;
	Default {
		BD_BaseVictim.BleedFrequency 32;
		BD_BaseVictim.BleedRadius 5;
		BD_BaseVictim.swingspeed 0;
		BD_BaseVictim.spriterange 0;
		BD_Basevictim.spritename 'BDB1';
		BD_BaseVictim.SpawnBloodPool true;
		bloodtype "BD_BloodLight","BD_BloodLight","BD_BloodLight";
		+SOLID
		+SHOOTABLE
		+VULNERABLE
		+DONTTHRUST
		+DONTFALL
		+DONTCORPSE
		+NODAMAGE
		+ROLLSPRITE
		+ROLLCENTER
		+INTERPOLATEANGLES
		+SPRITEFLIP
		+NOTAUTOAIMED
		painsound "";
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (default.bSPRITEFLIP)
			bSPRITEFLIP = randompick(0,1);
		else
			bSPRITEFLIP = false;
		rollangVel = 0;
		rollang = 0;
		damping = 0.02;
		if (pos.z - floorz < 0 || pos.z - floorz > 96)
			return;
		if (!bdoom_blood)
			return;
		if (SpawnBloodPool) {
			let a = BD_AniBloodPool(Spawn("BD_AniBloodPool",(pos.x,pos.y,floorz),ALLOW_REPLACE));
			if (a) {
				a.instant = true;
				//a.scale = (0.2,0.2)*frandom(0.8,1.4);
				a.target = self;
			}
		}
	}
	void BD_StartSwing(double rfactor = 1.0) {
		double sspeed = 1 * rfactor;
		for (int i = 4; i > 0; i--) {
			if (random(0,100) < 50)
				sspeed *= 0.7;
		}
		if (roll ~== 0)
			rollangVel = swingspeed * randompick(-1,1);
		else 
			rollangVel = swingspeed * BD_Sign(roll);
		rollangVel *= sspeed;
	}
	void BD_SetSprite() {
		sprite = GetSpriteIndex(spritename);
		frame = random(0,spriterange);
	}
	override void Tick() {
		super.Tick();
		if (default.bSHOOTABLE)
			bSHOOTABLE = bdoom_killableobjects;
		else if (default.bVULNERABLE)
			bVULNERABLE = bdoom_killableobjects;
		if (isFrozen())
			return;
		//re-check visibility to player every 2 seconds
		if (level.time % 70 == 0)
			canSeePlayer = CheckPlayerSights();
		if (canSeePlayer && bdoom_debris && abs(roll) < 5){
			if (level.time % random(15,40) == 0)
				A_SpawnitemEx("DecorBloodDrop",frandom(-bleedradius,bleedradius),frandom(-bleedradius,bleedradius),frandom(22,height-16),failchance:255-bleedfrequency);
		}
		if (!bROLLSPRITE || swingspeed ~== 0)
			return;
		rollang += rollangVel;
		rollangVel += -(damping * rollang) - rollangVel*damping;
		roll = rollang * 180.0 / pi;
	}
	states {
		Loadsprites:
			BDB1 ABCDEFGHIJK 0;
			BDB3 ABCDEFGHIJKL 0;
			BGO2 ABCDE 0;
			BGO3 ABCDE 0;
			BGO4 ABCDE 0;
			BGO5 AB 0;
			BTWT ABCDEFGHIJKLMNOPQR 0;
			BTWU ABCDEFGHIJKLMNOPQR 0;
			BSTD ABCDEFGH 0;
			stop;
		Spawn:
			TNT1 A 0 NoDelay BD_SetSprite;
			#### # 0 {
				return ResolveState("Idle");
			}
			wait;
		Idle:
			#### # 1;
			loop;
		Pain:
			#### # 0 {
				BD_StartSwing();
				A_StartSound(painsound,CHAN_BODY,flags:CHANF_NOSTOP,attenuation:4);
			}
			#### # 0 {
				return ResolveState("Idle");
			}
			wait;
	}
}

Class BD_HangingTorso : BD_BaseVictim {	
	Default {
		BD_BaseVictim.swingspeed 0.08;
		BD_BaseVictim.spriterange 10;
		BD_BaseVictim.spritename 'BDB1';
		BD_BaseVictim.SpawnBloodPool false;
		Radius 16;
		Height 64;
		xscale 0.8;
		yscale 0.68;
		+NOGRAVITY
		+SPAWNCEILING
		painchance 160;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (!bdoom_gibs)
			return;
		for (int i = random(2,4); i > 0; i--) {
			let g = BD_BasicMeatPiece(Spawn("BD_BasicMeatPiece",(pos.x+frandom(-8,8),pos.y+frandom(-8,8),floorz+1)));
			if (g) 
				g.instant = true;
		}
		for (int i = random(2,4); i > 0; i--) {
			let b = Spawn("BD_BloodPool",(pos.x+frandom(-8,8),pos.y+frandom(-8,8),floorz),ALLOW_REPLACE);
			if (b)
				b.target = self;
		}
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (abs(roll) < 1 && rollangVel > 0.01)
			A_StartSound("victims/ropecreak",slot:CHAN_VOICE,flags:CHANF_NOSTOP,attenuation:4);
	}
}

Class BD_HangingBody : BD_HangingTorso {
	Default {
		BD_BaseVictim.swingspeed 0.05;
		BD_BaseVictim.spriterange 11;
		BD_BaseVictim.spritename 'BDB3';
		Radius 16;
		Height 88;
	}
}

//hanging body upside-down
Class BD_Meat2 : BD_BaseVictim {
	Default {
		BD_BaseVictim.swingspeed 0.015;
		BD_BaseVictim.spriterange 4;
		BD_BaseVictim.spritename 'BGO2';
		Radius 16;
		Height 84;
		xscale 0.9;
		yscale 0.74;
		painchance 160;
		+NOGRAVITY
		+SPAWNCEILING
		-SPRITEFLIP
		painsound "victims/chain";
	}
}

//hanging body upside-down, missing leg
Class BD_Meat3 : BD_Meat2 {
	Default {
		BD_BaseVictim.spriterange 4;
		BD_BaseVictim.spritename 'BGO3';
	}
}

//hanging legs upside-down
Class BD_Meat4 : BD_Meat2 {
	Default {
		BD_BaseVictim.spriterange 4;
		BD_BaseVictim.spritename 'BGO4';
		height 68;
	}
}

//hanging single leg upside-down
Class BD_Meat5 : BD_Meat2 {
	Default {
		BD_BaseVictim.swingspeed 0.018;
		BD_BaseVictim.spriterange 1;
		BD_BaseVictim.spritename 'BGO5';
		height 52;
	}
}

Class BD_NonsolidMeat2 : BD_Meat2 {
	Default {
		-SOLID
		-SHOOTABLE
		+VULNERABLE
		radius 20;
	}
}

Class BD_NonsolidMeat3 : BD_Meat3 {
	Default {
		-SOLID
		-SHOOTABLE
		+VULNERABLE
		radius 20;
	}
}

Class BD_NonsolidMeat4 : BD_Meat4 {
	Default {
		-SOLID
		-SHOOTABLE
		+VULNERABLE
		radius 20;
	}
}

Class BD_NonsolidMeat5 : BD_Meat5 {
	Default {
		-SOLID
		-SHOOTABLE
		+VULNERABLE
		radius 20;
	}
}

Class BD_BloodyTwitch : BD_BaseVictim {
	Default {
		BD_BaseVictim.swingspeed 0.01;
		radius 16;
		height 68;
		yscale 0.8;
		health 80;
		-NODAMAGE
		painchance 220;
		+BUDDHA
		+NOGRAVITY
		+SPAWNCEILING
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (health <= 1 && !vdead)
			SetStateLabel("Die");
	}
	states {
		Spawn:
			BTWT A 0 NoDelay {
				if (random(0,1) == 1)
					sprite = GetSpriteIndex("BTWU");
			}
		Idle:
			#### A 0 A_Jump(256,"HeadNeutral","HeadLowered","HeadRaised");
		Pain:
			#### # 1 {
				bNOPAIN = true;
				A_StartSound("victims/chain",slot:CHAN_BODY,flags:CHANF_NOSTOP,attenuation:4);
				BD_StartSwing(2.5);
				if (vdead)
					return ResolveState("Dead");
				else if (health <= 1)
					return ResolveState("Die");
				else {
					A_StartSound("victims/pain",slot:CHAN_VOICE,flags:CHANF_NOSTOP);
					if (frame > 5 && frame < 9)
						return ResolveState("LowTwitch");
					else
						return ResolveState("TopTwitch");
				}
				return ResolveState(null);
			}
			goto spawn;
		HeadNeutral:
			#### AB random(20,60) A_Jump(128,"RaiseHead","LowerHead");
			loop;
		LowerHead:
			#### AFG 6;
		HeadLowered:
			#### GHGI random(20,60);
			#### A 0 A_Jump(144,"HeadLoweredEnd","LowTwitch","Cough");
			loop;
		HeadLoweredEnd:
			#### FB 6;
			goto HeadNeutral;
		RaiseHead:
			#### BC 6;			
		HeadRaised:
			#### CD random(20,60);
			#### A 0 A_Jump(112,"HeadRaisedEnd","TopTwitch");
			loop;
		HeadRaisedEnd:
			#### CB 6;
			goto HeadNeutral;
		TopTwitch:
			#### A 0 {
				A_StartSound("victims/chain",attenuation:4);
				BD_StartSwing();
			}
			#### CECECE random(9,12);
			#### A 0 { bNOPAIN = false; }
			goto HeadRaised;
		LowTwitch:
			#### A 0 {
				A_StartSound("victims/chain",attenuation:4);
				BD_StartSwing();
			}
			#### IJIJIJ random(9,12);
			#### A 0 { bNOPAIN = false; }
			goto HeadLowered;
		Cough:
			#### G 4;
			#### A 0 A_StartSound("victims/cough",attenuation:5);
			#### KLMN 4;
			#### G 10;
			#### A 0 A_Jump(96,"HeadLowered");
			#### A 0 A_StartSound("victims/cough",attenuation:5);
			#### KLMN 4;
			#### G 14;
			goto HeadLowered;
		Die:
			#### F 5 {
				A_StartSound("victims/death",slot:CHAN_ITEM);
				vdead = true;
			}
			#### GOPQ 7;
		Dead:
			#### R 20;
			#### A 0 { bNOPAIN = false; }
			loop;
	}
}


Class BD_NonsolidTwitch : BD_BloodyTwitch {
	Default {
		-SOLID
		-SHOOTABLE
		+VULNERABLE
		radius 20;
	}
}

Class BD_DeadStick : BD_BaseVictim {
	Default {
		Radius 16;
		Height 64;
		ProjectilePassHeight -16;
		-ROLLSPRITE
		-SPRITEFLIP
		xscale 0.8;
		yscale 0.68;
	}
	states {
		Spawn:
			BSTD A -1 NoDelay { 
				frame = random (0,7); 
			}
			stop;
	}
}

Class BD_LiveStick : BD_BaseVictim {
	Default {
		Radius 16;
		Height 64;
		ProjectilePassHeight -16;
		-ROLLSPRITE
		-SPRITEFLIP
		xscale 0.8;
		yscale 0.68;
		health 80;
		-NODAMAGE
		painchance 220;
		+BUDDHA
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (health <= 1 && !vdead)
			SetStateLabel("Die");
	}
	states {
		Spawn:
			BLIV A random(15,80);
			TNT1 A 0 A_Jump(128,"Twitch");
			loop;
		Twitch:
			BLIV B 6;
			BLIV CD 6 A_Jump(112,"TwitchEnd");
			#### # 0 A_Jump(64,"TryFree");			
		TwitchEnd:
			BLIV # 6 {
				if (frame == 0)					
					return ResolveState("Spawn");				
				frame--;
				A_SetTics(9-frame);
				return ResolveState(null);
			}
			loop;
		TryFree:
			BLIV EFGHIJK 4;
		TopTwitch:
			BLIV J random(7,10);
			BLIV K random(9,18);
			TNT1 A 0 A_Jump(96,"TopTwitch");
			goto TryFreeEnd;
		TryFreeEnd:
			BLIV K random(14,20);
			BLIV JIHGFEDCB 4;
			goto spawn;
		Pain:
			TNT1 A 0 {
				bNOPAIN = true;
				A_StartSound("victims/pain",slot:CHAN_BODY,flags:CHANF_NOSTOP);
			}
			BLIV ABC 2;
			BLIV BA 5;
			TNT1 A 0 {
				bNOPAIN = false;
			}
			goto spawn;
		Die:
			TNT1 A 0 {
				A_StartSound("victims/death",slot:CHAN_VOICE);
				vdead = true;
				bNOPAIN = true;
			}
			BLIV BCB 6;
			BLIV ALM 7;
			BLIV N -1;
			stop;
	}
}



Class BD_HeadOnAStick : BD_BaseVictim {
	Default {
		Radius 16;
		Height 56;
		ProjectilePassHeight -16;
		-ROLLSPRITE
		xscale 0.8;
		yscale 0.7;
		BD_BaseVictim.bleedradius 1.2;
	}
	states {
		Spawn:
			BHOP A -1 NoDelay { 
				frame = random (5,11); 
			}
			stop;
	}
}

Class BD_HeadsOnAStick : BD_HeadOnAStick {
	Default {
		Height 64;
	}
	states {
		Spawn:
			BHOP A -1 NoDelay { 
				frame = random (0,4); 
			}
			stop;
	}
}

Class BD_ColonGibs : Actor {
	Default {
		+NOINTERACTION
	}
	override void Tick() {}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		for (int i = random(1,2); i > 0; i--) {
			let b = Spawn("BD_BloodPool",(pos.x+frandom(-8,8),pos.y+frandom(-8,8),floorz),ALLOW_REPLACE);
			if (b)
				b.target = self;
		}
		for (int i = random(2,3); i > 0; i--) {
			let g = BD_BasicMeatPiece(Spawn("BD_BasicMeatPiece",(pos.x+frandom(-8,8),pos.y+frandom(-8,8),floorz+1)));
			if (g) 
				g.instant = true;
		}
	destroy();
	return;
	}
}

Class BD_SmallBloodPool : Actor {
	Default {
		+NOINTERACTION
	}
	override void Tick() {}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		let a = BD_AniBloodPool(Spawn("BD_AniBloodPool",(pos.x,pos.y,floorz),ALLOW_REPLACE));
		if (a) {
			a.instant = true;
			a.target = self;
		}
	destroy();
	return;
	}
}