Class BD_SuperShotgun : BDoomWeapon {
	protected bool ShotFired;
	protected bool WasCancelled;
	Default {
		Tag "$TAG_SUPERSHOTGUN";
		inventory.pickupmessage "$GOTSHOTGUN2"; 
		Obituary "$OB_MPSSHOTGUN"; 
		weapon.selectionorder 40;
		Weapon.AmmoType	"Shell";
		Weapon.AmmoUse		1;
		Weapon.AmmoGive	0;
		BDoomWeapon.magammo	"BD_SSGClip";
		Weapon.AmmoType2	"Shell";
		Weapon.AmmoUse2	1;
		Weapon.AmmoGive2	8;
		weapon.slotnumber 	3;
		weapon.slotpriority 1;
		BDoomWeapon.AutoReloadTime 160;
		BDoomWeapon.reloadsound "Mweapons/ssg/close";
		BDoomWeapon.ClassicIcon "SGN2A0";
		BDoomWeapon.ModernIcon "SGN2B0";
	}
	action state BD_CancelReload() {		
		if ((player.cmd.buttons & BT_ATTACK) && !(player.oldbuttons & BT_ATTACK)) {
			invoker.WasCancelled = true;
			return ResolveState("ReloadCancel");
		}
		return ResolveState(null);
	}
	override void Tick() {
		If (Owner)
			return;
		else {
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN)
				pickupsound = "Mweapons/ssg/close";
			else
				pickupsound = "weapons/ssg/close";
		}
		Super.Tick();
	}
	override void DoEffect() {
		Super.DoEffect();
		if (!owner)
			return;
		if(bdoom_weapons == BD_WeaponSet.WS_MODERN) {
			ammouse2 = 0;
			bNOAUTOFIRE = true;
			bAMMO_OPTIONAL = true;
		}
		else {
			ammouse2 = 1;
			bNOAUTOFIRE = false;
			bAMMO_OPTIONAL = false;
		}
		if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
			ammouse1 = 1;
		else
			ammouse1 = 2;
	}
	states {
	Spawn:
		SGN2 A 1 {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				self.frame = 1;
			else
				self.frame = 0;
		}
		loop;
	Select:
		TNT1 A 0 {
			if (bdoom_weapons==2)
				return ResolveState("Select.Modern");
			else if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				A_StartSound("weapons/ssg/draw");
			A_WeaponOffset(0,86);
			BD_SetSprite("SH2R","QH2R");	
			return ResolveState(null);
		}
		#### FEDCBA 1 A_WeaponReady(WRF_NOFIRE);
		goto ready;
	Deselect:
		TNT1 A 0 {
			If(bdoom_weapons==2)
				return ResolveState("Deselect.Modern");
			else If(bdoom_weapons==1)
				return ResolveState("Deselect.Enhanced");
			BD_SetSprite("SH2N","QH2N");	
			return ResolveState(null);
		}
		#### C 1 A_Lower();
		wait;
	Ready:
		TNT1 A 0 {
			If(bdoom_weapons==2)
				return ResolveState("Ready.Modern");
			else If(bdoom_weapons==1)
				return ResolveState("Ready.Enhanced");				
			BD_SetSprite("SH2N","QH2N");
			return ResolveState(null);
		}
		#### C 1 A_WeaponReady(WRF_NOSECONDARY);
		loop;
	Fire:
	//fire = 10 tics, reload = 41 tics, refire 11 tics
		TNT1 C 3 {
			If(bdoom_weapons==2)
				return ResolveState("Fire.Modern");
			else If(bdoom_weapons==1)
				return ResolveState("Fire.Enhanced");		
			BD_SetSprite("SH2N","QH2N");
			return ResolveState(null);
		}
		#### C 2 {	
			A_WeaponOffset(frandom(-0.5,0.5),frandom(10,11),WOF_ADD);
			A_StartSound("weapons/sshotf",CHAN_AUTO);	
			A_Gunflash();
			BD_FireBullets (11.2, 7.1, 20, 5, pufftype: "BD_EnSSGPuff");
		}
		#### CCCCC 1 A_WeaponOffset(0,-2,WOF_ADD);
		TNT1 A 0 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		TNT1 A 0 A_CheckReload();
	Reload:
		TNT1 A 0 {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Reload.Modern");
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED && invoker.ShotFired)
				return ResolveState("Reload.EnhancedRight");
			BD_SetSprite("SH2R","QH2R");
			return ResolveState(null);
		}
		#### ABCD 1;
		#### EFGH 2;
		#### I 1 {
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				A_StartSound("weapons/ssg/open");
			else
				A_StartSound("weapons/sshoto");
		}
		#### J 1 {
			if (bdoom_debris) {
				A_Eject("BD_ShotgunCasing",16,-3.5,6.5,frandom(0,1),FRandom(-2.5,-3),frandom(4,5));
				A_Eject("BD_ShotgunCasing",16,-5,6.5,frandom(0,1),FRandom(-2.5,-3),frandom(4,5));
			}
		}
		#### K 4;
		#### LMNT 1;
		#### U 2 {
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				A_StartSound("weapons/ssg/in");
			else
				A_StartSound("weapons/sshotl");
		}
		#### VWXYZ 2;
		#### D 4 {
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				A_StartSound("weapons/ssg/close");
			else
				A_StartSound("weapons/sshotc");
		}
		#### CCB 1;
		#### BAA 1 A_WeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH);
		goto ready;
	Flash:
		TNT1 A 2 {
			A_Light2();
			if(!invoker.c_muzzle)
				A_Overlay(PSP_EFLASH,"FlashVanilla");
			else {
				double vofs = bdoom_weapons == BD_WeaponSet.WS_MODERN ? 10 : 15;
				DrawMuzzleSmoke((10,vofs), sAlpha: 0.38, sVSpeed: 1.3, sScale: 0.7);
				DrawMuzzleSmoke((-10,vofs), sAlpha: 0.38, sVSpeed: 1.3, sScale: 0.7);
				A_Overlay(PSP_EFLASH,"FlashEnhanced");
				A_Overlay(PSP_MFLASH,"FlashMuzzle");
				if (random(0,1) == 1) 
					A_OverlayFlags(PSP_MFLASH,PSPF_FLIP,true);
				A_OverlayFlags(PSP_MFLASH,PSPF_ADDWEAPON,false);
				A_OverlayOffset(PSP_MFLASH,0,44);
				A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
			}
			A_OverlayFlags(PSP_EFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayRenderstyle(PSP_EFLASH,STYLE_Add);
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN) {
				A_OverlayOffset(PSP_EFLASH, 0,-12,WOF_ADD);
				A_OverlayOffset(PSP_MFLASH, 0,-12,WOF_ADD);
				A_SetTics(1);
			}
		}
		TNT1 A 1 {
			A_light1();
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				BD_ClearPSprite(PSP_EFLASH,PSP_MFLASH);
		}
		goto lightdone;
	FlashVanilla:
		SH2L A 2 bright;
		SH2L B 1 bright;
		stop;		
	FlashEnhanced:
		SH2L I 2 bright A_OverlayAlpha(OverlayID(),1);
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.8);
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.5);
		stop;
	FlashMuzzle:
		MUZ4 A 2 bright {
			let fl = player.FindPSprite(OverlayID());
			fl.frame = random(0,3);
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				A_SetTics(1);
		}
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.8);
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.5);
		stop;			
	
	Deselect.Enhanced:
		TNT1 A 0 {			
			BD_SetSprite("SH2N","QH2N");
			let s = player.FindPSprite (PSP_Weapon);				
			if (invoker.ShotFired)
				s.frame = 1;
			else
				s.frame = 0;
		}
		#### # 1 A_Lower(12);
		wait;
	Ready.Enhanced:
		TNT1 A 1 {
			BD_SetSprite("SH2N","QH2N");
			if (invoker.shotfired)
				A_WeaponReady(WRF_ALLOWRELOAD);
			else
				A_WeaponReady();
			let s = player.FindPSprite (PSP_Weapon);
			if (invoker.ShotFired)
				s.frame = 1;
			else
				s.frame = 0;
		}
		goto ready;
	Fire.Enhanced:
		TNT1 A 3 {
			If(invoker.ShotFired || invoker.ammo1.amount < 2)
				return ResolveState("AltFire");
			BD_SetSprite("SH2N","QH2N");
			return ResolveState(null);
		}
		#### B 1 {
			A_Gunflash("Flash");
			A_WeaponOffset(frandom(-0.5,0.5),frandom(15,18),WOF_ADD);
			A_StartSound("weapons/ssg/dfire",slot:CHAN_5);
			BD_FireBullets(11.2, 7.1, 20, 5, pufftype: "BD_EnSSGPuff");
			A_TakeInventory("Shell",1,TIF_NOTAKEINFINITE);
		}
		
		#### # 0 A_StartSound("weapons/ssg/dfire2", 6);
		#### CCCCCC 1 A_WeaponOffset(0,-2.5,WOF_ADD);
		TNT1 A 0 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		TNT1 A 0 A_CheckReload();
		goto Reload;
	AltFire:
		TNT1 A 3 {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("AltFire.Modern");
			BD_SetSprite("SH2N","QH2N");
			If(invoker.ShotFired) {
				let psp = player.FindPSprite(PSP_WEAPON);
				if (psp) psp.frame = 1;
			}
			return ResolveState(null);
		}
		#### B 1 {
			A_Gunflash("AltFlash");
			A_StartSound("weapons/ssg/fire",slot:CHAN_5);
			A_WeaponOffset(0,12,WOF_ADD);
			If(invoker.ShotFired) {
				let psp = player.FindPSprite(PSP_WEAPON);
				if (psp) psp.frame = 2;
				invoker.ShotFired = false;
			}
			else
				invoker.ShotFired = true;
			BD_FireBullets(10,6.5,10,5, pufftype: "BD_EnSSGPuff");
		}
		#### ###### 1 A_WeaponOffset(0,-2,WOF_ADD);
		TNT1 A 0 {
			A_WeaponOffset(0,32,WOF_INTERPOLATE);
			if (invoker.shotfired)
				return ResolveState("Ready");
			return ResolveState(null);
		}
		TNT1 A 0 A_CheckReload();
		goto Reload;		
	Reload.EnhancedRight:
		TNT1 A 0 {
			if (CountInv("Shell") < 1)
				A_CheckReload();
		}
		TNT1 A 0 {
			BD_SetSprite("SH2R","QH2R");
			invoker.shotfired = false;
		}
		#### ABCDEF 1;
		#### GH 2;
		#### I 1 A_StartSound("weapons/ssg/open");
		#### O 1 {
			if (bdoom_debris) {
				A_Eject("BD_ShotgunCasing",16,-5,6.5,frandom(0,1),FRandom(-2.5,-3),frandom(4,5));
			}
		}
		#### P 2;
		#### QRST 1;
		#### U 1 A_StartSound("weapons/ssg/in");
		#### VWXYZ 2;
		#### D 2 A_StartSound("weapons/ssg/close");
		#### C 2;
		#### BA 2 A_WeaponReady(WRF_NOSWITCH);
		goto ready;
	AltFlash:
		TNT1 A 2 {
			A_Light2();
			if(!invoker.c_muzzle) {
				if	(invoker.shotfired || (bdoom_weapons == BD_WeaponSet.WS_MODERN && CountInv("BD_SSGClip") < 2))
					A_Overlay(PSP_EFLASH,"FlashVanillaLeft");
				else
					A_Overlay(PSP_EFLASH,"FlashVanillaRight");
			}
			else {
				A_Overlay(PSP_EFLASH,"FlashEnhancedSide");
				A_Overlay(PSP_MFLASH,"FlashMuzzleSide");
				A_OverlayFlags(PSP_MFLASH,PSPF_ADDWEAPON,false);
				A_OverlayOffset(PSP_MFLASH,0,44);
				A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
				double vofs = bdoom_weapons == BD_WeaponSet.WS_MODERN ? 10 : 15;
				if	((bdoom_weapons == BD_WeaponSet.WS_ENHANCED && invoker.shotfired) || (bdoom_weapons == BD_WeaponSet.WS_MODERN && CountInv("BD_SSGClip") < 2)) {
					DrawMuzzleSmoke((-10,vofs), sAlpha: 0.38, sVSpeed: 1.3, sScale: 0.7);
				}
				else {
					DrawMuzzleSmoke((10,vofs), sAlpha: 0.38, sVSpeed: 1.3, sScale: 0.7);
					A_OverlayFlags(PSP_MFLASH,PSPF_FLIP|PSPF_MIRROR,true);
					A_OverlayFlags(PSP_EFLASH,PSPF_FLIP|PSPF_MIRROR,true);
				}
			}
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN) {
				A_OverlayOffset(PSP_EFLASH, 0,-12,WOF_ADD);
				A_OverlayOffset(PSP_MFLASH, 0,-12,WOF_ADD);
				A_SetTics(1);
			}
			A_OverlayFlags(PSP_EFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayRenderstyle(PSP_EFLASH,STYLE_Add);
			A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
		}
		TNT1 A 1 {
			A_light1();
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				BD_ClearPSprite(PSP_EFLASH,PSP_MFLASH);
		}				
		goto lightdone;
	FlashVanillaLeft:
		SH2L C 2 bright;
		SH2L D 1 bright;
		stop;		
	FlashVanillaRight:
		SH2L E 2 bright;
		SH2L F 1 bright;
		stop;		
	FlashEnhancedSide:
		SH2L G 2 bright A_OverlayAlpha(OverlayID(),1);
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.8);
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.5);
		stop;
	FlashMuzzleSide:
		MUZ3 A 2 bright {
			let fl = player.FindPSprite(OverlayID());
			if (fl)
				fl.frame = random(0,3);
		}
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.8);
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.5);
		stop;	
		
	//MODERN
	Select.Modern:		
		SST2 A 0 {
			A_WeaponOffset(-20.0,60.0);
			A_StartSound("weapons/ssg/draw");
			BD_SetSprite("SST2","QST2");
		}
		#### #### 1 {
			A_WeaponOffset(5.0,-7.0,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		goto ready;
	Deselect.Modern:
		TNT1 A 0 BD_SetSprite("SST2","QST2");
		#### A 1 A_Lower(18);
		wait;		
	Ready.Modern:
		SST2 A 1 {
			BD_WeaponReady(true);
			BD_SetSprite("SST2","QST2");
		}
		goto ready;
	DryReload:
		SST2 A 8 {
			A_StartSound("Mweapons/dry");
			BD_SetSprite("SST2","QST2");
		}
		goto Reload;
	Fire.Modern:		
		SST2 A 1 {
			If(CountInv("BD_SSGClip") == 0)
				return ResolveState("DryReload");
			else If(CountInv("BD_SSGClip") == 1)
				return ResolveState("AltFire.Modern");
			BD_FireModernBullet("BD_SSGPellet", 15.0, 7, 24);
			//A_FireBullets (15.0, 7, 24, 0, "BD_NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_SSGPellet",4,0);
			BD_SetPitch(pitch-frandom(2.8,3.5),SPF_INTERPOLATE);
			A_setAngle(angle+frandom(-1,1),SPF_INTERPOLATE);
			A_Gunflash("Flash");
			A_StartSound("Mweapons/ssg/firedual",slot:CHAN_5);
			A_ZoomFactor(0.98,ZOOM_NOSCALETURNING);
			BD_SetSprite("SST2","QST2");
			return ResolveState(null);
		}
		#### A 0 A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		#### BCD 1 A_WeaponOffset(frandom(-0.3,0.3),4,WOF_ADD);
		#### EEFFAA 1 A_WeaponOffset(frandom(-0.15,0.15),-2,WOF_ADD);
		#### A 0 A_WeaponOffset(0,32,WOF_INTERPOLATE);
		goto Reload;
	AltFire.Modern:
		SST2 A 1 {
			If(CountInv("BD_SSGClip") == 0)
				return ResolveState("DryReload");
			else If(CountInv("BD_SSGClip") == 2) 
				A_StartSound("Mweapons/ssg/fire1",slot:CHAN_5);
			else If(CountInv("BD_SSGClip") == 1) 
				A_StartSound("Mweapons/ssg/fire1",slot:CHAN_6);
			A_Gunflash("AltFlash");
			BD_FireModernBullet("BD_SSGPellet", 15.0, 7, 12);
			A_TakeInventory("BD_SSGClip",1,TIF_NOTAKEINFINITE);
			BD_SetPitch(pitch-frandom(2.3,3.0),SPF_INTERPOLATE);
			A_setAngle(angle+frandom(-0.5,0.5),SPF_INTERPOLATE);
			A_ZoomFactor(0.986,ZOOM_NOSCALETURNING);
			BD_SetSprite("SST2","QST2");
			return ResolveState(null);
		}
		#### A 0 A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		#### BCD 1 A_WeaponOffset(0,2.5,WOF_ADD);
		#### EEFFAA 1 A_WeaponOffset(0,-1.25,WOF_ADD);
		#### A 0 {
			If(CountInv("BD_SSGClip") == 0)
				return ResolveState("Reload");
			return ResolveState(null);
		}
		#### A 5 A_WeaponReady(WRF_NOSECONDARY);
		goto ready;
	Reload.Modern:
		TNT1 A 0 {
			if (CountInv("BD_SSGClip") == 2 || CountInv("Shell") < 1)
				return ResolveState("Ready.Modern");
			BD_SetSprite("SSTR","QSTR");
			return ResolveState(null);
		}
		#### ABCDE 1;
		#### A 0 A_StartSound("Mweapons/ssg/open");
		#### FGH 2;
		
		#### A 0 {
			if (CountInv("BD_SSGClip") == 1 || CountInv("Shell") == 1)
				return ResolveState("Reload1");
			return ResolveState(null);
		}
			
		#### I 8 {
			if (Bdoom_debris) {
				if (!invoker.WasCancelled)
					A_Eject("BD_ShotgunCasing",18,0,12,frandom(0,1),FRandom(1,1.5),frandom(2,3));
				A_Eject("BD_ShotgunCasing",18,-2,12,frandom(0,1),FRandom(1,1.5),frandom(2,3)); 
			}
		}
		TNT1 A 0 BD_SetSprite("SSTI","QSTI");
		#### ABCDE 2;
		#### F 1 {
			A_TakeInventory("Shell",1,TIF_NOTAKEINFINITE);
			A_GiveInventory("BD_SSGClip",1);
			A_StartSound("Mweapons/ssg/in");
		}
		#### FFGGHHIIKKLLMMM 1 BD_CancelReload();
		#### # 0 {
			A_TakeInventory("Shell",1,TIF_NOTAKEINFINITE);
			A_GiveInventory("BD_SSGClip",1);
			A_StartSound("Mweapons/ssg/in");
		}
		goto ReloadEnd;
	Reload1:
		#### Y 8 {
			BD_SetSprite("SSTI","QSTI");
			if (Bdoom_debris) {
				A_Eject("BD_ShotgunCasing",18,0,12,frandom(0,1),FRandom(1,1.5),frandom(2,3));
			}
		}
		TNT1 A 0 BD_SetSprite("SSTJ","QSTJ");
		#### AB 1;
		TNT1 A 0 BD_SetSprite("SSTI","QSTI");
		#### I 1;
		#### JKL 2;
		#### M 3 {
			A_TakeInventory("Shell",1,TIF_NOTAKEINFINITE);
			A_GiveInventory("BD_SSGClip",1);
			A_StartSound("Mweapons/ssg/in");
		}
		goto ReloadEnd;
	ReloadEnd:
		TNT1 A 0 BD_SetSprite("SSTI","QSTI");
		#### NO 2;
		#### X 4;
		TNT1 A 0 BD_SetSprite("SSTR","QSTR");
		#### HG 1;
		#### A 0 A_StartSound("Mweapons/ssg/close");		
		#### FE 2;
		#### DCBA 1;
		SST2 A 2 {
			A_WeaponReady(WRF_NOSWITCH);
			BD_SetSprite("SST2","QST2");
		}
		goto ready;	
	ReloadCancel:
		TNT1 A 0 {
			BD_SetSprite("SSTR","QSTR");
			A_StartSound("Mweapons/ssg/close");		
		}
		#### HGFE 1;
		goto Fire.Modern;
	}
}

Class BD_SSGClip : ammo {
	Default {
	inventory.icon "HSHLY0";
		inventory.amount 1;
		inventory.maxamount 2;
		ammo.backpackamount 0;
		ammo.backpackmaxamount 2;
		+INVENTORY.IGNORESKILL
	}
}

Class BD_EnSSGPuff : BD_EnBulletPuff {
	Default {
		+HITTRACER
		+PUFFONACTORS
	}
	states {
	Crash:
		TNT1 A 0;
		goto super::Spawn;
	XDeath:
		TNT1 A 1 {
			if (!tracer || !target)
				return;
			let xd = tracer.FindState("XDeath");
			if (!xd || InStateSequence(tracer.curstate,xd))
				return;
			if (Distance3D(target) > 320)
				return;
			if (!tracer.FindInventory("BD_SSGGibControl"))
				tracer.GiveInventory("BD_SSGGibControl",1);
			let ssgib = BD_SSGGibControl(tracer.FindInventory("BD_SSGGibControl"));
			if (!ssgib)
				return;
			ssgib.dmgtotal -= (5*frandom(1,3));
			//Console.Printf("%s dmgtotal: %d/%d",tracer.GetClassName(),ssgib.dmgtotal,tracer.GetGibHealth());
		}
		stop;
	}
}

Class BD_SSGGibControl : Inventory {
	int dmgtotal;
	Default {
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		inventory.maxamount 1;
	}
	override void DoEffect() {
		super.DoEffect();
		if (GetAge() > 5) {
			destroy();
			return;
		}
		if (!owner || !owner.bISMONSTER) {
			destroy();
			return;
		}
		if (owner.health > 0)
			return;
		let xd = owner.FindState("XDeath");
		if (!xd || InStateSequence(owner.curstate,xd)) {
			destroy();
			return;
		}
		else /*if (InStateSequence(owner.curstate,owner.FindState("Death")))*/ {
			if (dmgtotal <= owner.GetGibHealth()) {
				if (random(1,2) == 2)
					owner.SetState(xd);
				destroy();
				return;
			}
		}
	}
	override void Tick() {}
}