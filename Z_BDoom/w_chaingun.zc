Class BD_Chaingun : BDoomWeapon {
	double HeatStacks;
	double HeatDecay;
	protected bool RifleSights;
	protected int tfired;
	
	protected int spintics;
	protected double spinspeed;
	protected int spinframe;
	
	protected bool isLocked;
	
	const HV_MINHEAT = 16.0;
	const HV_MAXHEAT = 60.0;
	const HV_MEDSPINSPEED = 16.0;
	const HV_HIGHSPINSPEED = 35.0;
	const HV_MAXSPINSPEED = 40.0;
	const HV_MAXSPINTICS = 4;
	
	state s_spin;
	
	Default	{
		Tag "$TAG_CHAINGUN";
		weapon.selectionorder 70;
		Weapon.AmmoType		"Clip";
		Weapon.AmmoUse			1;
		Weapon.AmmoGive		0;
		BDoomWeapon.magammo	"BD_RifleClip";
		Weapon.AmmoType2		"Clip";
		Weapon.AmmoUse2		1;
		Weapon.AmmoGive2		20;
		weapon.slotnumber		4;
		BDoomWeapon.AutoReloadTime 140;
		BDoomWeapon.reloadsound "Mweapons/rifle/clipin";
		BDoomWeapon.ClassicIcon "MGUNZ0";
		BDoomWeapon.ModernIcon "RIFNZ0";
	}
	
	action void SpawnChaingunCasing() {
		if(bdoom_debris)
			A_Eject("BD_ChaingunCasing",10,frandom[bdsfx](5,7),20,frandom[bdsfx](0,2),frandom[bdsfx](3.5,4.5),frandom[bdsfx](3.2,4));
	}
	
	action void SpawnRifleCasing() {
		if(!bdoom_debris)
			return;
		if (invoker.RifleSights)
			A_Eject("BD_ChaingunCasing",13,frandom[bdsfx](3,4),4,frandom[bdsfx](0,2),frandom[bdsfx](8,9),frandom[bdsfx](2,2.5));
		else
			A_Eject("BD_ChaingunCasing",20,frandom[bdsfx](1,2),12.5,frandom[bdsfx](0,2),frandom[bdsfx](4.5,5),frandom[bdsfx](2,2.5));
	}
	
	action void A_SpinningFire() {
		// Let the player fire if they press the Fire button,
		// as long as they do it on the A frame, have enough
		// ammo to fire and the chaingun isn't overheated:
		if (invoker.ammo1.amount > 0 && !invoker.isLocked && player.cmd.buttons & BT_ATTACK && invoker.spinframe == 0) {
			// Increase heatstacks when firing:
			invoker.HeatStacks = Clamp(invoker.heatStacks+1.2,0,HV_MAXHEAT);
			// If heatstacks is over HV_MAXHEAT, do overheat:
			if (invoker.heatStacks >= HV_MAXHEAT) {
				invoker.isLocked = true;
				A_StartSound("weapons/chaingun/cool",CHAN_CHGCOOL,flags:CHANF_LOOP);
				A_StartSound("weapons/chaingun/lock");
			}
			// Muzzle flash, firing sound, firing:
			A_GunFlash("AltFlash");
			A_StartSound("weapons/chaingun/fire",flags:CHANF_OVERLAP);
			BD_FireBullets (8, 3, -1, 5);
			SpawnChaingunCasing();
		}
	}
	
	override string PickupMessage () {
		if(bdoom_weapons == BD_WeaponSet.WS_MODERN)
			return "$BD_ARTAG"; 
		else
			return "$GOTCHAINGUN"; 
	}
	
	override void PostBeginPlay() {
		super.PostBeginPlay();
		s_spin = FindState("AltHold");
	}
	
	override string GetObituary (Actor victim, Actor inflictor, Name mod, bool playerattack) {
		if(bdoom_weapons == BD_WeaponSet.WS_MODERN) 
			return "$BD_AROBITUARY"; 
		else 
			return "$OB_MPCHAINGUN"; 
	}
	
	override void Tick() {
		If (Owner)	
			return;
		else {
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN) {
				pickupsound = "Mweapons/rifle/clipin";
			}
			else {
				pickupsound = "pickups/chaingun"; 
			}
		}
		Super.Tick();
	}
	
	override void DoEffect() {
		Super.DoEffect();
		if (!owner || !owner.player)
			return;
			
		if(bdoom_weapons == BD_WeaponSet.WS_MODERN) {
			SetTag("$BD_ARTAG");
			bNOAUTOFIRE = !RifleSights;
			bAMMO_OPTIONAL = true;
			bNOALERT = true;
		}
		else {
			SetTag("$TAG_CHAINGUN");
			bNOAUTOFIRE = false;
			bAMMO_OPTIONAL = false;
			bNOALERT = false;
		}
		
		let readyweapon = owner.player.readyweapon;
		if (!readyweapon)
			return;
		let psp = owner.player.FindPSprite(PSP_WEAPON);
		if (!psp)
			return;
		
		let player = owner.player;
		
		if (bdoom_debug && bdoom_weapons == BD_WeaponSet.WS_ENHANCED && readyweapon == self) {
			console.midprint(smallfont, String.Format("spinspeed: %.1f", spinspeed));
		}
		
		// Weapons are set to Enhanced, player is alive:
		if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED && owner.health > 0) {
			// If heatstacks are above 0 and the chaingun is either already overheated, 
			// or the player is not currently pressing the Fire button, reduce
			// the amount of heat:
			if (heatStacks > 0 && (isLocked || !(player.cmd.buttons & BT_ATTACK))) {
				// If the chaingun is overheated, reduce
				// by 0.5, otherwise reduce by 1:
				double rd = isLocked ? 0.5 : 1;
				HeatStacks = Clamp(heatStacks-rd,0,HV_MAXHEAT); 
			}
			
			// If not in AltFire, spinspeed is gradually (but not instantly) reduced:
			if (readyweapon != self || ( !(player.cmd.buttons & BT_ALTATTACK) && !(player.oldbuttons & BT_ALTATTACK) )) {
				spinspeed = Clamp(spinspeed-1, 0, HV_MAXSPINSPEED);
			}
			
			// Handle spin sound (independent of states or weapons):
			if (spinspeed > 0) {
				owner.A_StartSound("weapons/chaingun/spin",CHAN_CHGSPIN,flags:CHANF_LOOPING);
				owner.A_SoundPitch(CHAN_CHGSPIN, LinearMap(spinspeed, 0, HV_MAXSPINSPEED, 0.1,1));
			}
			// If spinspeed is 0, stop the spin sound:
			else {
				owner.A_StopSound(CHAN_CHGSPIN);
			}

			// Now handle the cooling sound and overheat layer.
			// Do this if heat is above 0:
			if (heatStacks > 0) {
				// Modify the cooling sound volume based on
				// the amount of heatstacks:
				double vol = LinearMap(HeatStacks, 0, HV_MAXHEAT, 0, 1);
				vol = Clamp(vol, 0, 1);
				owner.A_SoundVolume(CHAN_CHGCOOL, vol);
			}
			// If heat is 0, remove the heat layer
			// and stop the cooling sound, unlock the gun:
			else {
				owner.A_StopSound(CHAN_CHGCOOL);
				isLocked = false;
			}
		}
		
		// If weapons are not enhanced, or the player is dead, stop the 
		// spin and cooling sounds:
		else {
			heatStacks = 0;
			spinSpeed = 0;
			owner.A_StopSound(CHAN_CHGSPIN);
			owner.A_StopSound(CHAN_CHGCOOL);
			isLocked = false;
		}
		
		//crosshair and bob handling for ADS
		let chg = BD_Chaingun(readyweapon);
		if (chg && bdoom_weapons == BD_WeaponSet.WS_MODERN) {
			if ((InStateSequence(psp.curstate, FindState("ReadySights"))	||	
				InStateSequence(psp.curstate, FindState("FireSights"))) 	){
				chg.crosshair = 99; //if ADS used, disable crosshair and set very little bob
				BobRangeX = 0.12;
				BobRangeY = 0.12;
				BobStyle = 5;
				BobSpeed = 2.5;
			}
			else { 
				chg.crosshair = 0; //if ADS isn't used, set crosshair to default
				/*if (bdoom_weapons == BD_WeaponSet.WS_MODERN) { //and set bob to either default Modern value...
					BobRangeX = 0.2;
					BobRangeY = 0.2;
					BobStyle = 5;
					BobSpeed = 2.0;
				}*/
			}
		}
		else { //... or the default non-Modern value
			tfired = 0;						//set spread value to 0
			RifleSights = false;				//unset ADS
			/*BobRangeX = 1.0;
			BobRangeY = 1.0;
			BobStyle = 0;
			BobSpeed = 1.0;*/
		}
	}
	
	States {
	Spawn:
		MGUN A 1 NoDelay {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN) {
				sprite = GetSpriteIndex("RIFN");
				frame = 25;
				A_SetScale(0.75);
			}
			else {
				sprite = GetSpriteIndex("MGUN");
				frame = 0;
				A_SetScale(1.0);
			}
		}
		loop;
		RIFN Z 1;
	Select:
		TNT1 A 0 { 
			A_StopSound(CHAN_5);			
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Select.Modern");
			If(bdoom_weapons == BD_WeaponSet.WS_ENHANCED) 
				A_StartSound("weapons/chaingun/draw");
			A_WeaponOffset(-48,86);
			return ResolveState(null);
		}
		MGGG CDABCD 1 {
			A_WeaponOffset(8,-9,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		goto ready;
	Deselect:
		TNT1 A 0 { 
			BD_ClearPSprite(PSP_REDDOT);
			A_StopSound(CHAN_5); 
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Deselect.Modern");
			speed = default.speed;
			A_ZoomFactor(1.0);
			return ResolveState(null);
		}
		MGGG A 1 A_Lower();
		wait;
	Ready:
		MGGG A 1 {
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Ready.Modern");
			speed = default.speed;
			A_ZoomFactor(1.0); 
			BD_ClearPSprite(PSP_REDDOT);
			int fflags = 0;
			if (bdoom_weapons == BD_WeaponSet.WS_VANILLA)
				fflags = WRF_NOSECONDARY;
			A_WeaponReady(fflags);
			return ResolveState(null);
		}
		loop;
	Fire:
		MGGG A 1 {
			BD_ClearPSprite(PSP_GUN2);
			if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
				return ResolveState("Fire.Modern");
			A_GunFlash();
			BD_FireBullets(5.6, 0, 1, 5,"weapons/chngun","weapons/chaingun/fire") ;
			return ResolveState(null);
		}
		MGGG B 1;
		TNT1 A 0 SpawnChaingunCasing();
		MGGG CD 1;
		TNT1 A 0 A_CheckReload();
		
		MGGG A 1 {
			A_GunFlash();
			BD_FireBullets(5.6, 0, 1, 5,"weapons/chngun","weapons/chaingun/fire") ;
		}
		MGGG B 1;
		TNT1 A 0 SpawnChaingunCasing();
		MGGG CD 1;
		TNT1 A 0 {
			//jump directly to spinning if AltAttack is pressed as well
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED && (player.cmd.buttons & BT_ATTACK) && (player.cmd.buttons & BT_ALTATTACK)) {
				A_ClearRefire();
				invoker.spintics = HV_MAXSPINTICS;
				invoker.spinspeed = 14;
				invoker.spinframe = 0;
				return ResolveState("AltHold");
			}
			//otherwise do regular refire
			else
				A_ReFire("Fire");
			return ResolveState(null);
		}
		MGGG ABCD 1 {
			A_WeaponReady(WRF_NOSECONDARY);
			//A_WeaponOffset(0.0,-0.75,WOF_ADD);
		}
		MGGG ABCDAABBCCDD 1 A_WeaponReady(WRF_NOSECONDARY);
		goto ready;
	Flash:
		TNT1 A 1 {
			A_Light2();
			if(!invoker.c_muzzle)
				A_Overlay(PSP_EFLASH,"FlashVanilla");
			else {
				DrawMuzzleSmoke((frandom[sfx](-3,3),12), fade: 0.75, sVSpeed: 1.2, sScale: 0.6);
				A_Overlay(PSP_EFLASH,"FlashEnhanced");
				A_Overlay(PSP_MFLASH,"FlashMuzzle");
				if (random(0,1) == 1) 
					A_OverlayFlags(PSP_MFLASH,PSPF_FLIP,true);
			}
			A_OverlayFlags(PSP_EFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayRenderstyle(PSP_EFLASH,STYLE_Add);
			A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
		}
		TNT1 A 1 A_Light1();
		goto lightdone;
	FlashVanilla:
		MGGL AB 1 bright;
		goto lightdone;
	FlashEnhanced:
		MGGM A 1 bright;
		MGGM B 1 bright A_OverlayAlpha(PSP_EFLASH,0.8);
		MGGM C 1 bright A_OverlayAlpha(PSP_EFLASH,0.6);
		MGGM D 1 bright A_OverlayAlpha(PSP_EFLASH,0.4);
		goto lightdone;
	FlashMuzzle:
		MUZ7 A 1 bright {
				A_OverlayOffset(PSP_MFLASH,frandom(-0.5,0.5),frandom(-0.5,0.5));
				let fl = player.FindPSprite(OverlayID());
				fl.frame = random(0,3);
		}
		#### # 1 bright A_OverlayAlpha(PSP_MFLASH,0.8);
		stop;
	FlashHeated:
		MGGH # 1 bright {
			A_OverlayRenderstyle(OverlayID(),Style_ADD);
			A_OverlayFlags(OverlayID(),PSPF_Alpha|PSPF_ForceAlpha,true);
			double alph = invoker.LinearMap(invoker.HeatStacks, HV_MINHEAT, HV_MAXHEAT, 0, 1);
			alph = Clamp(alph, 0, 1);
			A_OverlayAlpha(OverlayID(), alph);
			
			if (invoker.heatStacks <= HV_MINHEAT)
				return ResolveState("Null");
			
			let psp = Player.FindPSprite(PSP_GUN2);
			let heat = Player.FindPSprite(OverlayID());
			if (psp && heat)
				heat.frame = psp.frame;
			
			return ResolveState(null);
		}
		loop;
	SpinningBarrels:
		MGGG # 4 {
			if (bdoom_weapons != BD_WeaponSet.WS_ENHANCED || !player.readyweapon || player.readyweapon != invoker)
				return ResolveState("Null");
				
			// Decide if we need to go 1 or 2 frames forward
			// (go 2 frames if speed is high enough):
			int i = invoker.spinframe;
			i = invoker.spinspeed > HV_HIGHSPINSPEED ? i+2 : i+1;
			// If spinframe is above 3 (D), reset it back to 0 (A):
			invoker.spinframe = i > 3 ? 0 : i;

			// set spin frame duration based on spin speed:
			int stics = invoker.LinearMap(invoker.spinspeed, HV_MAXSPINSPEED, 0, 1, HV_MAXSPINTICS);
			invoker.spintics = Clamp(stics, 1, HV_MAXSPINTICS);
			
			// Now modify the current PSprite frame so it's equal to 
			// the value of spinframe, and its duration equal to
			// spintics:
			let psp = Player.FindPSprite(OverlayID());
			if (psp) {
				psp.frame = invoker.spinframe;
				psp.tics = invoker.spintics;
			}
			A_SpinningFire();
			return ResolveState(null);
		}
		loop;
	AltFire:
		TNT1 A 1 {
			// Double-check the weapons are set to Enhanced:
			if (bdoom_weapons != BD_WeaponSet.WS_ENHANCED) {
				invoker.isLocked = false;
				invoker.spinspeed = 0;
				return ResolveState("Ready");
			}
			
			A_Overlay(PSP_GUN2, "SpinningBarrels", noOverride: true);
			if (invoker.heatstacks >= HV_MINHEAT)
				A_Overlay(PSP_HEAT, "FlashHeated", true);
		
			// If the player isn't pressing and isn't holding
			// AltFire, go back to ready:
			if (!(player.cmd.buttons & BT_ALTATTACK) && !(player.oldbuttons & BT_ALTATTACK)) {
				// reduce spinspeed while not holding fire:
				//invoker.spinspeed = Clamp(invoker.spinspeed-0.5, 0, HV_MAXSPINSPEED);
				
				if (invoker.spinspeed <= 0)
				{
					BD_ClearPSprite(PSP_GUN2);
					A_StopSound(CHAN_CHGSPIN);
					return ResolveState("Ready");
				}
				else if (invoker.spinspeed <= HV_MEDSPINSPEED)
				{
					A_WeaponReady(WRF_NOSECONDARY|WRF_NOBOB);
				}
			}
			
			// Otherwise increase spin speed:
			else {
				invoker.spinspeed = Clamp(invoker.spinspeed+0.7, 0, HV_MAXSPINSPEED);
			}
			
			// And continue the loop:
			return ResolveState(null);	
		}
		wait;
	AltFlash:
		TNT1 A 1 {
			A_Light2();
			if(!invoker.c_muzzle)
				A_Overlay(PSP_EFLASH,"AltFlashVanilla");
			else {
				DrawMuzzleSmoke((frandom[sfx](-3,3),12), sAlpha: 0.5, fade: 0.8, sVSpeed: 1.4, sScale: 0.85);
				A_Overlay(PSP_EFLASH,"AltFlashEnhanced");
				A_Overlay(PSP_MFLASH,"AltFlashMuzzle");
				if (random(0,1) == 1) 
					A_OverlayFlags(PSP_MFLASH,PSPF_FLIP,true);
			}
			A_OverlayFlags(PSP_EFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayRenderstyle(PSP_EFLASH,STYLE_Add);
			A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
		}
		TNT1 A 1 A_Light1();
		goto lightdone;
	AltFlashVanilla:
		MGGL AC 1 bright;
		goto lightdone;
	AltFlashEnhanced:
		MGGM A 1 bright;
		MGGM C 1 bright A_OverlayAlpha(PSP_EFLASH,0.6);
		goto lightdone;
	AltFlashMuzzle:
		MUZ7 A 1 bright {
				A_OverlayOffset(PSP_MFLASH,frandom(-0.5,0.5),frandom(-0.5,0.5));
				let fl = player.FindPSprite(OverlayID());
				fl.frame = random(0,3);
			}
		#### # 1 bright A_OverlayAlpha(PSP_MFLASH,0.25);
		stop;

	//MODERN
	Select.Modern:
		TNT1 A 0 {
			A_StartSound("MWeapons/rifle/select");
			A_Weaponoffset(30.0,67.0);
			BD_SetSprite("RIFN","QIFN");
		}
		#### AAAAAAA 1 {
			A_WeaponOffset(-4.0,-5.0,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		goto ready;
	Deselect.Modern:
		TNT1 A 0 { 
			if (!invoker.RifleSights)
				return ResolveState("Deselect1.Modern");
			speed = default.speed;
			A_ZoomFactor(1.0);
			BD_SetSprite("RIFA","QIFA");
			return ResolveState(null);
		}
		#### CBA 1;
	Deselect1.Modern:
		TNT1 A 0 BD_SetSprite("RIFN","QIFN");
		#### A 1 A_Lower(12);
		wait;
	Ready.Modern:
		RIFN A 1 {
			if (invoker.riflesights)
				return ResolveState("ReadySights");				
			BD_SetSprite("RIFN","QIFN");
			if (!A_CheckAmmo()) {
				let psp = player.FindPsprite(PSP_WEAPON);
				if (psp)
					psp.frame = 4;
			}
			BD_WeaponReady(false);
			if ((player.cmd.buttons & BT_ALTATTACK) && !(player.oldbuttons & BT_ALTATTACK))
				return ResolveState("AltFire.Modern");
			return ResolveState(null);
		}
		goto ready;
	ReadySights:
		RIFS A 1 {
			BD_WeaponReady(false,true,false);
			if ((player.cmd.buttons & BT_ALTATTACK) && !(player.oldbuttons & BT_ALTATTACK))
				return ResolveState("AltFire.Modern");
			speed = default.speed * 0.8;
			A_Overlay(PSP_REDDOT,"Reddot");
			A_OverlayFlags(PSP_REDDOT,PSPF_ADDWEAPON|PSPF_ADDBOB,false);
			A_OverlayFlags(PSP_REDDOT,PSPF_RENDERSTYLE,true);
			A_OverlayRenderstyle(PSP_REDDOT,STYLE_Add);
			A_ZoomFactor(1.3);
			return ResolveState(null);
		}
		goto ready;	
	Fire.Modern:
		TNT1 A 0 {
			BD_SetSprite("RIFN","QIFN");
			if (!A_CheckAmmo())
				return ResolveState("DryReload");
			if (invoker.riflesights)
				return ResolveState("FireSights");
			return ResolveState(null);
		}
		#### A 1 {				
			A_GunFlash("FlashModern");
			A_StartSound("Mweapons/rifle/fire");
			A_WeaponOffset(frandom(-0.3,0.3),2,WOF_ADD);
			BD_FireModernBullet("BD_RifleBullet", 1.5 + (invoker.tfired * 0.15),1.0 + (invoker.tfired * 0.15));
			//A_FireBullets(1.5 + (invoker.tfired * 0.15),1.0 + (invoker.tfired * 0.15),-1,0,"BD_NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_RifleBullet",0,0);
			BD_SetPitch(pitch - frandom(0.37,0.42),SPF_INTERPOLATE);
			A_ZoomFactor(0.996,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
			invoker.tfired = clamp(invoker.tfired+1,0,9);
		}
		#### B 1 {
			A_WeaponOffset(frandom(-0.3,0.3),4,WOF_ADD);
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		}		
		#### CD 1 A_WeaponOffset(0,-3,WOF_ADD);
		#### A 0 {
			SpawnRifleCasing();
			A_ReFire("Fire.Modern");
			if (!A_CheckAmmo()) {
				let s = Player.FindPsprite(PSP_Weapon);
				if (s)
					s.frame = 3;
			}
		}
		#### # 1 {
			A_WeaponOffset(0,32.0,WOF_INTERPOLATE);
			invoker.tfired = 0;
		}
		#### # 2 A_WeaponReady();
		goto ready;
	FireSights:
		RIFS A 1 {
			let plr = PlayerPawn(self);
			plr.AttackZOffset = 13.5;
			BD_FireModernBullet("BD_RifleBullet", 0.4,0.15);
			//A_FireBullets(0.4,0.15,-1,0,"BD_NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_RifleBullet",0,0);
			A_GunFlash("FlashModern");
			A_StartSound("Mweapons/rifle/fire");
			BD_SetPitch(pitch - 0.3,SPF_INTERPOLATE);
			A_ZoomFactor(1.29,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		}
		#### B 1 {
			A_WeaponOffset(frandom(-1.5,1.5),5,WOF_ADD);
			A_ZoomFactor(1.3,ZOOM_NOSCALETURNING);
			SpawnRifleCasing();
		}
		#### CB 1 A_WeaponOffset(0,-2.5,WOF_ADD);
		#### # 0 {
			A_WeaponOffset(0,32,WOF_INTERPOLATE);
			let plr = PlayerPawn(self);
			plr.AttackZOffset = plr.default.AttackZOffset;
			if (!A_CheckAmmo())
				return ResolveState("DryReload");
			return ResolveState(null);
		}
		#### A 1 {
			let plr = PlayerPawn(self);
			plr.AttackZOffset = 13.5;
			BD_FireModernBullet("BD_RifleBullet", 0.4,0.15);
			//A_FireBullets(0.4,0.15,-1,0,"BD_NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_RifleBullet",0,0);
			A_GunFlash("FlashModern");
			A_StartSound("Mweapons/rifle/fire");
			BD_SetPitch(pitch - 0.3,SPF_INTERPOLATE);
			A_ZoomFactor(1.29,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		}
		#### B 1 {
			A_WeaponOffset(frandom(-1.5,1.5),5,WOF_ADD);
			A_ZoomFactor(1.3,ZOOM_NOSCALETURNING);
			SpawnRifleCasing();
		}
		#### CB 1 A_WeaponOffset(0,-2.5,WOF_ADD);
		#### # 0 {
			A_WeaponOffset(0,32,WOF_INTERPOLATE);
			let plr = PlayerPawn(self);
			plr.AttackZOffset = plr.default.AttackZOffset;
			if (!A_CheckAmmo())
				return ResolveState("DryReload");
			return ResolveState(null);
		}
		#### A 1 {
			let plr = PlayerPawn(self);
			plr.AttackZOffset = 13.5;
			BD_FireModernBullet("BD_RifleBullet", 0.4,0.15);
			//A_FireBullets(0.4,0.15,-1,0,"BD_NullPuff",FBF_USEAMMO|FBF_NORANDOMPUFFZ,0,"BD_RifleBullet",0,0);
			A_GunFlash("FlashModern");
			A_StartSound("Mweapons/rifle/fire");
			BD_SetPitch(pitch - 0.3,SPF_INTERPOLATE);
			A_ZoomFactor(1.29,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		}
		#### B 1 {
			A_WeaponOffset(frandom(-1.5,1.5),5,WOF_ADD);
			A_ZoomFactor(1.3,ZOOM_NOSCALETURNING);
			SpawnRifleCasing();
		}
		#### CB 1 A_WeaponOffset(0,-2.5,WOF_ADD);
		#### A 3 {				
			A_WeaponOffset(0,32,WOF_INTERPOLATE);
			let plr = PlayerPawn(self);
			plr.AttackZOffset = plr.default.AttackZOffset;
			A_WeaponReady(WRF_NOFIRE);
			if (!A_CheckAmmo())
				return ResolveState("Reload");
			return ResolveState(null);
		}
		goto ready;
	DryReload:
		RIFN A 0 {
			if (invoker.RifleSights) {
				let psp = player.FindPSprite(PSP_Weapon);
				if (psp) 
					psp.sprite = GetSpriteIndex("RIFS");
			}
			else
				BD_SetSprite("RIFN","QIFN");
		}
		goto super::DryReload;
	Reload:
		RIFA A 0 { 
			A_ClearRefire();
			BD_ClearPsprite(PSP_REDDOT);
			if (!A_CheckAmmo())
				invoker.wasempty = true;
			if (!invoker.RifleSights)
				Return ResolveState("ReloadDo");
			else {
				invoker.RifleSights = false;
				speed = default.speed;
				A_ZoomFactor(1.0);
			}
			BD_SetSprite("RIFA","QIFA");
			return ResolveState(null);
		}
		#### CBA 1;
	ReloadDo:
		TNT1 A 0 BD_SetSprite("RIFR","QIFR");
		#### ABCDE 2;
		#### F 8 A_StartSound("Mweapons/rifle/clipout");
		#### GH 2;
		#### I 5;
		#### JKL 2;
		#### M 1 A_StartSound("Mweapons/rifle/clipin");
		#### MMM 1 A_WeaponOffset(1,0,WOF_ADD);
		#### M 1 A_WeaponOffset(-1,0,WOF_ADD);
		#### A 0 {
			if (!invoker.wasempty)
				BD_Reload();
		}
		#### LN 2;
		TNT1 A 0 { 
			if (!invoker.wasempty)
				return ResolveState("ReloadEnd");
			BD_SetSprite("RIFB","QIFB");
			return ResolveState(null);
		}			
		#### ABC 1;
		#### DEF 2;
		#### A 0 A_StartSound("Mweapons/rifle/bolt");
		#### GHIJ 1;
		#### IHG 3;
		#### A 0 BD_Reload();
		#### FED 2;
		#### CBA 1;
	ReloadEnd:
		TNT1 A 0 {
			invoker.wasempty = false;
			BD_SetSprite("RIFR","QIFR");
		}
		#### OEDCBA 2;
		goto ready;
	AltFire.Modern:
		TNT1 A 0 { 
			A_ClearRefire();
			if (invoker.RifleSights)
				return ResolveState("UnsetSights");
			invoker.RifleSights = true; 
			A_StartSound("Mweapons/rifle/aim",slot:CHAN_7);
			speed = default.speed * 0.8;
			A_ZoomFactor(1.3);
			BD_SetSprite("RIFA","QIFA");
			return ResolveState(null);
		}
		#### ABCD 1;
		goto ReadySights;
	UnsetSights:
		TNT1 A 0 { 
			BD_ClearPSprite(PSP_REDDOT);
			invoker.RifleSights = false;
			A_StartSound("Mweapons/rifle/unaim",slot:CHAN_7);
			speed = default.speed;
			A_ZoomFactor(1.0);
			BD_SetSprite("RIFA","QIFA");
		}
		#### DCBA 1;
		goto Ready;
	Reddot:
		RIFO A 18 bright;
		stop;
	FlashModern:
		TNT1 A 1 {
			A_Light2();
			if (invoker.riflesights)
				A_Overlay(PSP_EFLASH,"FlashModernSights");
			else
				A_Overlay(PSP_EFLASH,"FlashModernHighlights");
			
			if (invoker.c_muzzle) {
				for (int i = random (2,3); i > 0; i --) {
					if (invoker.riflesights)
						DrawMuzzleSmoke((0,0), sAlpha: 0.15, fade: 0.75, sVSpeed: 1.04, sScale: 0.9);
					else
						DrawMuzzleSmoke((0,5), sAlpha: 0.35, fade: 0.7, sVSpeed: 1.07, sScale: 0.5);
				}
				A_Overlay(PSP_MFLASH,"FlashModernMuzzle");
				if (invoker.riflesights)
					A_OverlayOffset(PSP_MFLASH,0,27);
				else
					A_OverlayOffset(PSP_MFLASH,0,30);
				A_OverlayFlags(PSP_MFLASH,PSPF_ADDWEAPON,false);
			}
					
			A_OverlayFlags(PSP_EFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
			A_OverlayRenderstyle(PSP_EFLASH,STYLE_Add);
			A_OverlayRenderstyle(PSP_MFLASH,STYLE_Add);
		}
		TNT1 A 1 A_Light1();
		goto lightdone;
		RIFM ABCD 0;
	FlashModernHighlights:
		RIFL AB 1 bright {
			if (invoker.c_muzzle) {
				let fl = player.FindPSprite(OverlayID());
				if (fl) fl.sprite = GetSpriteIndex("RIFM");
			}
		}				
		stop;
	FlashModernSights:
		RIFL CD 1 bright {
			if (invoker.c_muzzle) {
				let fl = player.FindPSprite(OverlayID());
				if (fl) fl.sprite = GetSpriteIndex("RIFM");
			}
		}
		stop;
	FlashModernMuzzle:
		MUZ5 A 1 bright {
			let fl = player.FindPSprite(OverlayID());
			if (fl) {
				if (invoker.riflesights)
					fl.sprite = GetSpriteIndex("MUZ6");
				fl.frame = random(0,5);
			}
		}
		#### # 1 bright A_OverlayAlpha(OverlayID(),0.8);
		stop;
	}
}

Class BD_RifleClip : ammo {
	Default {
		inventory.icon "HMAGZ0";
		inventory.amount 1;
		inventory.maxamount 40;
		ammo.backpackamount 0;
		ammo.backpackmaxamount 40;
		+INVENTORY.IGNORESKILL
	}
}