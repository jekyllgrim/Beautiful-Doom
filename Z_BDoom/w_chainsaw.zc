Class BD_Chainsaw : BDoomWeapon {
	actor lastvictim;
	int jamstacks; //chance to jam
	bool hittarget; //did it hit target?
	protected bool started; //is it on?
	protected int sndcounter; //at >75 produces higher-pitched sound
	protected state parry;
	
	double tbloodR;
	double tbloodG;
	double tbloodB;
	uint tbloodtranslation;
		
	Default	{
		Weapon.Kickback 0;
		Weapon.SelectionOrder 220;
		weapon.readysound "";
		weapon.upsound "";
		inventory.pickupsound "weapons/chainsaw/draw";
		Inventory.PickupMessage "$GOTCHAINSAW";
		Obituary "$OB_MPCHAINSAW";
		Tag "$TAG_CHAINSAW";
		weapon.slotnumber 1;
		weapon.slotpriority 1;
		+WEAPON.MELEEWEAPON
		+WEAPON.AXEBLOOD
		inventory.icon "CSAWA0";
	}
		
	override void DoEffect() {
		if (owner) {
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN && !owner.bKILLEd) { 
				bNOALERT = true;
				//bNOAUTOFIRE = true;
				if (jamstacks > 4 && owner.player.readyweapon == self) {
					let blod = Owner.player.FindPSprite (PSP_CHAINBLOOD);
					if (!blod) {
						blod = Owner.player.GetPSprite (PSP_CHAINBLOOD);
						if (blod) {
							blod.Caller = self;
							blod.SetState (ResolveState ("BloodOverlay"));
						}
					}
				}
				else
					BD_ClearPsprite(PSP_CHAINBLOOD,PSP_CHAINBLOODR,PSP_CHAINBLOODG,PSP_CHAINBLOODB);
			}
			else { 
				bNOALERT = false;
				//bNOAUTOFIRE = false;
				BD_ClearPsprite(PSP_CHAINBLOOD,PSP_CHAINBLOODR,PSP_CHAINBLOODG,PSP_CHAINBLOODB);
			}
			//Console.Printf("jamstacks "..jamstacks);
		}
		Super.DoEffect();
	}	

	states	{
		Spawn:
			CSAW A -1;
			Stop;
		Select:
			TNT1 A 0 {
				BD_SetSprite("BSAW","QSAW");
				If(bdoom_weapons == BD_WeaponSet.WS_MODERN)
					return ResolveState("Select.Modern");
				if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
					A_StartSound("weapons/chainsaw/draw");
				else
					A_StartSound("weapons/sawup",slot:CHAN_5);
				A_WeaponOffset(12,62);
				return ResolveState(null);
			}
			#### FEDCBA 1 {
				A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
				A_WeaponOffset(-2,-5,WOF_ADD);
			}
			goto ready;
		Deselect:
			#### A 0 {
				BD_SetSprite("BSAW","QSAW");
				A_ClearRefire();
				A_Stopsound(CHAN_BODY);
				A_Stopsound(CHAN_5);
				if(bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
					return ResolveState("Deselect.Enhanced");
				If(bdoom_weapons ==2)
					return ResolveState("Deselect.Modern");
				invoker.jamstacks = 0;
				invoker.started = false;
				invoker.sndcounter = 0;
				return ResolveState(null);
			}
			#### G 1 A_Lower();
			wait;
		Ready:
			TNT1 A 0 {
				BD_SetSprite("BSAW","QSAW");
				If(bdoom_weapons ==2)
					return ResolveState("Ready.Modern");
				invoker.jamstacks = 0;
				invoker.started = false;
				invoker.sndcounter = 0;
				if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
					A_StartSound("weapons/chainsaw/idle",slot:CHAN_5);
				else
					A_StartSound("weapons/sawidle",slot:CHAN_5);
				return ResolveState(null);
			}
			#### GHIJ 2 {
				if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
					A_WeaponReady();
				else
					A_WeaponReady(WRF_NOSECONDARY);
			}
			#### A 0 {
				if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
					A_StartSound("weapons/chainsaw/idle",slot:CHAN_5);
				else
					A_StartSound("weapons/sawidle",slot:CHAN_5);
				return ResolveState(null);
			}
			#### JIIHHG 1 {
				if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
					A_WeaponReady();
				else
					A_WeaponReady(WRF_NOSECONDARY);
			}
			#### A 0 {
				if (/*bdoom_debris && */random(0,1) == 1) {
					DrawMuzzleSmoke((64, 72), sAlpha: 0.2, sVSpeed: 1.35, sScale: 0.85);
				}
			}
			loop;
		Fire: //should be 8 tics with no refire frames
			#### A 0 {
				If(bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
					return ResolveState("Fire.Enhanced");
				If(bdoom_weapons == BD_WeaponSet.WS_MODERN)
					return ResolveState("Fire.Modern");
			//fake chargeup, attack begins to coincide with vanilla speed
				A_Saw("","weapons/sawhit",2,"BD_ChainsawPuff") ;
				return ResolveState(null);
			}
			#### KLMN 1;
			#### A 0 {
				A_StartSound("weapons/sawfull",slot:CHAN_BODY,flags:CHANF_DEFAULT|CHANF_LOOPING);
				A_Saw("","weapons/sawhit",2,"BD_ChainsawPuff");
			}
			#### NOPQ 1 A_WeaponOffset(frandom(-1,1),frandom(32,33),WOF_INTERPOLATE);
			#### A 0 A_Refire();
			#### A 0 A_Stopsound(CHAN_BODY);
			#### MLK 1 A_WeaponReady(WRF_NOSECONDARY);
			goto ready;
		Hold:
			#### A 0 A_Saw("","weapons/sawhit",2,"BD_ChainsawPuff");
			#### NOPQ 1 A_WeaponOffset(frandom(-1,1),frandom(32,33),WOF_INTERPOLATE);
			#### A 0 A_Saw("","weapons/sawhit",2,"BD_ChainsawPuff");
			#### NOPQ 1 A_WeaponOffset(frandom(-1,1),frandom(32,33),WOF_INTERPOLATE);
			#### A 0 A_Refire();
			#### A 0 A_Stopsound(CHAN_BODY);
			#### MLK 1 A_WeaponReady(WRF_NOSECONDARY);
			goto ready;

	//// ENHANCED
		Deselect.Enhanced:
			TNT1 A 0 BD_SetSprite("BSAW","QSAW");
			#### G 1 A_Lower(12);
			wait;
		Fire.Enhanced:
			#### A 0 A_StartSound("weapons/chainsaw/start",slot:CHAN_BODY);
			#### KLM 1;
			#### A 0 {
				A_StartSound("weapons/chainsaw/loop",slot:CHAN_BODY,flags:CHANF_DEFAULT|CHANF_LOOPING);
				A_CustomPunch(2*random(1,10),1,CPF_NOTURN ,"BD_ChainsawPuff");
			}
		Hold.Enhanced:
			#### NOPQ 1 A_WeaponOffset(frandom(-1,1),frandom(32,33),WOF_INTERPOLATE);
			#### A 0 {
				A_StartSound("weapons/chainsaw/loop",slot:CHAN_BODY,flags:CHANF_DEFAULT|CHANF_LOOPING);
				A_CustomPunch(2*random(1,10),1,CPF_NOTURN ,"BD_ChainsawPuff");
			}
			#### A 0 A_Refire("Hold.Enhanced");
			#### A 0 A_StartSound("weapons/chainsaw/stop",slot:CHAN_BODY);
			#### MLK 1 A_WeaponReady(WRF_NOSECONDARY);
			goto ready;			

	/////////// MODERN

		Select.Modern:
			#### A 0 {
				A_StartSound("Mweapons/saw/select");
				A_WeaponOffset(-35.0,74.0);
			}
			#### GGGGGG 1 {
				A_WeaponOffset(5.0,-6.0,WOF_ADD);
				A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			}
			goto ready;
		Deselect.Modern:
			#### A 0 {
				BD_SetSprite("BSAW","QSAW");
				A_ClearRefire();
				invoker.started = false;
				invoker.sndcounter = 0;
				A_Stopsound(CHAN_BODY);
				A_Stopsound(CHAN_5);
			}
			#### G 1 A_Lower(12);
			wait;

		Ready.Modern:
			#### G 1 {
				If(invoker.started == true)
					return ResolveState("ReadyOn");
				A_WeaponReady();
				return ResolveState(null);
			}
			goto ready;
		ReadyOn:
			#### A 0 {
				A_StartSound("Mweapons/saw/ready",slot:CHAN_5,flags:CHANF_DEFAULT|CHANF_LOOPING);
				A_AlertMonsters(312);
				if (random(0,32) < invoker.jamstacks) {
					let blod = A_Eject("BD_ChainsawBloodSpill",20,frandom(1,1.2),frandom(4.5,6.5));
					if (blod) {
						blod.translation = invoker.tbloodtranslation;
						blod.CopyBloodColor(invoker);
					}
				}
			}
			#### GHIJIH 2 A_WeaponReady();
			#### A 0 {
				DrawMuzzleSmoke((64, 72), sAlpha: 0.2, sVSpeed: 1.35, sScale: 0.85);
				invoker.jamstacks = clamp(invoker.jamstacks-1,0,1024);
			}
			goto ready;
		AltFire:
			#### A 0 {
				if(invoker.started == false)
					return ResolveState("Fire.Modern");
				return ResolveState(null);
			}
			#### RSTU 1;
		AltFireDo.Modern:
			TNT1 A 0 A_StartSound("Mweapons/saw/start",slot:CHAN_BODY);
			BSAW VXVXVWXYV 1  {
				if (invoker.jamstacks > 0) {
					let blod = A_Eject("BD_ChainsawBloodSpray",12,2,5,frandom(4,5),frandom(-0.5,0.5),frandom(3,5));
					if (blod) {
						blod.target = null;
						blod.translation = invoker.tbloodtranslation;						
						blod.CopyBloodColor(invoker);
					}
				}						
			}
			TNT1 A 0 {
				A_StartSound("Mweapons/saw/stop",slot:CHAN_BODY);
				invoker.jamstacks = clamp(invoker.jamstacks-8,0,1024);
			}
			BSAW VVVVVVVVV 1 {
				A_WeaponReady(WRF_NOFIRE); //allow switching
				//if altfire is pressed again (but NOT held), rev the blade once more, without lower saw
				if ((player.cmd.buttons & BT_ALTATTACK) && !(player.oldbuttons & BT_ALTATTACK))
					return ResolveState("AltFireDo.Modern");
				return ResolveState(null);
			}
			BSAW VVVVVVVVV 1 {
				A_WeaponReady(WRF_NOSECONDARY); //allow switching and primary attack
				//if altfire is pressed again (but NOT held), rev the blade once more, without lower saw
				if ((player.cmd.buttons & BT_ALTATTACK) && !(player.oldbuttons & BT_ALTATTACK))
					return ResolveState("AltFireDo.Modern");
				return ResolveState(null);
			}
			#### A 0 BD_SetSprite("BSAW","QSAW");
			#### UTSR 1 A_WeaponReady(WRF_NOSECONDARY);
			goto ready;	

		Fire.Modern:
			#### A 0 {
				BD_SetSprite("BSAW","QSAW");
				if (invoker.started == true)
					return ResolveState("Attack");
				A_StartSound("Mweapons/saw/cock");
				A_AlertMonsters(312);
				return ResolveState(null);
			}			
			#### ABCDEF 1;
			#### EDCBA 2;
			#### G 2 {
				if (random(0,128) > invoker.jamstacks) {
					invoker.started = true;
					return ResolveState("ReadyOn");
				}
				invoker.jamstacks = clamp(invoker.jamstacks - 8,0,1024); 		
				if ((player.cmd.buttons & BT_ATTACK) && !(player.oldbuttons & BT_ATTACK))
					return ResolveState("Fire.Modern");
				return ResolveState(null);
			}
			goto ready;		
		Attack:	
			#### A 0 {
				A_Stopsound(CHAN_5);
				A_StartSound("Mweapons/saw/start",slot:CHAN_BODY);
			}
			#### KLM 2;
		Hold.Modern:
			TNT1 A 2 {
				if(invoker.sndcounter < 75)
					A_StartSound("Mweapons/saw/loop",slot:CHAN_BODY,flags:CHANF_DEFAULT|CHANF_LOOPING);
				else
					A_StartSound("Mweapons/saw/highloop",slot:CHAN_BODY,flags:CHANF_DEFAULT|CHANF_LOOPING);
				A_AlertMonsters();
				A_CustomPunch(6*random(1,4),1,CPF_NOTURN,"BD_ModernsawPuff");
				invoker.sndcounter++;
				A_SetAngle(angle + frandom(invoker.jamstacks * -0.01,invoker.jamstacks * 0.01));
				BD_SetPitch(Pitch + frandom(invoker.jamstacks * -0.01,invoker.jamstacks * 0.01));
				//draw the actual attack frames on overlay because 
				A_Overlay(PSP_GUN2,"HoldDo.Modern",nooverride:true);
			}
			TNT1 A 0 {
				if (invoker.jamstacks >= 28 && invoker.hittarget == true && random(0,256) <= invoker.jamstacks / 10) {
					BD_ClearPsprite(PSP_GUN2);
					return ResolveState("Jam");
				}
				invoker.hittarget = false;
				return ResolveState(null);
			}
			TNT1 A 0 A_Refire("Hold.Modern");
			goto AttackEnd;
		HoldDo.Modern:
			#### # 0 BD_SetSprite("BSAW","QSAW");
			#### NOPQ 1 A_WeaponOffset(
				frandom(-0.3 + invoker.jamstacks * -0.01, 0.3 + invoker.jamstacks * 0.01),
				frandom(32,32.8 + invoker.jamstacks * 0.01), 
				WOF_INTERPOLATE
			);
			loop;
		AttackEnd:	
			#### A 0 {
				BD_SetSprite("BSAW","QSAW");
				BD_ClearPsprite(PSP_GUN2);
				invoker.sndcounter = 0;
				A_StartSound("Mweapons/saw/stop",slot:CHAN_BODY);
			}
			#### MLKG 2;
			goto ready;
		Jam:
			TNT1 A 0 {
				BD_SetSprite("BSAW","QSAW");
				A_StartSound("Mweapons/saw/stuck",slot:CHAN_BODY,flags:CHANF_DEFAULT,volume:0.5);
				invoker.started = false;
				invoker.sndcounter = 0;
				invoker.hittarget = false;
				A_ClearRefire();
			}
			#### RSTU 1;
			BSAW VVVV 1 A_WeaponOffset(random(-1,1),random(32,33),WOF_INTERPOLATE);
			BSAW V 9;
			TNT1 A 0 BD_SetSprite("BSAW","QSAW");
			#### UTSRA 2;
			goto ready;
		BloodOverlay:
			#### # 1 {
				int stacks = invoker.jamstacks;
				if (stacks <= 4) {
					BD_ClearPsprite(PSP_CHAINBLOODR,PSP_CHAINBLOODG,PSP_CHAINBLOODB);
					return ResolveState(null);
				}
				let blod = player.FindPSprite(OverlayID());
				let psp = player.FindPSprite(PSP_Weapon);
				let atk = player.FindPSprite(PSP_GUN2);
				int blodframe = 0;
				if (psp && blod) {
					if (atk)
						blodframe = atk.frame;
					else
						blodframe = psp.frame;
					if (stacks >  4 && stacks < 30)
						blod.sprite = GetSpriteIndex("BXR1");
					else if (stacks >= 30 && stacks < 52)
						blod.sprite = GetSpriteIndex("BXR2");
					else if (stacks >= 52 && stacks < 64)
						blod.sprite = GetSpriteIndex("BXR3");
					else if (stacks >= 64)
						blod.sprite = GetSpriteIndex("BXR4");
					blod.frame = blodframe;
					//console.printf("blood frame: %d",blodframe);
					blod.translation = invoker.tbloodtranslation;
				}
				// Stuff below is no longer needed since overlay translation is now a thing
				
				//Console.Printf("blood Red: %i, Green: %i, Blue: %i",invoker.tbloodR,invoker.tbloodG,invoker.tbloodB);
				/*if (invoker.tbloodR > 0) {
					A_Overlay(PSP_CHAINBLOODR,"BloodOverlayR");					
					A_OverlayFlags(PSP_CHAINBLOODR,PSPF_Renderstyle|PSPF_Alpha|PSPF_ForceAlpha,true);
					A_OverlayRenderstyle(PSP_CHAINBLOODR,Style_ADD);
					A_OverlayAlpha(PSP_CHAINBLOODR,invoker.tbloodR);
					let blodR = player.FindPSprite(PSP_CHAINBLOODR);
					if (psp && blodR) {
						if (stacks >  4 && stacks < 30)
							blodR.sprite = GetSpriteIndex("BXR1");
						else if (stacks >= 30 && stacks < 52)
							blodR.sprite = GetSpriteIndex("BXR2");
						else if (stacks >= 52 && stacks < 64)
							blodR.sprite = GetSpriteIndex("BXR3");
						else if (stacks >= 64)
							blodR.sprite = GetSpriteIndex("BXR4");
						blodR.frame = blodframe;
					}
				}
				else
					BD_ClearPsprite(PSP_CHAINBLOODR);
				if (invoker.tbloodG > 0) {
					A_Overlay(PSP_CHAINBLOODG,"BloodOverlayG");					
					A_OverlayFlags(PSP_CHAINBLOODG,PSPF_Renderstyle|PSPF_Alpha|PSPF_ForceAlpha,true);
					A_OverlayRenderstyle(PSP_CHAINBLOODG,Style_ADD);
					A_OverlayAlpha(PSP_CHAINBLOODG,invoker.tbloodG);
					let blodG = player.FindPSprite(PSP_CHAINBLOODG);
					if (psp && blodG) {
						if (stacks >  4 && stacks < 30)
							blodG.sprite = GetSpriteIndex("BXG1");
						else if (stacks >= 30 && stacks < 52)
							blodG.sprite = GetSpriteIndex("BXG2");
						else if (stacks >= 52 && stacks < 64)
							blodG.sprite = GetSpriteIndex("BXG3");
						else if (stacks >= 64)
							blodG.sprite = GetSpriteIndex("BXG4");
						blodG.frame = blodframe;
					}
				}
				else
					BD_ClearPsprite(PSP_CHAINBLOODG);
				if (invoker.tbloodB > 0) {
					A_Overlay(PSP_CHAINBLOODB,"BloodOverlayB");					
					A_OverlayFlags(PSP_CHAINBLOODB,PSPF_Renderstyle|PSPF_Alpha|PSPF_ForceAlpha,true);
					A_OverlayRenderstyle(PSP_CHAINBLOODB,Style_ADD);
					A_OverlayAlpha(PSP_CHAINBLOODB,invoker.tbloodB);
					let blodB = player.FindPSprite(PSP_CHAINBLOODB);
					if (psp && blodB) {
						if (stacks >  4 && stacks < 30)
							blodB.sprite = GetSpriteIndex("BXB1");
						else if (stacks >= 30 && stacks < 52)
							blodB.sprite = GetSpriteIndex("BXB2");
						else if (stacks >= 52 && stacks < 64)
							blodB.sprite = GetSpriteIndex("BXB3");
						else if (stacks >= 64)
							blodB.sprite = GetSpriteIndex("BXB4");
						blodB.frame = blodframe;
					}
				}
				else
					BD_ClearPsprite(PSP_CHAINBLOODB);*/
				
				return ResolveState(null);
			}
			loop;			
		BloodOverlayColor:
			#### # 1;
			loop;	
		BloodOverlayR:
			#### # 1;
			loop;	
		BloodOverlayG:
			#### # 1;
			loop;	
		BloodOverlayB:
			#### # 1;
			loop;
		Loadsprites:
			BXZ1 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXZ2 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXZ3 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXZ4 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXR1 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXR2 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXR3 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXR4 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXG1 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXG2 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXG3 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXG4 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXB1 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXB2 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXB3 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			BXB4 ABCDEFGHIJKLMNOPQRSTUVWXY 0;
			stop;
	}
}

Class BD_ChainsawPuff : BDoomPuff {
	Default {
		+PUFFONACTORS
		Damagetype "Saw";
		scale 0.15;
		alpha 0.6;
		decal "Sawmark";
		renderstyle "Add";
		alpha 0.5;
	}
	states {
		Crash:
			TNT1 A 0 {
				If (bdoom_debris) {
					for (int i = 5; i > 0; i--)
						A_SpawnItemEx("BD_WallPart",0,0,0,	frandom(-3,3),frandom(-3,3),frandom(5,10),	0,0,64);
					A_SpawnItemEx("BD_WallSmoke",0,0,0,0,0,frandom(0.2,0.5));
				}
				if (random(1,100) <= 70) {
					if (bdoom_sparks)
						A_StartSound("weapons/chainsaw/hitwall");
					for (int i = 15; i > 0; i--)
						A_SpawnItemEx("BD_RicochetSpark",0,0,0,	frandom(-2,2),frandom(-2,2),frandom(5,10),failchance:160);
				}
			}
			CPUF GHIJ 1 bright;
			stop;
	}
}

Class BD_ModernsawPuff : BD_ChainsawPuff {
	Default {
		+HITTRACER
		+PUFFONACTORS
		+PUFFGETSOWNER
	}
	states {
	Melee:
		TNT1 A 1 {
			let csaw = BD_Chainsaw (target.player.readyweapon);
			if (csaw) {
				csaw.jamstacks = Clamp(csaw.jamstacks + 1,0,1024);
				csaw.hittarget = true;	
				if (tracer) {
					//console.printf("Tracer red: %i, gren: %i, blue: %i",tracer.bloodcolor.R,tracer.bloodcolor.G,tracer.bloodcolor.B);
					/*if (tracer.bloodcolor == 0) {
						csaw.tbloodR = gameinfo.defaultbloodcolor.R / 255.0;
						csaw.tbloodG = gameinfo.defaultbloodcolor.G / 255.0;
						csaw.tbloodB = gameinfo.defaultbloodcolor.B / 255.0;
					}
					else {
						csaw.tbloodR = tracer.bloodcolor.R / 255.0;
						csaw.tbloodG = tracer.bloodcolor.G / 255.0;
						csaw.tbloodB = tracer.bloodcolor.B / 255.0;
					}*/
					//console.printf("MAPINFO red: %i, gren: %i, blue: %i",csaw.tbloodR,csaw.tbloodG,csaw.tbloodB);
					csaw.CopyBloodColor(tracer);
					csaw.tbloodtranslation = tracer.BloodTranslation;
				}
			}
		}
		stop;
	}
}

Class BD_ChainsawBloodSpray : BD_BloodSpray {
	Default {
		scale 0.1;
		gravity 0.5;
		alpha 0.7;
		height 8;
	}
	/*override void PostBeginPlay() {
		Super.PostBeginPlay();
		let csaw = BD_Chainsaw (target.player.readyweapon);
		if (csaw)
			CopyBloodColor(csaw);
	}*/
}

Class BD_ChainsawBloodSpill : BD_CeilingBloodDrop {
	Default {
		scale 0.06;
	}
	override void PostBeginPlay() {
		Super.PostBeginPlay();
		A_SetScale(scale.x*randompick(-1,1)*frandom(1.0,1.3),scale.y*frandom(1.0,1.3));
		/*let csaw = BD_Chainsaw (target.player.readyweapon);
		if (csaw)
			CopyBloodColor(csaw);*/
	}
	states {
	spawn:
		BLOD XXYYZZZZZZZZZZZZZZZZZZZZZZZZZ 1 {
			vel.z = clamp(vel.z-0.25,-3.5,0.0);
			if (bdoom_blood == 0 || waterlevel > 0) {
				self.destroy();
				return ResolveState(null);
			}
			if (pos.z <= floorz)
				return ResolveState("Death");
			return ResolveState(null);
		}
		stop;
	}
}

/* unused

class BD_SawSmoke : BD_BaseSmoke {
	Default {
		alpha 0.3;
		scale 0.22;
	}
	override void Tick() {
		if (target) {
			vel.x = target.vel.x;
			vel.y = target.vel.y;
		}
		super.Tick();
	}
	states {
		Spawn:
			SMK1 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRR 1 A_FadeOut(0.01);
			stop;
	}
}*/


/* 
// Demo Demons to showcase chainsaw blood colors

Class TDemon1 : BD_Demon {
	Default {
		bloodcolor "DDFF00";
		translation "0:255=%[0.00,0.00,0.00]:[1.74,2.00,0.00]";
	}
}

Class TDemon2 : BD_Demon {
	Default {
		bloodcolor "FFCCCC";
		translation "0:255=%[0.00,0.00,0.00]:[1.60,0.84,0.84]";
	}
}

Class TDemon3 : BD_Demon {
	Default {
		bloodcolor "EE20FF";
		translation "0:255=%[0.00,0.00,0.00]:[1.87,0.25,2.00]";
	}
}

Class TDemon4 : BD_Demon {
	Default {
		bloodcolor "00EEEE";
		translation "0:255=%[0.00,0.96,1.07]:[0.34,2.00,2.00]";
		
	}
}

Class TDemon5 : BD_Demon {
	Default {
		bloodcolor "20FF20";
		translation "0:255=%[0.00,0.00,0.00]:[0.25,2.00,0.25]";
	}
}

Class TDemon6 : BD_Demon {
	Default {
		bloodcolor "000000";
		translation "0:255=%[0.00,0.00,0.00]:[0.00,0.00,0.00]";
	}
}