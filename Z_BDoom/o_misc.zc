//////////////////
//	MISC OBJECTS
//////////////////

//**********
// TERRAIN
//**********

Class BD_BaseSplash : BD_SmallDebris abstract {
	Default {
		+NOINTERACTION
		renderstyle 'normal';
	}
	virtual color SetSplashColor() {
		return 0xFFFFFF;
	}
}

Class BD_LavaSplash : BD_BaseSplash {
	Default {
		+BRIGHT
	}
	override color SetSplashColor() {
		static const color pcolor[] = { "d75313", "874307", "530707" };
		return pcolor[random(0,2)];
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		let smoke = Spawn("BD_BlackSmoke",pos+(0,0,frandom(8,16)));
		if (smoke)
			smoke.vel.z = frandom(0.6,1);
		for (int i = random(10,15); i > 0; i--) {
			color pcolor = SetSplashColor();
			A_SpawnParticle(
				pcolor,
				SPF_FULLBRIGHT,
				lifetime:40,
				size:4,
				angle:random(0,360),
				xoff:frandom(-6,6),yoff:frandom(-6,6),zoff:frandom(6,14),
				velx:frandom(-0.6,0.6),velz:frandom(1,1.5),
				accelz:-0.15,
				sizestep:-0.15
			);
		}
		for (int i = random(3,5); i > 0; i--) {
			A_SpawnParticle(
				"d7bb43",
				0,
				lifetime:32,
				size:3,
				angle:random(0,360),
				xoff:frandom(-4,4),yoff:frandom(-4,4),zoff:frandom(6,14),
				velx:frandom(-0.1,0.1),velz:frandom(2.2,3),
				accelz:-0.2,
				sizestep:-0.15
			);
		}
	}
	states {
	Spawn:
		BTSL ABCDEFGHIJKL 2;
		stop;
	}
}

Class BD_SmallLavaSplash : BD_LavaSplash {
	Default {
		scale 0.45;
	}
	override void PostBeginPlay() {
		BD_BaseSplash.PostBeginPlay();
	}
}

Class BD_WaterSplash : BD_BaseSplash {
	override color SetSplashColor() {
		static const color pcolor[] = { "5353ff", "0000cb", "3737ff" };
		return pcolor[random(0,2)];
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		//Spawn("BD_SplashRipple",pos);
		let chunk = Spawn("BD_WaterSplashChunk",pos + (frandom[bdsfx](-2,2),frandom[bdsfx](-2,2),frandom[bdsfx](7,12)));
		if (chunk) {
			chunk.vel = (frandom[bdsfx](-0.8,0.8),frandom[bdsfx](-0.8,0.8),frandom[bdsfx](2,3));
			chunk.translation = translation;
			chunk.scale = scale;
		}
		for (int i = random(10,15); i > 0; i--) {
			color pcolor = SetSplashColor();
			A_SpawnParticle(
				pcolor,
				0,
				lifetime:40,
				size:5,
				angle:random(0,360),
				xoff:frandom[bdsfx](-6,6),yoff:frandom[bdsfx](-6,6),zoff:frandom[bdsfx](6,14),
				velx:frandom[bdsfx](-0.6,0.6),velz:frandom[bdsfx](1,1.5),
				accelz:-0.15,
				sizestep:-0.15
			);
		}
	}
	states {
	Spawn:
		BTSW ABCDEFGHIJKLM 2;
		stop;
	}
}

Class BD_WaterSplashChunk : BD_SmallDebris {
	Default {
		BD_SmallDebris.removeonfall true;
		gravity 0.3;
		renderstyle 'translucent';
	}
	
	override void Tick() {
		super.Tick();
		if (waterlevel > 1)
			Destroy();
	}
	
	states {
	Spawn:
		SPSH ABCD 4;
		wait;
	}
}

Class BD_SmallWaterSplash : BD_WaterSplash {
	Default {
		scale 0.45;
	}
	override void PostBeginPlay() {
		BD_BaseSplash.PostBeginPlay();
	}
}

Class BD_BloodSplash : BD_WaterSplash {
	Default {
		translation "192:207=179:191";
	}
	override color SetSplashColor() {
		static const color pcolor[] = { "d23b35", "790400", "540300" };
		return pcolor[random(0,2)];
	}
}

Class BD_SmallBloodSplash : BD_BloodSplash {
	Default {
		scale 0.45;
	}
	override void PostBeginPlay() {
		BD_BaseSplash.PostBeginPlay();
	}
}

Class BD_SludgeSplash : BD_BaseSplash {
	override color SetSplashColor() {
		static const color pcolor[] = { "926949", "503218", "372211" };
		return pcolor[random(0,2)];
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		for (int i = random(6,12); i > 0; i--) {
			color pcolor = SetSplashColor();
			A_SpawnParticle(
				pcolor,
				bBRIGHT ? SPF_FULLBRIGHT : 0,
				lifetime:40,
				size:4,
				angle:random(0,360),
				xoff:frandom(-6,6),yoff:frandom(-6,6),zoff:frandom(6,14),
				velx:frandom(-0.6,0.6),velz:frandom(1,1.5),
				accelz:-0.15,
				sizestep:-0.15
			);
		}
	}
	states {
	Spawn:
		BTSS ABCDEFGH 2;
		stop;
	}
}

Class BD_SmallSludgeSplash : BD_SludgeSplash {
	Default {
		scale 0.45;
	}
	override void PostBeginPlay() {
		BD_BaseSplash.PostBeginPlay();
	}
}

Class BD_AcidSplash : BD_SludgeSplash {
	Default {
		+BRIGHT
		translation "0:255=%[0.00,0.00,0.00]:[1.01,2.00,0.00]";
	}
	override color SetSplashColor() {
		static const color pcolor[] = { "37d805", "2ba505", "145500" };
		return pcolor[random(0,2)];
	}
}

Class BD_SmallAcidSplash : BD_AcidSplash {
	Default {
		scale 0.45;
	}
	override void PostBeginPlay() {
		BD_BaseSplash.PostBeginPlay();
	}
}



	/*override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (GetAge() % 12 == 0)
			Spawn("BD_SplashRipple",pos);
	}*/

Class BD_SplashRipple : BD_SmallDebris {
	protected double scalemul;
	Default {
		renderstyle 'shaded';		
		stencilcolor "00009b";
		alpha 0.65;
		scale 0.05;
		+FLATSPRITE
		+NOINTERACTION
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		scalemul = 1.1;
	}
	states {
	Spawn:
		BSWR C 1 {
			SetZ(floorz);
			scale *= scalemul;
			scalemul = Clamp(scalemul*0.997,1,2);
			A_FadeOut(0.03);
		}
		loop;
	}
}

//******
// TECH
//******

// TELEPORT FOG

Class BD_TeleportFog : TeleportFog {
	BD_BaseFlare flare;
	Default {
		+FORCEXYBILLBOARD
		+BRIGHT
		renderstyle "Add";
		alpha 0.8;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		scale.x*=randompick(-1,1);
		if (bdoom_flames) {
			flare = BD_BaseFlare(Spawn("BD_BaseFlare",(pos.x,pos.y,pos.z+32)));
			flare.A_SetScale(0.3);
			flare.A_SetRenderstyle(0.4,Style_ADD);
			flare.fcolor = 'green';
		}
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (flare)
			flare.A_SetScale(0.3 - 0.03*frame);
	}
	states {
		Spawn:
			TFOG ABCDCBAABABCDCDEFGHIJ 3;
			TNT1 A 0 { if (flare) flare.destroy(); }
			stop;
	}
}


// Explosive Barrel

Class BD_EBarrelPiece : BD_WallPart {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		wrot = random(16,24)*randompick(-1,1);
		scale *= frandom(0.8,1);
	}
	states {
		Spawn:
			BPRT A 1 {				
				let a = Spawn("BD_EbarrelTrail",pos+(frandom(-3,3),frandom(-3,3),frandom(-3,3)));				
				if (a) {
					a.alpha = alpha*0.8;
					a.vel = (frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2));
				}
				scale *= 0.93;
				roll+=wrot;
				A_FadeOut(0.01);
			}
			wait;
	}
}

Class BD_EbarrelTrail : BD_BaseFlare {
	Default {
		scale 0.05;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll = random(0,359);
	}
	states {
	Spawn:
		BOM5 ABCDEFGHIJKLMN 1 {
			scale *= 0.92;
		}
		stop;
	}
}

Class BD_ExplosiveBarrel : ExplosiveBarrel {
	BD_BaseFlare flare;
	actor remains;
	//private int otherBarrelsNearby;
	mixin BD_PlayerSightCheck;
	Default {
		deathsound "world/ebarrel";
		scale 0.8;
	}
	//private array < BD_ExplosiveBarrel > barrels;
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (!flare && bdoom_flames && health > 0) {
			flare = BD_BaseFlare(Spawn("BD_BaseFlare",(pos.x,pos.y,pos.z+26)));
			flare.scale.x = 0.15;
			flare.scale.y = 0.11;
			flare.fcolor = 'green';
			flare.A_SetRenderstyle(0.3,Style_Add);
		}
/*		if (GetAge() % 35 == 0) {
			int dist = 14;
			BlockThingsIterator itr = BlockThingsIterator.Create(self,dist);
			while (itr.next()) {
				let obj = itr.thing;
				if (obj == self)
					continue;
				if (!(obj is "BD_ExplosiveBarrel"))
					continue;
				if (barrels.Find(obj) != barrels.Size())
					continue;
				if (Distance3D(obj) > dist)
					continue;
				let bar = BD_ExplosiveBarrel(obj);
				if (bar)
					barrels.Push(bar);
			}
			if (flare) {
				double fac = Clamp(barrels.Size()*0.8,1,20);
				flare.alpha = 0.5 / fac;
			}
			//console.printf("other barrels nearby: %d",barrels.Size());
		}*/
		if (bdoom_flames && flare)
			flare.SetOrigin((pos.x,pos.y,pos.z+26),true);
		if (!bdoom_flames && flare)
			flare.destroy();
	}
	states {
		Spawn:
			TNT1 A 0 NoDelay A_Jump(256,1,2,3,4,5);
		Idle:
			BEBR ABCDE random(3,5) {
				/*if (bdoom_flames) {
					double chance = 4 / Clamp(barrels.Size()*0.8,1,20);
					if (frandom(0,10) < chance) {
						A_SpawnParticle(
							"green",
							SPF_FULLBRIGHT|SPF_RELATIVE,
							lifetime:random(15,30),
							size:3,
							angle:random(0,360),
							xoff:random(-5,5),yoff:random(-5,5),zoff:frandom(27.5,29),
							velz:frandom(0.2,0.3),
							accelz:-0.005,
							sizestep:-0.09
						);
					}
				}*/
			}
			loop;
		Death:
			TNT1 A 0 {
				if (flare)
					flare.destroy();
				if (bdoom_shakes)
					A_Quake(2,15,0,320,"");
				A_SetScale(1.0);
			}
			BXP1 AABBC 1;
			BXP1 C 1 A_Scream;
			TNT1 A 0 {
				if (bdoom_debris) {
					remains = Spawn("BD_ExplodedBarrel",pos);
					if (remains)
						remains.master = self;
				}
				A_SetRenderstyle(0.8,Style_ADD);
				scale *= frandom(0.7,1);
				scale.x *= randompick(-1,1);
				A_SprayDecal("BarrelScorch",128);	
				canSeePlayer = CheckPlayerSights();
				if (bdoom_debris && canSeePlayer) {
					for (int i = random(3,6); i > 0; i--)
						A_SpawnItemEx("BD_SmokingPiece",	frandom(-6,6),frandom(-6,6),frandom(4,24),	frandom(-5,5),frandom(-5,5),frandom(7,12));
					for (int i = random(4,7); i > 0; i--)
						A_SpawnItemEx("BD_EBarrelPiece",	frandom(-6,6),frandom(-6,6),frandom(4,24),	frandom(-10,10),frandom(-10,10),frandom(4,15));
				}
			}
			BXP1 DDEEFFGGH 1 {
				if (bdoom_debris && canSeePlayer) {
					for (int i = random(0,4); i > 0; i--)
						A_SpawnItemEx("BD_BigBlackSmoke",	frandom(-6,6),frandom(-6,6),frandom(1,52),	frandom(-0.4,0.4),frandom(-0.4,0.4),frandom(0.2,1));
				}
			}
			BXP1 H 1 A_Explode();
			BXP1 IJKLMNOPQ 3 {
				if (bdoom_debris && canSeePlayer)
					A_SpawnItemEx("BD_BigBlackSmoke",	frandom(-6,6),frandom(-6,6),frandom(1,52),	frandom(-0.4,0.4),frandom(-0.4,0.4),frandom(0.2,1),failchance:32);
			}
			TNT1 A 1050 A_BarrelDestroy;
			TNT1 A 5 {
				A_SetRenderstyle(1.0,Style_Normal);
				A_SetScale(0.8);
				if (remains)
					remains.destroy();
				A_Respawn();
			}
			wait;
	}
}

Class BD_ExplodedBarrel : BD_SmallDebris {
	Default {
		+NOINTERACTION
		scale 0.8;
	}
	static const string SSprite[] = {
		"BXP2","BXP3","BXP4"
	};
	override void Tick() {
		if (master)
			BD_SetOrigin(master.pos);
		else
			super.Tick();
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		sprite = GetSpriteIndex(SSprite[random(0,2)]);
	}
	states {
		Loadsprites:
			BXP2 ABCDE 0;
			BXP3 ABCDE 0;
			BXP4 ABCDE 0;
		Spawn:
			#### A random(35,200);
			#### ABCDEDCB random(3,7);
			loop;
	}
}



//******
// HELL
//******

// Eye floating over a candle

Class BD_EvilEye : EvilEye {
	states {
		Spawn:
			TNT1 A -1 NoDelay {
				Spawn("BD_Candlestick",pos);
				Spawn("BD_FloatingEye",(pos.x,pos.y,pos.z+10));
			}
			stop;
	}
}

Class BD_FloatingEye : Actor {
	BD_BaseFlare flare;
	Default {
		renderstyle "Translucent";
		+NOINTERACTION
		+VISIBILITYPULSE
		+FORCEXYBILLBOARD
		+NOGRAVITY
		+RELATIVETOFLOOR +MOVEWITHSECTOR
		+FLOATBOB
		+BRIGHT
		floatbobstrength 0.5;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (!flare && bdoom_flames) {
			flare = BD_BaseFlare(Spawn("BD_BaseFlare",(pos.x,pos.y,pos.z+32)));
			flare.fcolor = 'green';
			flare.A_SetRenderstyle(0.4,Style_ADD);
			flare.A_SetScale(0.3);
			flare.bFLOATBOB = true;
			flare.FloatBobPhase = FloatBobPhase;
			flare.floatbobstrength = floatbobstrength;
		}
		if (!bdoom_flames && flare)
			flare.destroy();
	}
	states {
		Spawn:
			SEYE ABCDEF 4;
			loop;
	}
}

// Floating glowing rock with a skull

Class BD_FloatingSkull : FloatingSkull {
	mixin BD_PlayerSightCheck;
	Default {
		+FLOATBOB
		floatbobstrength 0.3;
	}
	states {
		Spawn:
			TNT1 A 0 NoDelay {
				canSeePlayer = CheckPlayerSights();
			}
			FSKX ABCDEF random(4,5) {
				if (canSeePlayer) {
					if (bdoom_flames && random(0,10) > 3) {
						let fpart = BD_FireParticle(Spawn("BD_FireParticle",(pos.x+frandom(-8,8),pos.y+frandom(-8,8),pos.z+frandom(54,57))));
						fpart.vel = (frandom(-0.15,0.15),frandom(-0.15,0.15),frandom(0.2,0.5));
						fpart.fcolor = 'red';
					}
				}
			}
			loop;
	}
}

// Column with a beating heart on it

Class BD_HeartColumn : HeartColumn {
	BD_LightFlare flare;
	override void PostBeginPlay() {
		super.PostBeginPlay();
		let a = BD_AniBloodPool(Spawn("BD_AniBloodPool",(pos.x,pos.y,floorz),ALLOW_REPLACE));
		if (a)  a.instant = true;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (!flare && bdoom_flames) {
			flare = BD_LightFlare(Spawn("BD_LightFlare",(pos.x,pos.y,pos.z+38)));
			flare.master = self;
			flare.fcolor = 'red';
			flare.falpha = 0.3;
			flare.fscale = 0.1;
			flare.flicker = false;
		}
		if (bdoom_flames && flare)
			flare.SetOrigin((pos.x,pos.y,pos.z+38),true);
		if (!bdoom_flames && flare)
			flare.destroy();
	}
	states {
		Spawn:
			TNT1 A 0 NoDelay A_jump(256,1,12);
		Idle:
			BHAC ABCD 3;
			BHAC E 3 A_StartSound("world/heartbeat",slot:CHAN_5,flags:CHANF_DEFAULT,0.5,attenuation:6);
			BHAC FGHIJKL 3;
			loop;
	}
}

// Big brown tree

Class BD_BigTree : BigTree {
	mixin BD_PlayerSightCheck;
	override void PostBeginPlay() {
		super.PostBeginPlay();
		scale.x*=randompick(-1,1);
	}
	states {
		Spawn:
			BTR2 A 0 noDelay { frame = random(0,3); }
			BTR2 # 20 {
				if (frame != 0 && bdoom_debris && CheckPlayerSights() && random(0,10) > 9) {
					A_SpawnItemEx("BigTreeLeaf",frandom(-20,20),frandom(-20,20),height+frandom(-4,4),frandom(-2,2),frandom(-2,2),0);
				}
			}
			wait;
		load:
			BTR2 ABCD 0;
			stop;
	}
}

Class BigTreeLeaf : BD_SmallDebris {
	Default {
		scale 0.5;
		BD_SmallDebris.Removeonfall false;
		BD_SmallDebris.dbrake 0.95;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		scale*=frandom(0.9,1.1);
		scale.x*=randompick(-1,1);
		scale.y*=randompick(-1,1);
		gravity = frandom(0.002,0.005);
		moving = true;
	}
	override void Tick() {
		super.Tick();
		if (!isFrozen())
			vel.xy *= 0.99;
	}
	override void BD_HitWall() {
		vel = vel - (wallnormal,0) * (vel dot (wallnormal,0));
		A_FaceMovementDirection();
	}
	states {
	Spawn:
		LEFB ABCDEFGHI 4 {
			A_SetTics(random(3,5));
			if (abs(vel.x) < 0.5 && abs(vel.y) < 0.5 && random(1,3) > 2) {
				vel.x = Clamp (frandom(-1.5,1.5),-1.5,1.5);
				vel.y = Clamp (frandom(-1.5,1.5),-1.5,1.5);
			}
		}
		loop;
	Death:
		LEFB ABCDEFGHI 5 {
			if (vel.length() < 0.03) {
				bFLATSPRITE = true;
				return ResolveState("End");
			}
			return ResolveState(null);
		}
		loop;
	End:
		LEFB # 10 A_FadeOut(0.05);
		loop;
	}
}
	

// Small burnt tree

Class BD_TorchTree : TorchTree {
	states {
		Load:
			TRE1 AB 0;
		Spawn:
			TRE1 A 0 NoDelay {
				scale.x*=randompick(-1,1);
				frame = random(0,1);
			}
			TRE1 # -1;
			stop;
	}
}

Class BD_Cleaner : Actor {
	BD_FXAmountControl fxcontrol;
	private int targetcounter;
	private int moploops;
	Default {
		monster;
		+FLOORCLIP
		+FRIENDLY
		+NOTARGETSWITCH
		+NOTARGET
		health 250;
		radius 20;
		height 56;
		xscale 1.2;
		yscale 1.1;
		speed 4;
		painchance 255;
		renderstyle 'Translucent';
		alpha 0.0;
		mass 500;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		fxcontrol = BD_FXAmountControl(EventHandler.Find("BD_FXAmountControl"));
	}
	actor FindClosestBlood () {
		if (!fxcontrol)
			return null;
		actor closestBlood;
		double closestDist = double.infinity;
		for (int i = 0; i < fxcontrol.bloodlist.size(); i ++) {
			let bdblood = fxcontrol.bloodlist[i];
			if (!(bdblood.vel ~== (0,0,0)) /*|| !bdblood.target || (bdblood.target && !bdblood.target.bISMONSTER)*/)
				continue;
			let dist = Distance2D(bdblood);
			if (dist < closestDist) {
				closestDist = dist;
				closestBlood = bdblood;
			}
		}
		return closestBlood;
	}
	actor FindClosestGib () {
		if (!fxcontrol)
			return null;
		actor closestGib;
		double closestDist = double.infinity;
		for (int i = 0; i < fxcontrol.giblist.size(); i ++) {
			let gib = fxcontrol.giblist[i];
			if (!(gib.vel ~== (0,0,0)) /*|| !gib.target || (gib.target && !gib.target.bISMONSTER)*/)
				continue;
			let dist = Distance2D(gib);
			if (dist < closestDist) {
				closestDist = dist;
				closestGib = gib;
			}
		}
		return closestGib;
	}
	actor FindClosestMeat() {
		if (!fxcontrol)
			return null;
		actor closestGib;
		actor closestBlood;
		double closestDist = double.infinity;
		for (int i = 0; i < fxcontrol.bloodlist.size(); i ++) {
			let bdblood = fxcontrol.bloodlist[i];
			if (!(bdblood.vel ~== (0,0,0)) /*|| !bdblood.target || (bdblood.target && !bdblood.target.bISMONSTER)*/)
				continue;
			let dist = Distance2D(bdblood);
			if (dist < closestDist) {
				closestDist = dist;
				closestBlood = bdblood;
			}
		}
		for (int i = 0; i < fxcontrol.giblist.size(); i ++) {
			let gib = fxcontrol.giblist[i];
			if (!(gib.vel ~== (0,0,0)) /*|| !gib.target || (gib.target && !gib.target.bISMONSTER)*/)
				continue;
			let dist = Distance2D(gib);
			if (dist < closestDist) {
				closestDist = dist;
				closestGib = gib;
			}
		}
		if (closestBlood && closestGib) {
			if (Distance2D(closestBlood) < Distance2D(closestGib))
				return closestBlood;
			else
				return closestGib;
		}
		else if (closestBlood)
			return closestBlood;
		return closestGib;
	}
		
	override void Tick() {
		super.Tick();
	//	if (target && target.target)
		//	Console.Printf("Roger's target: %s - %s",target.GetClassName(),target.target.GetClassName());
		if (target)
			targetcounter++;
		if (!fxcontrol)
			fxcontrol = BD_FXAmountControl(EventHandler.Find("BD_FXAmountControl"));
	}
	states {
		Spawn:
			TNT1 A 0 NoDelay {
				A_SpawnItemEx("TeleportFog");
				bSOLID = false;
				bSHOOTABLE = false;
			}
			RGWI AAAAAAAAAA 5 A_FadeIn(0.1);			
			TNT1 A 0 {
				bSOLID = true;
				bSHOOTABLE = true;
			}
			goto See;
		Despawn:
			RGWI A 5 {
				A_SetRenderstyle(1.0,Style_Translucent);
				A_SpawnItemEx("TeleportFog");
				bSOLID = false;
				bSHOOTABLE = false;
			}
			RGWI A 6 A_FadeOut(0.1);
			stop;
		See:
			RGWI AABBCCDDEEFF 2 {
				A_SetRenderstyle(1.0,Style_Normal);
				bSPRITEFLIP = false;
				if (target) {
					speed = 6;
					let dist = Distance2D(target);
					if (dist <= 24) {
						if (target is "BD_BloodBase")
							return ResolveState("Mop");
						if (target is "BD_BaseGib")
							return ResolveState("Bucket");
					}
					A_Chase(null,null);
					//it's close but we've been chasing it for a while, so it's probably unreachable
					//or it's wherever but we've been chasing it  f o r e  v e r (longer than a minute)
					if ((dist < 320 && targetcounter > 250) || targetcounter > 2100) {
						target.destroy();
						target = null;
						targetcounter = 0;
					}
				}
				else {
					speed = default.speed;
					A_Wander();
				}
				return ResolveState(null);
			}
			TNT1 A 0 {
				if (target)
					return ResolveState("See");
				let meat = FindClosestMeat();
				if (meat) {
					target = meat;
					return ResolveState("See");
				}
				return ResolveState("Despawn");
			}
			loop;
		Mop:
			TNT1 A 0 { moploops = random[cleaner](1,5); }
			RGWM ABCDEFGHII 2;
		MopLoop:
			TNT1 A 0 {				
				A_StartSound("cleaner/mop",flags:CHANF_DEFAULT,volume:0.6,attenuation:2);
				if (target) {
					target.destroy();
				}
			}
			RGWM JJKLMNOP 4 {
				if (target)
					target.destroy();
				let blood = FindClosestBlood();
				if (blood && Distance2D(blood) < 48) {
					target = blood;
				}
				return ResolveState(null);
			}
			TNT1 A 0 {
				moploops--;
				if (target)
					return ResolveState("MopLoop");
				let blood = FindClosestBlood();
				if (blood && Distance2D(blood) < 72) {
					target = blood;
					return ResolveState("MopLoop");
				}
				//this is just visual repetition, to reduce the number of cases where Roger makes just one move with his mop
				if (moploops > 0)
					return ResolveState("MopLoop");
				return ResolveState(null);
			}
			RGWM RSTEDCBA 2;
			goto See;
		Loadsprites:
			RGWX FGHIJKLM 0;
			RGWY FGHIJKLM 0;
		Bucket:
			RGWB ABCD 3;
		Bucketloop:
			RGWB E 3;
			#### # 0 {
				if (target) {
					if (target.bloodcolor.B > 4*(target.bloodcolor.R  + target.bloodcolor.G))
						sprite = GetSpriteIndex("RGWY");
					else if (target.bloodcolor.G > 4*(target.bloodcolor.R  + target.bloodcolor.B))
						sprite = GetSpriteIndex("RGWX");
					target.destroy();
				}
			}
			#### FGHI 3;
			#### A 0 A_StartSound("cleaner/bucketdrop",flags:CHANF_DEFAULT,volume:0.5,attenuation:2);
			#### JKLM 4;
			RGWB N 4;
			TNT1 A 0 {
				if (target)
					return ResolveState("Bucketloop");
				let gib = FindClosestGib();
				if (gib && Distance2D(gib) < 48) {
					target = gib;
					return ResolveState("Bucketloop");
				}
				return ResolveState(null);
			}
			RGWB DCBA 3;
			goto See;
		Pain:
			TNT1 A 0 {
				bSPRITEFLIP = randompick(0,1);
			}
			RGWP ABCBA 4;
			goto See;
		Death:
			TNT1 A 0 A_SetRenderstyle(1.0,Style_Translucent);
			RGWD ABCDEFG 5;
			TNT1 A 0 A_SpawnItemEx("TeleportFog");
			RGWD H 1 A_FadeOut(0.01);
			wait;
	}
}