
class BD_BaseGib : BD_SmallDebris abstract {
	name gibtype; //can be set explicitly by the spawner; otherwise becomes equal to the class name of the spawner (which is normally the gib's target)
	protected double bmass; //the mass the gib gains after it lands
	protected int restframe; //last frame used in death animation
	protected bool bflat;
	bool instant; //if true, goes to rest position immediately without animation (used by some gory decorations that spawn gibs under themselves, as well as a placable gibbed corpse)
	protected int outboundscounter; //is used if the gib ends up in the void: if so, it'll be removed but only after a delay
	Default {		
		BD_BaseDebris.sfxtype 'gibs';
		BD_SmallDebris.removeonliquid false;
		BD_SmallDebris.removeonfall false;
		BD_SmallDebris.liquidheight 1.2;
		BD_SmallDebris.dbrake 0.75;
		BD_SmallDebris.hitceiling true;
		BD_SmallDebris.liquidsound "world/watersplash";
		RenderStyle 'normal';
		//remains of an older iteration when the gibs were regular shootable actors:
		/*
		+NOTARGETSWITCH		//so that gibs pushed by explosions don't switch their target field to player
		+BUDDHA //can't use +NODAMAGE here because it severely reduces the pushing effect of explosions
		+NOPAIN
		-MISSILE
		-NOGRAVITY
		*/
		+ROLLCENTER
		Deathsound "gibs/meatland";
		gravity 0.6;
		mass 1;
		radius 8;
		height 12;
		alpha 1.0;
		bouncecount 3;
		translation "0:255=0:255";
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		A_FaceMovementDirection();
		if (!target) //|| !(target is "BDoomMonster"))
			return;
		CopyBloodColor(target);
		if (!Voffset)
			Voffset = 0.5;
	}
	virtual void GibBeginPlay() {
		if (gibtype == 'none' && target) {
			if (target is 'BD_Zombieman')
				gibtype = 'BD_Zombieman';
			else if (target is 'BD_ShotgunGuy')
				gibtype = 'BD_ShotgunGuy';
			else if (target is 'BD_ChaingunGuy')
				gibtype = 'BD_ChaingunGuy';
			else if (target is 'BD_DoomImp') 
				gibtype = 'BD_DoomImp';
			else if (target is 'BD_WolfensteinSS') 
				gibtype = 'BD_WolfensteinSS';
			//need to check for BD_Spectre before BD_Demon because BD_Spectre inherits from BD_Demon:
			else if (target is 'BD_Spectre') {
				//A_SetRenderstyle(0.5,STYLE_OptFuzzy);
				gibtype = 'BD_Spectre';
			}
			else if (target is 'BD_Demon')
				gibtype = 'BD_Demon';
		}
	}
	override void BD_HitCeiling() {
		super.BD_HitCeiling();
		if (d_ceiling) {
			if (!bNOBLOOD) {
				let bld = BD_Blood(Spawn("BD_Blood",(pos.x,pos.y,ceilingz-1)));
				if (bld) {
					if (target && target is "BDoomMonster")	{
						bld.target = target;
						bld.translation = target.BloodTranslation;
						bld.vel.z = 0.1;
						let mon = BDoomMonster(target);
						if (mon) 
							mon.meatlist.Push(bld);
					}
					else 
						bld.translation = BloodTranslation;
				}
			}
			A_Stop();
			A_Scream();
			VOffset = height;
		}
		else {
			vel.z = -gravity;
			vel.xy *= 0.5;
			//Console.printf("%s hit ceiling, velz: %i",GetClassName(),vel.z);
		}
		SetOrigin((pos.x,pos.y,ceilingz-height),true);
	}		
	override void BD_HitWall() {
		super.BD_HitWall();
		//console.printf("%s hits wall at %d:%d:%d",GetClassName(),pos.x,pos.y,pos.z);
		if (bNOBLOOD || waterlevel > 0)
			return;
		TraceBleedAngle(1,angle,0);
		//if "WallSlide" state exists, stick to wall:
		/*if (d_wall) {
			SetOrigin(wallpos + wallnormal * radius,true);
		}*/
	}
	override void BD_HitFloor() {
		if (waterlevel > 0) {
			landed = true;
			return;
		}
		gravity = default.gravity;
		if (bflat) {
			bFLATSPRITE = true;
			pitch = 0;
		}
		else
			roll = 0;
		A_SetMass(bmass);
		bDROPPED = true;
		Voffset = 0;
		Super.BD_HitFloor();
	}
	void BD_GibBleed(Class<Actor> spawnclass, double hpos = 0, double vpos = 0, int spawnchance = 100) {	
		if (bNOBLOOD || !bdoom_blood)
			return;
		if (random[bdsfx](0,100) > spawnchance)
			return;
		let bdrop = BD_BaseDebris(Spawn(spawnclass, (pos.x+frandom[bdsfx](-hpos,hpos),pos.y+frandom[bdsfx](-hpos,hpos),pos.z+vpos ))	);
		if (!bdrop)
			return;
		bdrop.translation = BloodTranslation;
		bdrop.gravity = gravity*0.4;
		if (target && target is "BDoomMonster") {
			bdrop.target = target;
			let mon = BDoomMonster(target);
			mon.meatlist.Push(bdrop);
		}
	}
	override void Tick() {
		Super.Tick();	//BD_SmallDebris's Tick, not Actor's
		if (isFrozen())
			return;		
		//remove if out of level:
		if (level.time % 35 == 0) {
			if (!onliquid && !level.IsPointInLevel(pos)) {
				outboundscounter++;
				if (outboundscounter > 5) {
					destroy();
					return;
				}
			}
		}
		/*
		//Spawn blood trails when sliding
		if (!bdoom_blood || bNOBLOOD || waterlevel != 0)
			return;
		if ((abs(vel.x) > 2 || abs(vel.y) > 2) )
			BD_GibBleed("BD_BloodPool",2,pos.z+0.5,30);
			*/
	}
}

class BD_BasicMeatPiece : BD_BaseGib {
	double watergravity;
	property watergravity : watergravity;
	
	Default {
		BD_BasicMeatPiece.watergravity 0.1;
		scale 0.45;
		radius 2;
	}
	static const string GibSprite[] =
		{
			"GIB1","GIB2","GIB3","GIB4","GIB5"
	};
	
	override void PostBeginPlay() {
		super.PostBeginPlay();	
		A_FaceMovementDirection();
		if (self.GetClassName() == "BD_BasicMeatPiece")
			bSLIDESONWALLS = false;
		GibBeginPlay();
	}
	
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (waterlevel > 2) {
			bNOGRAVITY = true;
			vel.xy *= 0.95;
			if (watergravity > 0) {
				if (vel.z > watergravity)
					vel.z = Clamp(vel.z * 0.99,-watergravity,1.2);
				else
					vel.z = Clamp(vel.z - 0.05,-watergravity,watergravity);
			}
			else
				vel.z = Clamp(vel.z * 0.95,0,0.8);
		}
		else {
			bNOGRAVITY = false;
			gravity = default.gravity;
			if (waterlevel > 0)
				wrot *= 0.1;
		}
	}
	
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex(GibSprite[random[bdsfx](0,4)]);
		bmass = 50;
		wrot = random[bdsfx](14,17)*randompick(-1,1);
		restframe = 25;
		roll = random[bdsfx](0,359);
		if (instant) {
			BD_HitFloor();
		}
	}
	
	void SpawnGibBloodPool() {
		if (bNOBLOOD || onliquid)
			return;
		let bld = BD_BaseDebris(Spawn("BD_BloodPool",(pos.x,pos.y,floorz)));
		if (bld) {
			if (target && target is "BDoomMonster")	{
				bld.target = target;
				bld.translation = target.BloodTranslation;
				let mon = BDoomMonster(target);
				if (mon) 
					mon.meatlist.Push(bld);
			}
			else
				bld.translation = BloodTranslation;
		}
	}
	
	states {
	spawn:
		#### A 0 NoDelay {
			bSPRITEFLIP = randompick(0,1);
		}
		#### # 1 {
			roll += wrot;
			if (waterlevel == 0)
				BD_GibBleed("BD_Blood",frandom[bdsfx](-6,6),frandom[bdsfx](-6,6),25);
			else {				
				BD_GibBleed("BD_Blood",frandom[bdsfx](-6,6),frandom[bdsfx](-6,6),10);
				if (abs(wrot) > 0.5) //slow down rotation
					wrot *= 0.98;
				else //when not rotating anymore, stop moving
					return ResolveState("Rest");
			}
			return ResolveState(null);
		}
		wait;
	HitWall:
		#### # 1 {
			gravity = frandom[bdsfx](0.0018,0.0022);
			A_SetTics(random[bdsfx](50,90));
			roll = randompick(0,180);
			let smudge = BD_GibSmudge(Spawn("BD_GibSmudge",pos));
			if (smudge) {
				smudge.master = self;
				smudge.translation = BloodTranslation;
				if (wall) {
					smudge.bWALLSPRITE = true;
					smudge.angle = atan2(wall.delta.y, wall.delta.x) + 90;
				}
			}
		}
		#### # 0 {
			gravity = bmass*frandom[bdsfx](0.0006,0.0007);
		}
		#### # 1;
		wait;
	HitCeiling:
		#### # 1 {
			A_SetTics(random[bdsfx](50,100));		
			gravity = frandom[bdsfx](0.0022,0.0025);
			let smudge = BD_GibSmudge(Spawn("BD_GibSmudge",pos));
			if (smudge) {
				smudge.master = self;
				smudge.ceiling = true;
				smudge.scale.x*= 1.4;
			}
		}
		#### # 15 {
			gravity = default.gravity*0.1;
		}
		#### # 0 {
			gravity = default.gravity*0.6;
		}
		#### # 1;
		wait;
	Death:
		#### # 0 {
			frame = restframe;
			if (!onliquid || !instant)
				A_Scream();
			SpawnGibBloodPool();
		}
		#### # 1 {
			if (vel ~== (0,0,0))
				return ResolveState("Rest");
			return ResolveState(null);
		}
		wait;
	/*DeathLiquid:		
		#### # 0 {
			roll = 90+frandom(-5,5);
		}
		#### # 1 {
			if (pos.z <= floorz - drownheight) {
				return ResolveState("Rest");
			}
			SetZ(pos.z - 0.5);
			//VOffset -= 0.1;
			return ResolveState(Null);
		}
		wait;*/
	Rest:
		#### # 1 { 
			if (waterlevel > 0 && frame != restframe)
				roll += clamp(wrot,-0.1,0.1);
		}
		wait;
	FadeOut:
		#### # 0 A_SetRenderstyle(alpha,Style_Translucent);
		#### # 1 A_FadeOut(0.01);
		wait;
	Raise:
		#### # 0 FlyBack();
		#### A 1 {
			roll-=wrot;
			A_FadeOut(0.01);
			if (target &&  Distance2D(target) < 16) {
				destroy();
				return ResolveState(null);
			}
			return ResolveState(null);
		}
		wait;
	}
}
	
Class BD_GibSmudge : BD_SmallDebris {
	BD_BasicMeatPiece meat;
	bool ceiling;
	Default {
		BD_BaseDebris.sfxtype 'gibs';
		BD_SmallDebris.removeonfall false;
		gravity 0;
		+FORCEYBILLBOARD
		xscale 0.32;
		yscale 0.5;
		alpha 0.8;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		bSPRITEFLIP = randompick(0,1);
		if (master)
			meat = BD_BasicMeatPiece(master);
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (meat) {
			if (!meat.landed)
				SetOrigin(meat.pos,true);
			if (ceiling) {
				if (!meat.landed)
					scale.y = Clamp((ceilingz-meat.pos.z)*0.025,0.05,0.4);
				else if (abs(scale.y) > 0.01)
					scale.y *= 0.85;
				else {
					destroy();
					return;
				}
			}
			else {
				if (!meat.landed) 
					scale.y = Clamp(abs(meat.vel.z)*0.2,0.05,0.4);
				else if (abs(scale.y) > 0.01)
					scale.y *= 0.9;
				else {
					destroy();
					return;
				}
			}
		}
		else {
			 destroy();
			 return;
		}
	}
	states {
	Spawn:
		GIBD A -1 NoDelay {
			frame = random(0,3);
		}
		stop;			
	}
}

Class BD_BasicLimb : BD_BasicMeatPiece {
	Default {
		+BOUNCEONFLOORS
		+BOUNCEONWALLS		
		wallbouncefactor 0.4;
		bouncefactor 0.2;
		BD_SmallDebris.liquidheight 3.5;
	}
	states {
	/*DeathLiquid:
		#### # 0 {
			roll = Clamp(roll,80,100);
		}
		#### # 1 {
			if (!drown)
				return ResolveState("Rest");
			else if (pos.z <= floorz - drownheight) {
				VOffset += frandom(-0.1,0.1);
				return ResolveState("Rest");
			}
			//SetZ(pos.z - 0.1);
			VOffset -= 0.1;
			return ResolveState(Null);
		}
		wait;*/
	}
}

class BD_BasicMetalPiece : BD_BasicMeatPiece {
	Default {
		BD_SmallDebris.removeonliquid true;
		BD_BasicMeatPiece.watergravity 0.08;
		seesound "none";
		bouncesound "gibs/metallic";
		deathsound "gibs/metallic";
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		wallbouncefactor 0.5;
		bouncefactor 0.4;
		height 8;
		+NOBLOOD		
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		Voffset = 2;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GMET");
		bmass = 70;
		wrot = random[bdsfx](14,20)*randompick(-1,1);
		frame = random (0,5);
		restframe = frame;
		roll = random[bdsfx](0,359);
		A_SetScale(frandom[bdsfx](0.3,0.8)*randompick(-1,1));
	}
	states {
	spawn:
		GMET # 1 {			
			roll+=wrot;
			if (waterlevel > 0) {
				if (abs(wrot) > 0.5)
					wrot *= 0.98;
				else
					return ResolveState("Rest");
			}
			else {
				let a = Spawn("BD_BlackSmoke",pos+(frandom(-3,3),frandom(-3,3),frandom(-3,3)));
				if (a) {
					a.A_SetScale(0.1);
					a.vel = (frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5));
				}
				if (GetAge() < 30)				
					Spawn("BD_MetalPieceTrail",pos+(frandom(-3,3),frandom(-3,3),frandom(-3,3)));				
			}
			return ResolveState(null);
		}
		wait;
	Raise:
		stop;
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

Class BD_MetalPieceTrail : BD_BaseFlare {
	Default {
		scale 0.16;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll = random(0,359);
	}
	states {
	Spawn:
		BOM3 HIJKLMNOPQRSTU 1 {
			scale *= 0.92;
		}
		stop;
	}
}

class BD_BasicMeatPiece_Heavy : BD_BasicMeatPiece {
	Default {
		BD_SmallDebris.liquidheight 2;
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 80;
	}
}

class BD_Gib_Intestine : BD_BasicMeatPiece {
	Default {
		scale 0.32;
		gravity 0.5;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();	
		bflat = true;
		bmass = 80;
		wrot = frandom[bdsfx](4,7)*randompick(1,-1);
		sprite = GetSpriteIndex("GIX2");
	}
}

class BD_Gib_Lung : BD_BasicMeatPiece {
	Default {
		+SLIDESONWALLS
		scale 0.23;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GIX1");
	}
}

class BD_Gib_Liver : BD_BasicMeatPiece {
	Default {
		+SLIDESONWALLS
		scale 0.23;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GIX3");
	}
}

class BD_Gib_Kidneys : BD_BasicMeatPiece { //I don't know what that sprite is but it looks non-generic enough to be unique
	Default {
		+SLIDESONWALLS
		scale 0.4;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("GIX4");
	}
}

class BD_Gib_Hand : BD_BasicLimb {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 70;
		wrot = frandom[bdsfx](6,9)*randompick(1,-1);
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("HND1");
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("HND2");
			restframe = 1;
		}
		else if (gibtype == 'BD_ChaingunGuy') {
			sprite = GetSpriteIndex("HND3");
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("HND4");
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_WolfensteinSS') {
			sprite = GetSpriteIndex("HND5");
			restframe = 1;
		}
		else if (gibtype == 'BD_Demon' || gibtype == 'BD_Spectre') {
			sprite = GetSpriteIndex("HND8");
			restframe = 1;
			//if (gibtype == 'BD_Spectre')
				//A_SetRenderstyle(0.5,STYLE_OptFuzzy);
		}
		else {
			destroy();
			return;
		}
	}
	states {		
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class BD_Gib_Leg : BD_BasicLimb {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("LEG1");
			frame = random[bdsfx](0,1);
			restframe = random[bdsfx](2,4);
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("LEG2");
			frame = random[bdsfx](0,1);
			restframe = random[bdsfx](2,4);
		}
		else if (gibtype == 'BD_ChaingunGuy') {
			sprite = GetSpriteIndex("LEG3");
			frame = 0;
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("LEG4");
			frame = random[bdsfx](0,1);
			restframe = random[bdsfx](2,3);
		}
		else if (gibtype == 'BD_WolfensteinSS') {
			sprite = GetSpriteIndex("LEG5");
			frame = 0;
			restframe = random[bdsfx](1,2);
		}
		else {
			destroy();
			return;
		}
		bmass = 70;
		wrot = frandom[bdsfx](5,8)*randompick(1,-1);
	}
	states {		
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class BD_Gib_Head : BD_BasicLimb {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 70;
		wrot = frandom[bdsfx](8,12)*randompick(1,-1);
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("HED1");
			restframe = random[bdsfx](1,3);
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("HED2");
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_ChaingunGuy') {
			sprite = GetSpriteIndex("HED3");
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("HED4");
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_WolfensteinSS') {
			sprite = GetSpriteIndex("HED5");
			restframe = random[bdsfx](1,2);
		}
		else if (gibtype == 'BD_Demon' || gibtype == 'BD_Spectre') {
			sprite = GetSpriteIndex("HED8");
			restframe = 1;
			wrot = frandom[bdsfx](3,4)*randompick(1,-1);
			bmass = 100;
			//if (gibtype == 'BD_Spectre')
				//A_SetRenderstyle(0.5,STYLE_OptFuzzy);
		}
		else {
			destroy();
			return;
		}
	}
	states {		
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class BD_Gib_Torso1 : BD_BasicMeatPiece {
	int finalframe; //last frame used in the flying animation
	Default {
		BD_SmallDebris.liquidheight 4;
		BD_BasicMeatPiece.watergravity 0.3;
		BD_BaseDebris.sfxtype "none"; //I don't want torsos to get destroyed because they essentially function as the corpse and show where the monster died
		gravity 1.0;
		scale 1.0;
		radius 16;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		roll = 0;
		wrot = randompick(-1,1); //only used for underwater rotation
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("TR11");
			finalframe = 3; 
			restframe =  6; 
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("TR21");
			finalframe = 3; 
			restframe =  7;
		}	
		else if (gibtype == 'BD_ChainGunGuy') {
			sprite = GetSpriteIndex("TR31");
			finalframe = 4; 
			restframe =  8; 
		}	
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("TR41");
			finalframe = 3; 
			restframe =  7; 
		}		
		else if (gibtype == 'BD_WolfensteinSS') { //the SS soldier has only 1 torso set that is used as his death animation on the WolfesteinSS actor directly
			destroy();	
			return;
		}
		bmass = 200;
	}
	states {
		Spawn:
			#### A 1 NoDelay GibBeginPlay();
			#### # -1;
			#### # 3 {
				if (bdoom_blood)
					A_SpawnItemEx("BD_Blood",frandom[bdsfx](-2,2),frandom[bdsfx](-2,2),frandom[bdsfx](8,22),0,frandom[bdsfx](0,1),frandom[bdsfx](0,1),random[bdsfx](175,185),SXF_TRANSFERPOINTERS,144);
				if (frame < finalframe) //animate flying until the last flying frame
					frame++;
				if (waterlevel > 0)
					return ResolveState("Rest");
				return ResolveState(null);
			}
			wait;
		HitWall:
			stop;
		HitCeiling:
			stop;
		Death:
			#### # 4 {
				if (waterlevel > 0)
					return ResolveState(null);
				if (frame < restframe) //landing ainmation (usually blood comes out of the torso,etc.)
					frame++;
				if (frame == restframe && vel ~== (0, 0, 0)) { //in contrast to other gibs, torso is always noninteractive, so that it always stays close to the position of the original dead body (so that players can see where the monster died and can predict where the Arch-Vile is going to go to resurrect them)
					if (bdoom_blood && target && (target is "BDoomMonster")) {
						let body = BDoomMonster(target);
						let pool = BD_BaseDebris(Spawn("BD_AniBloodPool",(pos.x,pos.y,floorz),ALLOW_REPLACE));
						if (body && pool) {
							body.meatlist.push(pool);
							pool.target = body;
						}
					}
					A_SpawnItemEx("BD_CorpseFlySpawner",flags:SXF_SETMASTER);
					return ResolveState("Rest");
				}
				return ResolveState(null);
			}
			loop;
		Rest:
			#### # 1 { 
				if (waterlevel > 0 && frame != restframe)
					roll += clamp(wrot,-0.1,0.1);
				return ResolveState(null);
			}
			wait;
		Raise:
			#### # 0 FlyBack();
			#### # 3 {
				if (frame > 0) //reverse animation
					frame--;
				A_FadeOut(0.03);
				if (target &&  Distance3D(target) < 16) {
					destroy();
					return ResolveState(null);
				}
				return ResolveState(null);
			}
			wait;
		loadsprites:
			TR11 ABCDEFG 0;
			TR12 ABCDEFG 0;
			TR21 ABCDEFGH 0;
			TR22 ABCDEFGH 0;
			stop;
	}
}

Class BD_Gib_Torso2 : BD_Gib_Torso1 {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		if (gibtype == 'BD_Zombieman') {
			sprite = GetSpriteIndex("TR12");
			finalframe = 3; 
			restframe =  6; 
		}
		else if (gibtype == 'BD_ShotgunGuy') {
			sprite = GetSpriteIndex("TR22");
			finalframe = 3; 
			restframe =  7; 
		}	
		else if (gibtype == 'BD_ChainGunGuy') {
			sprite = GetSpriteIndex("TR32");
			finalframe = 3; 
			restframe =  7; 
		}			
		else if (gibtype == 'BD_DoomImp') {
			sprite = GetSpriteIndex("TR42");
			finalframe = 3; 
			restframe =  7; 
		}		
		else if (gibtype == 'BD_WolfensteinSS') {
			destroy();
			return;
		}
	}
}

//// CACODEMON


class BD_CacodemonMeatPiece : BD_BasicMeatPiece {
	Default {
		bloodcolor "00 00 CC";
		translation "CacoGibs";
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		restframe = 23;
	}
}

Class BD_CacoEye : BD_BasicMeatPiece {
	Default {
		bloodcolor "00 00 CC";
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("EYE1");
		bmass = 40;
		wrot = frandom[bdsfx](18,22)*randompick(1,-1);
		restframe = 1;
	}
}

Class BD_CacoInnards : BD_BasicMeatPiece {
	Default {
		-ROLLSPRITE
		bloodcolor "00 00 CC";
		scale 1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		roll = 0;
	}
	States {
	Spawn:
		TR52 ABCD 2;
		loop;
	Death:
		TNT1 A 0 {
			A_Scream();
			SpawnGibBloodPool();
		}
		TR52 EFGHI 2;
		TR52 J -1;
		stop;
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}
		

//// LOST SOUL pieces

class BD_LS_Horn : BD_BasicLimb {
	Default {
		scale 1.0;
		+NOBLOOD
		seesound "";
		deathsound "";
		bouncesound "";
	}
	override void GibBeginPlay() {
		Super.GibBeginPlay();
		sprite = GetSpriteIndex("LGI1");
		restframe = 0;
		bmass = 40;
		wrot = frandom[bdsfx](14,20)*randompick(1,-1);
		bSPRITEFLIP = random[bdsfx](0,1);
	}
	states {
		Raise:
			stop;
		loadsprites:
			LGI1 A 0;
			LGI2 A 0;
			LGI3 A 0;
			stop;
	}
}

Class BD_LS_Shard : BD_LS_Horn {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LGI3");
		bmass = 30;
	}
}

Class BD_LS_Skull : BD_LS_Horn {
	Default {
		height 4;
		radius 2;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LGI2");
		bmass = 50;
	}
}

// PAIN ELEMENTAL

class BD_PainElementalHand : BD_BasicMeatPiece {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("HND6");
		restframe = 1;
	}
}

class BD_PainElementalJaw : BD_BasicLimb {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("PAPP");
		restframe = 1;
	}
}

class BD_PainElementalHorn : BD_BasicLimb {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("PARP");
		restframe = 1;
	}
}


// CYBERDEMON

Class BD_BaseBossGib : BD_BasicMeatPiece {
	Default {
		BD_SmallDebris.liquidheight 3.5;
		scale 1.0;
		height 20;
	}
	override void GibBeginPlay() {
		bmass = 200;
		wrot = random[bdsfx](14,17)*randompick(-1,1);
		restframe = 25;
		roll = random[bdsfx](0,359);
	}
	states {
	spawn:
		#### A 0 NoDelay GibBeginPlay();
		#### A 1 {
			if (bdoom_blood)
				A_SpawnItemEx("BD_Blood",frandom[bdsfx](-2,2),frandom[bdsfx](-2,2),frandom[bdsfx](0,2),0,frandom[bdsfx](0,1),frandom[bdsfx](0,1),random[bdsfx](175,185),SXF_TRANSFERPOINTERS,144);
			roll+=wrot;
			if (waterlevel == 3)
				return ResolveState("Rest");
			return ResolveState(null);
		}
		wait;
	Death:
		#### # 5;
		#### # 5 {
			if (frame < restframe)
				frame++;
			else if (vel ~== (0,0,0))
				return ResolveState("Rest");
			return ResolveState(null);
		}
		wait;
	loadsprites:
		//cyberdemon
		HED7 ABCDEFGHIJKLM 0;
		HND7 ABCDEFGHIJ 0;
		HND9 ABCDEFG 0;
		LEG9 ABCDEFG 0;
		LEG7 ABCDEFG 0;
		TRC1 ABCDEFG 0;
		TRC2 ABCDEFGHIJ 0;
		TRC3 ABCDEFGHIJ 0;		
		stop;
	Raise:
		stop;
	HitWall:
		stop;
	HitCeiling:
		stop;
	}
}

class BD_CyberHead : BD_BaseBossGib {
	Default {
		scale 0.8;
		gravity 0.5;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -10;
		sprite = GetSpriteIndex("HED7"); 
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		frame = randompick(1,5,9);
		restframe = frame+3;
	}
}

Class BD_CyberHandLeft : BD_CyberHead {
	Default {
		BD_BasicMeatPiece.watergravity 1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -5;
		sprite = GetSpriteIndex("HND7"); 
		roll = 45;
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		bNOBLOOD = true;
		frame = randompick(1,4,7);
		restframe = frame+2;
	}
}

Class BD_CyberHandRight : BD_CyberHandLeft {
	Default {
		BD_BasicMeatPiece.watergravity 0.1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("HND9"); 
		wrot = 5;
		roll = 0;
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		bNOBLOOD = false;
		frame = randompick(1,4);
		restframe = frame+2;
	}
}

Class BD_CyberLegLeft : BD_CyberHandRight {
	Default {
		BD_BasicMeatPiece.watergravity 1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LEG9"); 
		wrot = -5;
	}
}

Class BD_CyberLegRight : BD_CyberHandLeft {
	Default {
		BD_BasicMeatPiece.watergravity 0.1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("LEG7"); 
		wrot = 5;
		roll = 0;
	}
	override void BD_HitFloor () {
		super.BD_HitFloor();
		bNOBLOOD = false;
		frame = randompick(1,4);
		restframe = frame+2;
	}
}

Class BD_CyberTorso1 : BD_CyberHandRight {
	Default {
		BD_BasicMeatPiece.watergravity 1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("TRC1"); 
		wrot = 8;
	}
}

Class BD_CyberTorso2 : BD_Gib_Torso1 {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("TRC2");
		restframe = 4; 
		restframe = 9; 
		bmass = 600;
	}
	states {
		Rest:
			#### # 0 {
				frame = restframe; //in case for SOME reason the animation didn't finish
			}
			#### # -1;
			stop;
	}
}

Class BD_CyberTorso3 : BD_CyberTorso2 {
	override void GibBeginPlay() {
		Super.GibBeginPlay();
		sprite = GetSpriteIndex("TRC3");
	}
}

// SPIDER MASTERMIND



Class BD_SpiderBrainRight : BD_BaseBossGib {
	Default {
		scale 0.8;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = 7;
		sprite = GetSpriteIndex("SPP1"); 
		restframe = 3;
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		frame = 1;
		restframe = 3;
	}
	states {
		loadsprites:
			SPP1 ABCD 0;
			SPP2 ABCD 0;
			SPP3 A 0;
			SPP4 AB 0;
			SPP5 ABCD 0;
			TRP1 ABC 0;
			TRP2 AB 0;
			stop;
	}
}

Class BD_SpiderBrainLeft : BD_SpiderBrainRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -7;
		sprite = GetSpriteIndex("SPP1"); 
		scale.x *= -1;
	}
}

Class BD_SpiderBrainMid : BD_SpiderBrainRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = randompick(-6,6);
		sprite = GetSpriteIndex("SPP2"); 
		scale.x *= randompick(-1,1);
	}
}

Class BD_SpiderFace : BD_SpiderBrainRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = randompick(-5,5);
		sprite = GetSpriteIndex("SPP3"); 
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		bflat = true;
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		frame = 0;
		restframe = 0;
	}
}

class BD_SpiderMetalPiece : BD_BasicMetalPiece {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 100;
		sprite = GetSpriteIndex("TRP1"); 
		frame = random (0,2);
		restframe = frame;
		wrot = randompick(8,-8);
		A_SetScale(0.6);
		scale.x *= randompick(-1,1);
	}
}

class BD_SpiderGunGib : BD_SpiderMetalPiece {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		sprite = GetSpriteIndex("TRP2");
		frame = 0;
		wrot = randompick(6,-6);
		scale.x *= randompick(-1,1);
	}
	override void BD_HitFloor() {
		super.BD_HitFloor();
		frame = 1;
	}
}

class BD_SpiderLegRight : BD_BaseBossGib {
	int endroll;
	Default {		
		BD_BasicMeatPiece.watergravity 1;
		+NOBLOOD
		seesound "none";
		deathsound "gibs/metallic";
		scale 1.0;
	}
	override void GibBeginPlay() {
		Super.GibBeginPlay();
		frame = random[bdsfx](0,3);
		restframe = frame;
		wrot = 5;
		roll = 0;
		endroll = 116;
	}
	override void BD_HitFloor(){
		super.BD_HitFloor();
		roll = endroll;
	}
	states {
		spawn:
			SPP5 # 1 {
				if (abs(roll) < abs(endroll))
					roll+=wrot;
			}
			wait;
		Death:
			SPP5 # -1;
			stop;
	}
}

class BD_SpiderLegLeft : BD_SpiderLegRight {
	override void GibBeginPlay() {
		super.GibBeginPlay();
		scale.x *= -1;
		wrot = -5;
		endroll = -116;
	}
}

Class BD_SpiderHandRight : BD_BaseBossGib {
	Default {
		xscale -1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		bmass = 50;
		wrot = 8;
		restframe = 1;
	}
	states {
		spawn:
			SPP4 A 1 {
				BD_GibBleed("BD_Blood",frandom[bdsfx](-4,4),frandom[bdsfx](-4,4),45);
				roll+=wrot;
				if (waterlevel == 3)
					return ResolveState("Rest");
				return ResolveState(null);
			}
			wait;
		Death:
			SPP4 B -1;
			stop;
	}
}

Class BD_SpiderHandLeft : BD_SpiderHandRight {
	Default {
		xscale 1;
	}
	override void GibBeginPlay() {
		super.GibBeginPlay();
		wrot = -8;
	}
}