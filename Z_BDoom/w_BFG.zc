//**********
// BFG-9001
//**********


class BD_BFG9000 : BDoomWeapon {
	int wcharge; //charge of the Modern BFG
	int railcounter; //used for Heavy Laser alt attack
	string PrevSpecies;
	private int particleLayer;
	private double wzoom;
	private double wzoommul;
	
	private double lightsalpha;
	Default {
		BDoomWeapon.dontforcebob True;
		Height 20;
		weapon.ammotype2 	"Cell";
		weapon.ammouse2 	1;
		weapon.ammogive2 	0;
		Weapon.AmmoType 	"Cell";
		Weapon.AmmoUse 		40;
		Weapon.AmmoGive 	40;
		+WEAPON.NOAUTOFIRE;
		Inventory.PickupMessage "$GOTBFG9000";
		Tag "$TAG_BFG9000";	
		Weapon.Selectionorder 280;
		inventory.pickupsound "pickups/bfg";
		ProjectileKickback 100;
		weapon.kickback 30;
		decal "ArachnotronPlasmaSplat";
		weapon.slotnumber 7;
		inventory.icon "BFUGA0";
	}
	override void DoEffect() {
		Super.DoEffect();
		If (Owner) {
			if(bdoom_weapons == BD_WeaponSet.WS_MODERN) {
				AmmoUse1 = 10;
				AmmoUse2 = 0;
				bALT_AMMO_OPTIONAL = true;
			}
			else {
				AmmoUse1 = 40;
				AmmoUse2 = 1;
				bALT_AMMO_OPTIONAL = false;					
			}
			if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				bAMMO_OPTIONAL = true;
			else
				bAMMO_OPTIONAL = false;
			//console.printf("Player Species: %s",owner.species);
		}
	}
	States {
		Spawn:
			BFUG A 1 {
				if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
					scale.x = -1;
				else
					scale.x = 1;
			}
			loop;
		Select:
			TNT1 A 0 {
				If(bdoom_weapons > BD_WeaponSet.WS_VANILLA)
					A_StartSound("weapons/bfg/draw");
				If(bdoom_weapons==2)
					return ResolveState("Select.Modern");
				return ResolveState(null);
			}
			BBGN A 1 A_Raise();
			wait;
		Deselect:
			TNT1 A 0 {
				If(bdoom_weapons==2)
					return ResolveState("Deselect.Modern");
				A_ClearRefire();
				invoker.wcharge = 0;
				invoker.railcounter = 0;
				A_StopSound(5);
				//A_StopSound(6);
				A_StopSound(7);
				return ResolveState(null);
			}
			BBGN A 1 A_Lower();
			wait;
		Ready:
			BBGN A 1 {
				If(bdoom_weapons==2)
					return ResolveState("Ready.Modern");
				string curspecies = species;
				if (invoker.prevspecies && curspecies.IndexOf("BDoomPlayerSpecies") >= 0) //give back original species, if any (and if current is BDoomPlayerSpecies%d)
					species = invoker.prevspecies;
				A_StopSound(5);
				A_StopSound(7);
				A_ClearOverlays(PSP_LIGHTS,PSP_LIGHTS);
				invoker.wcharge = 0;
				invoker.wzoom = 1.0;
				A_ZoomFactor(1.0,ZOOM_NOSCALETURNING);
				if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED) {
					if (invoker.ammo1.amount >= 40)
						A_WeaponReady();
					else
						A_WeaponReady(WRF_NOPRIMARY);
				}
				else
					A_WeaponReady(WRF_NOSECONDARY);
				return ResolveState(null);
			}
			loop;
		Fire: //before fire = 30 tics, fire = 10 tics, refire = 20 tics
			TNT1 A 0 {
				If(bdoom_weapons == BD_WeaponSet.WS_MODERN)
					return ResolveState("Fire.Modern");
				if (bdoom_weapons == BD_WeaponSet.WS_VANILLA)
					A_StartSound ("weapons/bfgf",slot:CHAN_WEAPON,flags:CHANF_OVERLAP);
				else
					A_StartSound ("weapons/bfg/start",slot:CHAN_5,flags:CHANF_OVERLAP);
				A_Overlay(PSP_LIGHTS,"LightsOn");
				A_OverlayFlags(PSP_LIGHTS,PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayAlpha(PSP_LIGHTS,0);
				invoker.lightsalpha = 0;
				return ResolveState(null);
			}
			BBGN A 22;
			BBGN A 8 {
				A_Overlay(PSP_FLASH,"Flash");
				A_OverlayFlags(PSP_FLASH,PSPF_RENDERSTYLE,true);
				A_OverlayRenderstyle(PSP_FLASH,STYLE_Add);
			}
			BBGN B 2 {
				A_FireProjectile("BD_BFGBall",0,1);
				if(bdoom_shakes)
					A_Quake(1,20,0,128,"");
				if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
					A_StartSound("weapons/bfg/fire",slot:CHAN_5);
				A_ClearOverlays(PSP_LIGHTS,PSP_LIGHTS);
			}
			BBGN CDEF 2;
			BBGN GGHHIIJJAAAAAAAAAAAA 1 {
				if (bdoom_weapons == BD_WeaponSet.WS_ENHANCED && invoker.ammo1.amount < 40) {
					A_ClearRefire();
					A_WeaponReady(WRF_NOFIRE);
				}
				else
					A_ReFire();
				DrawMuzzleSmoke((frandom[sfx](-25,25),frandom[sfx](-10,20)), salpha: 0.35,fade: 0.6, sVSpeed: 1.22, sScale: 0.7);
			}
			goto ready;
		LightsOn:
			BBGL ZZZZZZZZZZZZZZZZZZZZ 1 bright {
				invoker.lightsalpha = Clamp(invoker.lightsalpha+0.05,0,1);
				A_OverlayALpha(OverlayID(),invoker.lightsalpha);
			}
		LightsBlink:
			BBGL ZZ 2 bright {
				if (invoker.lightsalpha > 0.65)
					invoker.lightsalpha = 0.65;
				else
					invoker.lightsalpha = 1;				
				A_OverlayALpha(OverlayID(),invoker.lightsalpha);
				let psp = player.FindPSprite(PSP_Weapon);
				if (!psp || player.readyweapon != invoker)
					return ResolveState("Null");
				return ResolveState(null);
			}
			loop;
		Flash:
			BBGF ABCD 2 bright;
		FlashMain:
			BBGF EFGHIJK 2 bright;
			stop;
		AltFire:
			BBGN A 5 {
				A_StopSound(5);
				A_StartSound("weapons/bfg/railcharge",slot:CHAN_5,flags:CHANF_DEFAULT);
			}
			BBGN A 20 {
				A_Overlay(PSP_LIGHTS,"LightsOn");		
				A_OverlayFlags(PSP_LIGHTS,PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayAlpha(PSP_LIGHTS,0);
				invoker.lightsalpha = 0;
			}
			TNT1 A 0 {
				A_StartSound("weapons/bfg/railfire",slot:CHAN_5);
				A_Overlay(PSP_FLASH,"AltFlash");			
				A_OverlayFlags(PSP_FLASH,PSPF_RENDERSTYLE,true);
				A_OverlayRenderstyle(PSP_FLASH,STYLE_Add);
			}
		RailFire:
			BBGN A 2 {
				If(invoker.railcounter >= 100)
					return ResolveState("AltEnd");
				for (int i = invoker.railcounter * 0.25; i > 0; i--) {
					int layer = -300+invoker.particleLayer;
					A_Overlay(layer,"RailParticle");
					A_OverlayOffset(layer,frandom[sfx](-72,72),frandom[sfx](-72,72));
					invoker.particleLayer++;
					if (invoker.particleLayer >= 50)
						invoker.particleLayer = 0;
				}	
				A_WeaponOffset(random(-1,1),random(32,34),WOF_INTERPOLATE);
				A_RailAttack(10*random(1,6),0,1,"","green",RGF_SILENT|RGF_NORANDOMPUFFZ,1,"BD_BFGRailPuff",0,0,300,0,5.0,0,"BD_BFGRailBall_Hold",-4); //this is memory-light
				if (invoker.railcounter >= 30 && bdoom_shakes == 1)
					A_Quake(1,2,0,64,"");
				invoker.railcounter++;
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire("RailFire");
			goto AltEnd;
		AltEnd:
			TNT1 A 0 {
				A_ClearRefire();
				A_WeaponOffset(0,32);
				A_RailAttack(0,0,0,"","green",RGF_SILENT|RGF_NORANDOMPUFFZ,2,"BD_BFGRailPuff",0,0,300,0,3.0,5.0,"BD_BFGRailBall",-4); //this memory-heavy ray is for nicer after-shot effect similar to plasma railgun
				A_StopSound(CHAN_5);
				A_StartSound("weapons/bfg/railcool",slot:CHAN_6);
				A_ClearOverlays(PSP_LIGHTS,PSP_LIGHTS);
				A_Overlay(PSP_FLASH,"FlashMain");			
				A_OverlayFlags(PSP_FLASH,PSPF_RENDERSTYLE,true);
				A_OverlayRenderstyle(PSP_FLASH,STYLE_Add);
			}
			BBGN BCDEFGHIJAAA 2 {
				if (bdoom_debris)
					DrawMuzzleSmoke((frandom[sfx](-25,25),frandom[sfx](-10,20)), salpha: 0.35,fade: 0.6, sVSpeed: 1.22, sScale: 0.7);;
			}
			BBGN A 5 {
				If(invoker.railcounter >= 100)
					return ResolveState("AltEndLong");
				invoker.railcounter = 0;
				return ResolveState(null);
			}
			goto ready;	
		AltEndLong: //Played only if you held the button until the end
			BBGN AAAAAAAAAAAAAAAA 1 {
				if (bdoom_debris)
					DrawMuzzleSmoke((frandom[sfx](-25,25),frandom[sfx](-10,20)), salpha: 0.35,fade: 0.6, sVSpeed: 1.22, sScale: 0.7);;
			}
			BBGN AAAAA 1 { 
				if (bdoom_debris)
					DrawMuzzleSmoke((frandom[sfx](-25,25),frandom[sfx](-10,20)), salpha: 0.35,fade: 0.6, sVSpeed: 1.22, sScale: 0.7);;
				invoker.railcounter = 0; 
			}
			goto ready;	
		AltFlash:
			BBGG A 1 bright {
				let psp = player.FindPSprite(PSP_Weapon);
				if (!psp || player.readyweapon != invoker)
					return ResolveState("Lightdone");
				let fl = player.FindPSprite(OverlayID());
				if (fl)
					fl.frame = random(0,3);					
				return ResolveState(null);
			}
			loop;
			
	// MODERN
		Select.Modern:
			TNT1 A 0 A_WeaponOffset(-36.0,64.0);
			BBGN AAAAAAAA 1 {
				A_WeaponOffset(4.5,-4.0,WOF_ADD|WOF_INTERPOLATE);
				A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			}
			goto ready;
		Deselect.Modern:
			TNT1 A 0 {
				string curspecies = species;
				if (invoker.prevspecies && curspecies.IndexOf("BDoomPlayerSpecies") >= 0) //give back original species, if any (and if current is BDoomPlayerSpecies%d)
					species = invoker.prevspecies;
				A_ClearRefire();
				invoker.wcharge = 0;
				A_StopSound(5);
				//A_StopSound(6);
				A_StopSound(7);
			}
			BBGN A 1 A_Lower();
			wait;
		Ready.Modern:
			TNT1 A 0 {
				A_ClearRefire();
				A_ClearOverlays(PSP_LIGHTS,PSP_LIGHTS);
				string curspecies = species;
				if (curspecies.IndexOf("BDoomPlayerSpecies") < 0) {
						invoker.prevspecies = species; //record previous species, if any (and if not already BDoomPlayerSpecies%d)
						species = String.Format("BDoomPlayerSpecies%d",self.PlayerNumber()); //assign unique species based on player number
					}			
				invoker.wcharge = 0;
				invoker.railcounter = 0;
				invoker.wzoom = 1.0;
				A_ZoomFactor(1.0,ZOOM_NOSCALETURNING);
				let po = player.findPsprite(PSP_HEAT);
				if (!po && invoker.ammo1.amount > 0) {
					A_OverLay(PSP_HEAT,"ReadyLights");
					A_OverlayFlags(PSP_HEAT,PSPF_RENDERSTYLE,true);
					A_OverlayRenderstyle(PSP_HEAT,Style_normal);
				}
			}
			BBGN A 1 {		
				If(bdoom_weapons!=2)
					return ResolveState("Ready");
				A_WeaponReady(WRF_NOSECONDARY);
				return ResolveState(null);
			}
			wait;
		ReadyLights:
			BMGY ABCDEFEDCB 2 bright;
			loop;
		ChargeLights:
			BMGZ A 1 {
				let po = player.findPsprite(OverlayID());
				po.frame = clamp(invoker.wcharge,0,7);
				return ResolveState(null);
			}
			loop;
			//load:
			BMGZ ABCDEFGH 1;
		OverChargeLights:
			BMGZ KJI 2;
			loop;		
		LightsOn_Modern:
			BBGL ZZZZZZZZZZZZZZZZZZZZZZZZZZZZ 4 bright {
				invoker.lightsalpha = Clamp(invoker.lightsalpha+0.0357,0,1);
				A_OverlayALpha(OverlayID(),invoker.lightsalpha);
			}
			goto LightsBlink;
		Fire.Modern:
			TNT1 A 0 {
				A_StopSound(5);
				A_StopSound(6);
				A_StopSound(7);
				invoker.wcharge = 0;
				//charging lights:
				A_Overlay(PSP_HEAT,"ChargeLights");
				A_Overlay(PSP_LIGHTS,"LightsOn_Modern");		
				A_OverlayFlags(PSP_LIGHTS,PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayAlpha(PSP_LIGHTS,0);
				invoker.lightsalpha = 0;
				//flickering highlights:
				A_Overlay(PSP_FLASH,"AltFlash");
				A_OverlayFlags(PSP_FLASH,PSPF_RENDERSTYLE,true);
				A_OverlayRenderstyle(PSP_FLASH,STYLE_Add);				
				A_StartSound("Mweapons/bfg/charge",slot:CHAN_5);
				
				//spawn rotating orb in front of the barrel
				A_Overlay(PSP_MFLASH,"Preorb");
				A_OverlayOffset(PSP_MFLASH,0,15);
				A_OverlayFlags(PSP_MFLASH,PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayRenderstyle(PSP_MFLASH,Style_Add);
				A_OverlayAlpha(PSP_MFLASH,1);
				A_OverlayPivotAlign(PSP_MFLASH,PSPA_CENTER,PSPA_CENTER);
			}		
		Hold.Modern:
			BBGN A 14 {
				A_SetTics(11+invoker.wcharge);
				A_TakeInventory("Cell",10,TIF_NOTAKEINFINITE);
				if (invoker.wcharge > 8) {
					A_Overlay(PSP_HEAT,"OverChargeLights");
					A_StartSound("Mweapons/bfg/charge2",slot:CHAN_6);
					A_StartSound("Mweapons/bfg/warning",slot:CHAN_7);
					return ResolveState("OverCharge");
				}
				invoker.wcharge++;
				If (CountInv("Cell") < 10)
					return ResolveState("FireBFG");
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire("Hold.Modern");
			goto FireBFG;
		Preorb:
			BPRE ABCDEFGHIJKLMNOPQRSTUV 2 bright {
				A_OverlayRotate(OverlayID(),5*invoker.wcharge,WOF_ADD);
				for (int i = 0; i < invoker.wcharge; i++) {
					int layer = -300+invoker.particleLayer;
					A_Overlay(layer,"PreorbParticle");
					A_OverlayOffset(layer,frandom[sfx](-80,80),frandom[sfx](-80,80));
					invoker.particleLayer++;
					if (invoker.particleLayer >= 50)
						invoker.particleLayer = 0;
				}
			}
			loop;
		PreorbParticle:
			TNT1 A 0 {
				A_OverlayPivotAlign(OverlayID(),PSPA_CENTER,PSPA_CENTER);
				A_OverlayFlags(OverlayID(),PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayRenderstyle(OverlayID(),Style_Add);
				A_OverlayAlpha(OverlayID(),0);
				A_OverlayScale(OverlayID(),0.05,0.05);
			}
			BPRE ZZZZZZZZZZZZZZZZ 1 {
				A_OverlayScale(OverlayID(),0.08,0.08,WOF_ADD);
				let psp = player.FindPSprite(OverlayID());
				if (psp) {
					A_OverlayAlpha(OverlayID(),Clamp(psp.alpha + 0.25, 0, 1));
					//Console.Printf("layer %d offsets: %d, %d",OverlayID(),psp.x,psp.y);
					A_OverlayOffset(OverlayID(),psp.x * 0.9, psp.y * 0.9, WOF_INTERPOLATE);
				}
			}
			stop;	
		RailParticle:
			TNT1 A 0 {
				A_OverlayPivotAlign(OverlayID(),PSPA_CENTER,PSPA_CENTER);
				A_OverlayFlags(OverlayID(),PSPF_RENDERSTYLE|PSPF_ALPHA|PSPF_FORCEALPHA,true);
				A_OverlayRenderstyle(OverlayID(),Style_Add);
				A_OverlayAlpha(OverlayID(),0);
				A_OverlayScale(OverlayID(),0.05,0.05);
			}
			BPRE ZZZZZZZZZZZZZZZZ 1 {
				double smul = double(Clamp(invoker.railcounter,0,100) * 0.005);	
				A_OverlayScale(OverlayID(),smul,smul,WOF_ADD);
				let psp = player.FindPSprite(OverlayID());
				if (psp) {
					A_OverlayAlpha(OverlayID(),Clamp(psp.alpha + 0.3, 0, 1));
					double pmul = 1 - double(Clamp(invoker.railcounter,0,100) * 0.005);	
					A_OverlayOffset(OverlayID(),psp.x * pmul, psp.y * pmul, WOF_INTERPOLATE);
				}
			}
			stop;		
		OverCharge:	
			BBGN A 25 {
				if (invoker.wcharge >= 12) {
					return ResolveState("FireSelf");
				}
				invoker.wcharge++;
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire("OverCharge");
			goto FireBFG;
		FireBFG:
			BBGN A 8 {
				A_ClearOverlays(PSP_MFLASH,PSP_MFLASH);
				A_ClearOverlays(-300,-250);
				A_Overlay(PSP_FLASH,"Flash");
				A_OverlayFlags(PSP_FLASH,PSPF_RENDERSTYLE,true);
				A_OverlayRenderstyle(PSP_FLASH,STYLE_Add);		
				A_ClearRefire();
				A_ClearOverlays(PSP_HEAT,PSP_HEAT);
				A_ClearOverlays(PSP_LIGHTS,PSP_LIGHTS);
			}
			TNT1 A 0 {
				A_StopSound(CHAN_5);
				A_StartSound("Mweapons/bfg/fire",slot:CHAN_6);
				A_FireProjectile("BD_ModernBFGBall",0,0);
				if(bdoom_shakes)
					A_Quake(0.5*invoker.wcharge,12 + invoker.wcharge,0,128,"");
				invoker.wzoom = 1 - (invoker.wcharge * 0.02);
				A_ZoomFactor(invoker.wzoom,ZOOM_NOSCALETURNING|ZOOM_INSTANT);
			}
			BBGN BBCCDDEEFFGGHHIIJJ 1 {
				invoker.wzoom = Clamp ( invoker.wzoom *= 1.005, 0.8, 1);
				A_ZoomFactor(invoker.wzoom,ZOOM_NOSCALETURNING);
			}
			TNT1 A 0 {
				A_Overlay(PSP_LIGHTS,"LightsBlink");		
				A_OverlayFlags(PSP_LIGHTS,PSPF_ALPHA|PSPF_FORCEALPHA,true);
			}
			BBGN A 1 {
				invoker.wzoom = Clamp ( invoker.wzoom *= 1.009, 0.8, 1);
				A_ZoomFactor(invoker.wzoom,ZOOM_NOSCALETURNING);
				if (invoker.wzoom >= 1) {
					invoker.wcharge = 0;
					A_ZoomFactor(1.0,ZOOM_NOSCALETURNING);
					return ResolveState("Ready");
				}
				DrawMuzzleSmoke((frandom[sfx](-25,25),frandom[sfx](-10,20)), salpha: 0.35,fade: 0.6, sVSpeed: 1.22, sScale: 0.7);;
				return ResolveState(null);
			}
			wait;					
		FireSelf:
			BBGN A 8 {
				A_ClearOverlays(PSP_MFLASH,PSP_MFLASH);
				A_ClearOverlays(-300,-250);
				A_ClearOverlays(PSP_HEAT,PSP_HEAT);
				A_ClearOverlays(PSP_LIGHTS,PSP_LIGHTS);
				A_Overlay(PSP_FLASH,"Flash");			
				A_OverlayFlags(PSP_FLASH,PSPF_RENDERSTYLE,true);
				A_OverlayRenderstyle(PSP_FLASH,STYLE_Add);	
				A_ClearRefire();
			}
			BBGN B 2 {
				A_StopSound(CHAN_6);
				A_StopSound(CHAN_7);
				A_FireProjectile("BD_ModernBFGBall",0,0);
				A_Quake(1,14,0,128,"");
				A_StartSound("Mweapons/bfg/fire",slot:CHAN_5);
				invoker.wzoom = 1 - (invoker.wcharge * 0.01);
				A_ZoomFactor(invoker.wzoom,ZOOM_NOSCALETURNING|ZOOM_INSTANT);
			}
			BBGN CCDDEEFFGGHH 1 {
				invoker.wzoom = Clamp ( invoker.wzoom *= 1.004, 0.8, 1);
				A_ZoomFactor(invoker.wzoom,ZOOM_NOSCALETURNING);
			}
			BBGN IIJJ 1 {
				invoker.wzoom = Clamp ( invoker.wzoom *= 1.004, 0.8, 1);
				A_ZoomFactor(invoker.wzoom,ZOOM_NOSCALETURNING);
				DrawMuzzleSmoke((frandom[sfx](-25,25),frandom[sfx](-10,20)), salpha: 0.35,fade: 0.6, sVSpeed: 1.22, sScale: 0.7);;
			}
			TNT1 A 0 {
				A_Overlay(PSP_LIGHTS,"LightsBlink");		
				A_OverlayFlags(PSP_LIGHTS,PSPF_ALPHA|PSPF_FORCEALPHA,true);
			}
			BBGN AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				invoker.wzoom = Clamp ( invoker.wzoom *= 1.004, 0.8, 1);
				A_ZoomFactor(invoker.wzoom,ZOOM_NOSCALETURNING);
				DrawMuzzleSmoke((frandom[sfx](-25,25),frandom[sfx](-10,20)), salpha: 0.35,fade: 0.6, sVSpeed: 1.22, sScale: 0.7);;
			}
			TNT1 A 0 A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			goto ready;
	}
}

Class BD_BFGBall : BFGBall {
	Class<Actor> trailactor;
	bool dead;
	mixin BD_MovingSectorCheck;
	Default {	
		damagetype "BFGSplash";
		+BLOODLESSIMPACT
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		renderstyle "ADD";
		alpha 0.7;
		decal "none";
		seesound "none";
		DeathSound "none";
		scale 0.4;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		trailactor = "BD_BFGTrail";
		A_StartSound("weapons/bfg/fly",slot:CHAN_6,flags:CHANF_DEFAULT|CHANF_LOOPING ,volume:1.0,attenuation:1);
		if (bdoom_projectiles >= 2) {
			if(bdoom_debris) {
				let f = BD_ProjFlare(Spawn("BD_ProjFlare",pos));
				f.fcolor = 'green';
				f.vel = vel;
				f.master = self;
				f.scale = scale;
			}
		}
		else {
			A_SetScale(1);
			alpha = 1;
		}
	}
	override void Tick () {
		Vector3 oldPos = self.pos;
		Super.Tick();
		if (!bdoom_debris || bdoom_projectiles < 2 || isFrozen())
			return;
		CheckMovingSetor();
		Vector3 path = level.vec3Diff( self.pos, oldPos );
		double distance = path.length() / 3; //this determines how far apart the particles are
		Vector3 direction = path / distance;
		int steps = int( distance );
		
		for( int i = 0; i < steps; i++ )  {
			actor mo = Spawn(trailactor, oldPos );
			if (mo) {
				//mo.vel = (frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5));
				mo.target = self;
				mo.angle = angle;
				oldPos = level.vec3Offset( oldPos, direction );
			}
		}
		if (Getclassname() == "BD_BFGBall") {
			if (pos.z <= floorz+100 && floorpic != skyflatnum && random(0,32) > 28) {
				let lt = BD_BFGLightningSpawner(Spawn("BD_BFGLightningSpawner",pos));
				if (lt) {
					lt.master = self;
				}
			}
			if (pos.z >= ceilingz-128 && ceilingpic != skyflatnum && random(0,32) > 28) {
				let lt = BD_BFGLightningSpawner(Spawn("BD_BFGLightningSpawner",pos));
				if (lt) {
					lt.master = self;
					lt.upward = true;
				}
			}
		}
	}
	States {
	Spawn:
		TNT1 A 0 NoDelay A_JumpIf(bdoom_projectiles < 2, "Spawn.Classic");
		BFGB ABCDEFGH 1 A_FaceMovementDirection;
		loop;
	Spawn.Classic:
		EBFO ABCD 2 A_SetRoll(roll-25,SPF_INTERPOLATE);
		loop;
	Death.Sky:
		TNT1 A 1 A_RemoveChildren(1,RMVF_EVERYTHING);
		stop;
	Death:
		TNT1 A 0 {
			roll = 0;
			A_RemoveChildren(1,RMVF_EVERYTHING);
			A_StopSound(6);
			A_SprayDecal("BFGLightning",radius+32);
			A_SetScale(1);
			If(bdoom_shakes)
				A_Quake(4,34,0,256,"");
			If(bdoom_weapons == BD_WeaponSet.WS_ENHANCED)
				A_StartSound("weapons/bfg/explosion",slot:CHAN_6);
			else
				A_StartSound("weapons/bfgx",slot:CHAN_6);			
			dead = true;
			if (bdoom_projectiles >= 2 && bdoom_debris && !inMovingSector) {
				for (int i = random(6,10); i > 0; i--)
					A_CustomRailGun(
						0, 0,
						color1:"",
						color2:"baffb5",
						flags:RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,
						aim:0,
						maxdiff:15,
						pufftype:"BD_NullPuff",
						spread_xy:random(0,360),
						spread_z:random(0,360),
						range:random(48,128),
						duration:80,
						sparsity:2.5,
						spawnclass:"MBFGRailParticle"
					);
			}
		}
		BFGX ABCD 4 {
			if (bdoom_projectiles >= 2 && bdoom_debris && !inMovingSector) {
				A_CustomRailGun(0,0,"","baffb5",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:15,pufftype:"BD_NullPuff",spread_xy:random(0,360),spread_z:random(0,360),range:random(48,128),duration:48,sparsity:1.5,spawnclass:"BD_BFGBallRay");
				A_CustomRailGun(0,0,"","baffb5",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:15,pufftype:"BD_NullPuff",spread_xy:random(0,360),spread_z:random(0,360),range:random(48,128),duration:48,sparsity:1.5,spawnclass:"BD_BFGBallRay");
			}
		}
		BFGX E 4 A_BFGSpray("BD_BFGExtra");
		BFGX FGHIJK 4 {
			if (bdoom_projectiles >= 2 && bdoom_debris && !inMovingSector) {		
				A_CustomRailGun(0,0,"","baffb5",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:15,pufftype:"BD_NullPuff",spread_xy:random(0,360),spread_z:random(0,360),range:random(48,128),duration:48,sparsity:1.5,spawnclass:"BD_BFGBallRay");
				A_CustomRailGun(0,0,"","baffb5",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:15,pufftype:"BD_NullPuff",spread_xy:random(0,360),spread_z:random(0,360),range:random(48,128),duration:48,sparsity:1.5,spawnclass:"BD_BFGBallRay");
			}
		}
		stop;
	}
}

//flare-like trail behind the orb
Class BD_BFGTrail : BD_BaseFlare {
	default {
		alpha 0.2;
		scale 0.16;
	}
	States {	
		Spawn:
			LENG A 1 {
				A_FadeOut(0.08);
				scale*=0.95;
			}
			loop;
	}
}

Class BD_BFGLightningSpawner : BD_SmallDebris {
	bool upward;
	double broll;
	BD_BFGBall orb;
	Class<Actor> beamParticle;
	mixin BD_MovingSectorCheck;
	Default {
		+NOINTERACTION
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (master) {
			Warp(master,-52);
			vel = master.vel;
			moving = true;
			orb = BD_BFGBall(master);
		}
		broll = frandom(1,2.5);
		angle = random(0,359);
		pitch = frandom(78,89);
		if (upward) {
			broll*=-1;
			pitch*=-1;
		}
	}
	override void Tick() {
		if (!bdoom_debris || !orb) {
			destroy();
			return;
		}
		super.Tick();
		if (orb.dead)
			SetOrigin(orb.pos,true);
		if (isFrozen())
			return;
		pitch -= broll;
		if (CheckMovingSetor())
			beamParticle = null;
		else
			beamParticle = "BD_BFGBallRay";
		A_CustomRailGun(0,0,"","FFFFFF",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:4,pufftype:"BD_NullPuff",range:200,sparsity:0,driftspeed:4,spawnclass:beamParticle);
		if (GetAge() > 20) {
			destroy();
			return;
		}
	}
}

//particles of the decorative lightning of the orb
Class BD_BFGBallRay : BD_BaseFlare {
	Default {
		alpha 0.5;
		scale 0.015;
		translation "GreenPlasma";
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (target) {
			vel = target.vel;
			moving = true;
		}
	}
	States {
	Spawn:
		PEXP ABCDEFGHIJKLM 1 A_FadeOut(0.08);
		stop;
	}
}

//the class that spawns on the targets hit by BFG ball tracers
Class BD_BFGExtra : BFGExtra {
	Default {
		translation "GreenPlasma";
		damagetype "BFGSplash";
		scale 0.3;
		renderstyle "Add";
		alpha 0.6;
	}
	States {
		Spawn:
			TNT1 A 0 NoDelay {
				If(bdoom_debris) {
					for (int i = 24; i > 0; i--)
						A_SpawnItemEx("BD_BFGExtraParticle",frandom(-10,10),frandom(-10,10),frandom(-2,10),frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(0,0.5),failchance:64);
				}
			}
			PEXP AABBCCDDEEFFGGHHIIJJKKLLMM 1 A_FadeOut(0.005);
			stop;
	}
}

Class BD_BFGExtraParticle : BD_BaseFlare {
	Default {
		scale 0.07;
	}
	States {
		Spawn:
			SPRK B 1 {
				A_FadeOut(0.004);
				scale*=0.96;
			}
			wait;
	}
}

//small particles spawned by BFG hits
Class BD_BFGPlasmaPiece : BD_BaseFlare {
	Default {
		translation "GreenPlasma";
		alpha 1.0;
		scale 0.1;		
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		scale *= frandom(0.8,1.2);
	}
	states {
	Spawn:
		PLBS A 1 bright {
			A_FadeOut(0.03);
			vel *= 0.95;
		}
		loop;
	}
}


// particles for heavy laser (alt attack)
Class BD_BFGRailBall : BD_BaseFlare {
	Default {
		renderstyle "Add";
		alpha 0.6;
		scale 0.17;
		translation "GreenPlasma";
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (target && distance3D(target) < 56)
			self.destroy();
	}
	States {
		Spawn:
			TNT1 A 0 NoDelay {
				if(bdoom_debris)
					A_SpawnItemEx("BD_BFGRailFlare",0,0,0,0,0,0,0);
			}
			PEXP ABCDEFGHIJKLM 1 A_FadeOut(0.1);
			stop;
	}
}

//flares for heavy laser particles
Class BD_BFGRailFlare : BD_BaseFlare {
	Default {
		alpha 0.05;
		scale 0.2;
	}
	States {
		Spawn:
			LENG A 1 A_FadeOut(0.0025);
			loop;
	}
}

//bigger particles used on the last heavy laser rail when the user stops shooting (too obnoxious to use all the time)
Class BD_BFGRailBall_Hold : BD_BFGRailBall {
	States {
		Spawn:
			TNT1 A 0 noDelay {
				if(bdoom_debris)
					A_SpawnItemEx("BD_BFGRailFlare_Hold");
			}
			TNT1 A 0 A_Jump(256,1,2,3,4,5);
			PEXP ABCDEFGHIJKLM 1 A_FadeOut(0.2);
			stop;
	}
}

//flares for bigger heavy laser particles
Class BD_BFGRailFlare_Hold : BD_BFGRailFlare {
	States {
		Spawn:
			LENG A 1 A_FadeOut(0.01);
			loop;
	}
}

//heavy laser puff
Class BD_BFGRailPuff : BDoomPuff {
	Default {
		+BLOODLESSIMPACT
		+ALWAYSPUFF
		+NOGRAVITY
		damagetype "BFGSplash";
	}
	States {
		Spawn:
			TNT1 A 1 NoDelay {
				if (bdoom_debris) {
					for (int i = 12; i > 0; i--)
						A_SpawnItemEx("BD_BFGPlasmaPiece",0,0,0,frandom(-2,2),frandom(-2,2),frandom(-2,2),random(0,360));
					/*for (int i = 8; i > 0; i--)
						A_SpawnItemEx("BFGPlasmaShred",0,0,0,randompick(-5,5),randompick(-5,5),randompick(-5,5),random(0,360));*/
					A_CustomRailGun(0,0,"","baffb5",RGF_SILENT|RGF_NOPIERCING|RGF_CENTERZ|RGF_FULLBRIGHT,maxdiff:15,pufftype:"BD_NullPuff",random(0,360),random(0,360),range:32,duration:16,sparsity:0.2,driftspeed:0.1);
					A_CustomRailGun(0,0,"","baffb5",RGF_SILENT|RGF_NOPIERCING|RGF_CENTERZ|RGF_FULLBRIGHT,maxdiff:15,pufftype:"BD_NullPuff",random(0,360),random(0,360),range:32,duration:16,sparsity:0.2,driftspeed:0.1);
				}
			}
			stop;
	}
}


Class BD_ModernBFGBall : BD_BFGBall {
	//wcharge just transfers the charge value from the weapon. 1-8 is normal shot, 9-12 is overcharge (12 leads to self-destruct)
	private double wcharge;
	/*wpower determines power, speed, range and max number of beam targets. Equal to wcharge but clamped to 8 
	 (because overcharging isn't meant to increase power, it just lets you hold off the shot)*/
	private double wpower;
	private double rdistance; 	//effective distance, depends on charge
	private double broll;		//roll change
	private int maxcapacity; 	//max # of targets
		
	private Array < Actor > bfglist;
	private state sspawn;
	
	Default {
		+ROLLSPRITE
		+DONTTHRUST
		speed 32;
		renderstyle "Add";
		scale 0.15;
		alpha 0.9;
		decal "none";
		damage 0;
		radius 14;
		height 8;
	}
	Override void PostBeginPlay() {
		super.PostBeginPlay();
		if (target) {
			species = target.species;
			let BFG = BD_BFG9000 (target.player.readyweapon);
			if (BFG) {
				wcharge = BFG.wcharge;
				wpower = clamp(wcharge,1,8);
				A_SetScale (0.06 + wpower*wpower*0.008);
			}
		}
		broll = 1.0;
		maxcapacity = 6 + wpower;
		rdistance = 256*clamp(wpower,1,5);
		trailactor = "MBFGTrail";
		if (!(vel == (0,0,0)))
			vel = vel.unit() * (5+wpower*2);
		sspawn = FindState("Spawn");
		//console.printf("capacity: %d",maxcapacity);
	}
	Override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		roll+=broll;
		broll*=1.03;
		vel*= 0.98;
		if (!InStateSequence(curstate,sspawn))
			return;
		if (vel.length() < 2) {
			Class<Actor> part = "MBFGRailParticle";
			if (inMovingSector) 
				part = null;
			A_SetScale(Clamp(scale.x*1.02,0.1,8));
			alpha*= 1.01;
			if (bdoom_debris && frandom(0.1,2) > vel.length())
				A_CustomRailGun(0,0,"","baffb5",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:15,pufftype:"BD_NullPuff",spread_xy:random(0,360),spread_z:random(0,360),range:random(128,256)*scale.x,duration:72,sparsity:2.0,spawnclass:part);
			if (bdoom_debris && frandom(0.1,2) > vel.length())							
				A_CustomRailGun(0,0,"","baffb5",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:15,pufftype:"BD_NullPuff",spread_xy:random(0,360),spread_z:random(0,360),range:random(128,256)*scale.x,duration:72,sparsity:2.0,spawnclass:part);
		}
		//Console.printf("No of BFG targets: %d",bfglist.size());
		if (bfglist.size() > 0) {
			for (int i = 0; i < bfglist.size(); i++) {
				if (bfglist[i]) {
					if (Distance3D(bfglist[i]) > rdistance) {
						bfglist[i].A_TakeInventory("MBFGTetherControl");
						bfglist.delete(i);
					}
					else {
						BD_TrackingBeam beam = BD_TrackingBeam.MakeBeam("BD_TrackingBeam",self,bfglist[i],"00EE00",radius: 1.0, targetOffset: (0,0,bfglist[i].height*0.5),lifetimer: 3, style: STYLE_ADDSHADED);
						if(beam)
							beam.alpha = 3.0;
						if (!bfglist[i].FindInventory("MBFGTetherControl"))
							bfglist[i].GiveInventory("MBFGTetherControl",1);
						if (!CheckSight(bfglist[i],SF_IGNOREWATERBOUNDARY)) {
							//Console.printf("LOF check failed");
							bfglist[i].A_TakeInventory("MBFGTetherControl");
							bfglist.delete(i);
						}
					}
				}
			}
		}
		MBFG_FindTargets(rdistance);
	}
	void MBFG_FindTargets(double dist = 256) {
		if (!target)
			return;
		double closestDist = double.infinity;
		BlockThingsIterator itr = BlockThingsIterator.Create(self,dist);
		while (itr.next()) {
			let next = itr.thing;
			if (next == target)
				continue; 
			if (!next.bShootable || !(next.bIsMonster || (next is "PlayerPawn")) || !target.IsHostile (next) || target.bKILLED)
				continue;
			double cdist = Distance3D(next);
			if (cdist > dist)
				continue;
			if (cdist < closestDist)
				closestDist = cdist;
			if (!CheckSight(next,SF_IGNOREWATERBOUNDARY))
				continue;
			if (next) {
				bfglist.push(next);
				if (bfglist.size() > maxcapacity)
					bfglist.delete(bfglist.Find(bfglist[0]));
			}
		}
	}
	States {
	Spawn:
		TNT1 A 0 NoDelay {
			if (wcharge >= 12)
				return ResolveState("SelfDestruct");
			A_StartSound("weapons/bfg/fly",slot:CHAN_6,flags:CHANF_DEFAULT|CHANF_LOOPING,volume:0.6,attenuation:3);
			A_StartSound("Mweapons/bfg/orbcharge",slot:CHAN_7);
			return ResolveState(null);
		}
	SpawnDo:
		COIR ABCDEFGHIJKLMNOPQRSTUV 2 {
			A_FaceMovementDirection();
			if (vel.length() < 0.5) {
				SetStateLabel("Death");
				A_KillChildren();
			}
		}
		loop;
	Death.Sky:
		TNT1 A 1 A_RemoveChildren(1,RMVF_EVERYTHING);
		stop;
	Death:
		COIX A 1; //makes sure PostBeginPlay has time to execute in case of a point-blank shot
		TNT1 A 0 {
			dead = true;
			if (bdoom_debris) {
				Class<Actor> part = "MBFGRailParticle";
				if (inMovingSector) 
					part = null;
				for (int i = 3*wpower; i > 0; i--)
					A_CustomRailGun(0,0,"","baffb5",RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING,aim:0,maxdiff:15,pufftype:"BD_NullPuff",spread_xy:random(0,360),spread_z:random(0,360),range:random(1,8)+300*scale.x,duration:72,sparsity:1.0,spawnclass:part);
			}
			A_RemoveChildren(1,RMVF_EVERYTHING);
			A_StopSound(CHAN_6);
			A_StopSound(CHAN_7);
			A_Quake(wpower,10*wpower,0,256*wpower,"");
			if (wcharge >= 12)
				return ResolveState("SelfDestruct");
			A_StartSound("weapons/bfg/explosion",slot:CHAN_6);
			A_SprayDecal("BFGLightning",radius+32);
			A_Explode(50+60*wpower,64+28*wpower,XF_NOSPLASH,alert:true,fulldamagedistance:64+20*wpower,damagetype:"BFGSplash");
			return ResolveState(null);
		}
		COIX A 10 {
			//console.printf("bfg list size: %d, capacity: %d",bfglist.size(),maxcapacity);
			//this block is intended for point-blank shots when the orb immediately enters Death state and has no time to find targets:
			if (bfglist.size() < maxcapacity) {
				MBFG_FindTargets(rdistance);
			}
			if (bfglist.size() > 0) {
				for (int i = 0; i < bfglist.size(); i++) {
					//A_Face(bfglist[i],0,0,flags:FAF_MIDDLE);
					//A_CustomRailGun(30 + 22*wpower,0,"","51fb45",RGF_NOPIERCING|RGF_FULLBRIGHT|RGF_CENTERZ|RGF_SILENT ,maxdiff:8,pufftype:"MBFGRailPuff",range:rdistance,duration:random(100,150),sparsity:10,driftspeed:0.3);
					bfglist[i].DamageMobj(self,target,30+22*wpower,"BFGSplash");
					bfglist[i].TakeInventory("MBFGTetherControl",1);
					BD_TrackingBeam beam = BD_TrackingBeam.MakeBeam("BD_TrackingBeam",self,bfglist[i],"DDFFDD",radius: 3.0, targetOffset: (0,0,bfglist[i].height*0.5),lifetimer: 20, style: STYLE_ADDSHADED);
				}
			}
		}
		TNT1 A 0 {
			let ring = Spawn("BD_ModernBFGBall_XRing",pos);
			if (ring) {
				ring.pitch = frandom(15,20)*randompick(-1,1);
				ring.angle = random(0,360);
				ring.master = self;
				ring.scale = scale*1.1;
			}
			let ring2 = Spawn("BD_ModernBFGBall_XRing",pos);
			if (ring2) {
				ring2.pitch = frandom(70,85)*randompick(-1,1);
				ring2.angle = random(0,360);
				ring2.master = self;
				ring2.scale = scale*1.1;
			}
		}
		COIX ABCDEFGHIJKLM 1 { 
			scale *= 1.2;
			alpha *= 0.75;
		}
		stop;				

	SelfDestruct:
		TNT1 A 0 {
			A_Stop();
			A_SetScale(1.0);
			A_StartSound("Mweapons/bfg/overcharge",slot:CHAN_6);
			A_Explode(10*wpower,250,flags:XF_HURTSOURCE|XF_NOSPLASH,alert:true,fulldamagedistance:250,damagetype:"BFGSplash");
		}
		COIX ABCDEFGHIJKLM 2;
		stop;
	}
}

Class BD_ModernBFGBall_XRing : BD_BaseFlare {
	protected double wroll;
	protected double scalemul;
	Default {
		+NOINTERACTION
		+FLATSPRITE
		alpha 0.8;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		wroll = frandom(5,10) * randompick(-1,1);
		roll = random(0,360);
		scalemul = 0.1;
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (master) {
			SetOrigin(master.pos,true);
		}
		roll += wroll;
		wroll *= 2;
		scale *= (1 + scalemul);
		scalemul *= 0.95;
	}
	States {
	Spawn:
		COIG ABCDEFGHIJKLMN 1;
		COIG OPQR 1 A_FadeOut(0.2);
		stop;
	}
}

Class MBFGTetherControl : Inventory {
	//MBFGTether tether;
	Default {
		inventory.maxamount 1;
	}
	override void Tick() {}
	override void DoEffect() {
		super.DoEffect();
		if (!owner || owner.bKILLED) {
			Destroy();
			return;
		}
	}
	override void AttachToOwner(actor other) {
		super.AttachToOwner(other);
		if (owner) {
			int i = randompick(-1,1);
			let teth1 = MBFGTether(Spawn("MBFGTether",owner.pos+(0,0,owner.height*0.5)));
			teth1.tracer = owner;
			teth1.master = self;
			teth1.pitch = frandom(7,20)*i;
			let teth2 = MBFGTether(Spawn("MBFGTether",owner.pos+(0,0,owner.height*0.5)));
			teth2.tracer = owner;
			teth2.master = self;
			teth2.pitch = frandom(15,30)*-i;
		}
	}
}
	
Class MBFGTether : BD_ModernBFGBall_XRing {
	Default {
		BD_BaseDebris.sfxtype 'debris';
		alpha 0.75;
		scale 0.16;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (tracer)
			A_SetScale(tracer.radius * 0.008);
	}
	override void Tick() {
		BD_BaseFlare.Tick();
		if (isFrozen())
			return;
		if (tracer && !tracer.bKILLED && master)
			SetOrigin(tracer.pos+(0,0,tracer.height*0.5),true);
		else {
			destroy();
			return;
		}
		roll += 5;
	}
	states {
	Spawn:
		COIG A random(10,25);
		COIG BCDCB 3;
		loop;
	Death:
		TNT1 A 0;
		goto super::spawn;
	}	
}

Class MBFGTrail : BD_BaseFlare {
	Default {
		alpha 0.6;
		+ROLLSPRITE
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (!target)
			return;
		scale = target.scale*0.9;
		roll = target.roll;
		SetOrigin((pos.x+frandom(-2.5,2.5),pos.y+frandom(-2.5,2.5),pos.z+frandom(-2.5,2.5)),false);
	}
	States {	
		Spawn:
			COIR ABCDEFGHIJKLMNOPQRSTUV 1 {
				A_FadeOut(0.05);
				scale*=0.95;
			}
			stop;
	}
}

Class MBFGRailPuff : BD_BFGRailPuff {
	Default {
		+ALLOWTHRUFLAGS
		+MTHRUSPECIES //this will make the rails pass through the player who shot the projectile
		+PUFFGETSOWNER
		+NODECAL
		+NODAMAGETHRUST
	}
}

// smooth particle for the lightning-like purely visual rail that shoots in random directions
Class MBFGRailParticle : BD_BaseFlare {
	BD_BFGBall orb;
	Default {
		scale 0.07;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if (target && (target is "BD_BFGBall"))
			orb = BD_BFGBall(target);
	}
	States {
	Spawn:
		SPRK B 1 {
			scale*=0.98;
			if (target) {
				if (orb && orb.dead) {
					vel = (frandom(-5,5),frandom(-5,5),frandom(-5,5));
					target = null;
					moving = true;
				}
				else
					vel = target.vel;
				A_FadeOut(0.05);
			}
			else {
				vel *= 0.9;
				A_FadeOut(0.002);
			}
		}
		wait;
	}
}
	

