Class BD_RocketLauncher : BDoomWeapon {
	private Class<Actor> proj;
	private double pitchshift;
	private double vangle;
	Default {
		+WEAPON.NOAUTOFIRE
		Inventory.PickupMessage "$GOTLAUNCHER";
		Tag "$TAG_ROCKETLAUNCHER";
		inventory.pickupsound "pickups/rocketlauncher";
		weapon.ammotype1		"RocketAmmo";
		weapon.ammouse1		1;
		weapon.ammogive1		0;
		BDoomWeapon.magammo	"BD_RLClip";
		BDoomWeapon.magammogive 3;
		weapon.ammotype2 		"RocketAmmo";
		weapon.ammouse2		1;
		weapon.ammogive2		2;
		weapon.selectionorder 250;
		weapon.slotnumber 5;
		BDoomWeapon.AutoReloadTime 110;
		BDoomWeapon.reloadsound "Mweapons/rocket/clipin";
		BDoomWeapon.ClassicIcon "LAUNA0";
		BDoomWeapon.ModernIcon "LAUNB0";
	}
		
	override void DoEffect() {
		Super.DoEffect();
		if (!owner)
			return;
		if(bdoom_weapons == BD_WeaponSet.WS_MODERN)	{
			AmmoUse2 = 0;
			bAMMO_OPTIONAL = true;					
		}
		else {
			AmmoUse2 = 1;
			bAMMO_OPTIONAL = false;
		}
	}
		
	states	{
		Spawn:
			LAUN A 1 NoDelay {
				if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
					frame = 1;
			}
			Loop;
			LAUN B 0;
			stop;
		Select:
			TNT1 A 0 { 
				if(bdoom_weapons > BD_WeaponSet.WS_VANILLA)
					A_StartSound("weapons/rlan/draw");
				If(bdoom_weapons == BD_WeaponSet.WS_MODERN)
					return ResolveState("Select.Modern");
				return ResolveState(null);
			}
			RLAN DCBEFG 1 A_WeaponReady(WRF_NOFIRE);
			goto ready;
		Deselect:
			TNT1 A 0 A_JumpIf(bdoom_weapons==2,"Deselect.Modern");
			RLAN A 1 A_Lower;
			loop;
		Ready:
			RLAN A 1  { 
				if (bdoom_weapons == BD_WeaponSet.WS_MODERN)
					return ResolveState("Ready.Modern");
				else if (bdoom_weapons ==1)
					A_WeaponReady();
				else
					A_WeaponReady(WRF_NOSECONDARY);
				return ResolveState(null);
			}
			loop;
		Fire: //8 tics before fire, 12 tics fire, 0 tics refire
			RLAN A 2 A_JumpIf(bdoom_weapons==2,"Fire.Modern");
			TNT1 A 0 A_GunFlash();
			RLAN ABC 2 ;
			RLAN D 3 A_FireProjectile("Rocket",0,1);
			RLAN CB 3;
			RLAN EFG 1;
			TNT1 A 0 A_Refire();
			goto ready;
		AltFire:
			TNT1 A 0 A_JumpIf(bdoom_weapons==2,"AltFire.Modern");
			RLAN A 20 A_StartSound("weapons/rlan/lock");
			TNT1 A 0 A_GunFlash();
			RLAN ABC 2 ;
			RLAN D 2 A_FireProjectile("BD_HomingRocket",0,1);
			RLAN CB 3;
			RLAN EFG 1;
			RLAN A 15 A_WeaponReady(WRF_NOSECONDARY);
			RLAN A 8 A_ReFire();
			goto ready	;
		Flash:
			RLAF A 2 Bright A_Light1();
			RLAF B 2 Bright;
			RLAF C 2 Bright A_Light2();
			RLAF DE 3 Bright;
			Goto LightDone;
			
	//modern;
		Select.Modern:
			RORV C 0 {
				A_StartSound("weapons/RORN/draw");
				let ws = player.FindPSprite (PSP_Weapon);
				if (ws) {
					if (countinv("BD_RLClip") >= 3) {
						ws.sprite = GEtSpriteIndex("RORN");
						ws.frame = 0;
					}
					else if (countinv("BD_RLClip") >= 2) {
						ws.sprite = GEtSpriteIndex("RORE");
						ws.frame = 0;
					}
					else if (countinv("BD_RLClip") >= 1) {
						ws.sprite = GEtSpriteIndex("RORE");
						ws.frame = 2;
					}
					else {
						ws.sprite = GEtSpriteIndex("RORV");
						ws.frame = 2;
					}
				}
				A_WeaponOffset(-35.0,74.0);
			}
			#### ####### 1 {
				A_WeaponOffset(5.0,-6.0,WOF_ADD);
				A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			}
			goto ready;
		Deselect.Modern:
			RORV C 0 {
				let ws = player.FindPSprite (PSP_Weapon);
				if (ws) {
					if (countinv("BD_RLClip") >= 3) {
						ws.sprite = GEtSpriteIndex("RORN");
						ws.frame = 0;
					}
					else if (countinv("BD_RLClip") >= 2) {
						ws.sprite = GEtSpriteIndex("RORE");
						ws.frame = 0;
					}
					else if (countinv("BD_RLClip") >= 1) {
						ws.sprite = GEtSpriteIndex("RORE");
						ws.frame = 2;
					}
					else {
						ws.sprite = GEtSpriteIndex("RORV");
						ws.frame = 2;
					}
				}
			}
			#### # 1 A_Lower();
			wait;
		Ready.Modern:
			TNT1 A 1 {
				BD_WeaponReady(1);
				let ws = player.FindPSprite (PSP_Weapon);
				if (ws) {
					let mag = CountInv("BD_RLClip");					
					if (mag >= 3) {
						ws.sprite = GEtSpriteIndex("RORN");
						ws.frame = 0;
					}
					else if (mag >= 2) {
						ws.sprite = GEtSpriteIndex("RORE");
						ws.frame = 0;
					}
					else if (mag >= 1) {
						ws.sprite = GEtSpriteIndex("RORE");
						ws.frame = 2;
					}
					else {
						ws.sprite = GEtSpriteIndex("RORV");
						ws.frame = 2;
					}
				}
			}
			goto ready;
		Fire.Modern:
			TNT1 A 0 {
				invoker.proj = "BD_ModernRocket";
				invoker.pitchshift = 1.2;
				invoker.vangle = 0;
				let mag = CountInv("BD_RLClip");
				if (mag > 3)		return ResolveState("Fire0.Modern");
				else if (mag > 2) 	return ResolveState("Fire1.Modern");
				else if (mag > 1) 	return ResolveState("Fire2.Modern");
				else if (mag > 0) 	return ResolveState("Fire3.Modern");
				return ResolveState("DryReload");
			}
			goto ready;
		AltFire.Modern:
			TNT1 A 0 {
				invoker.proj = "BD_ModernGrenade";
				invoker.pitchshift = 0.25;
				invoker.vangle = -5;
				let mag = CountInv("BD_RLClip");
				if (mag > 3) {
					A_TakeInventory("BD_RLClip",1,TIF_NOTAKEINFINITE);
					return ResolveState("Fire0.Modern");
				}
				else if (mag > 2) 	{
					A_TakeInventory("BD_RLClip",1,TIF_NOTAKEINFINITE);
					return ResolveState("Fire1.Modern");
				}
				else if (mag > 1) 	{
					A_TakeInventory("BD_RLClip",1,TIF_NOTAKEINFINITE);
					return ResolveState("Fire2.Modern");
				}
				else if (mag > 0) 	{
					A_TakeInventory("BD_RLClip",1,TIF_NOTAKEINFINITE);
					return ResolveState("Fire3.Modern");
				}
				return ResolveState("DryReload");
			}
			goto ready;
		Fire0.Modern:
			RORN B 1;
			RORN C 1 A_FireProjectile(invoker.proj,useammo:true,spawnheight:-5,pitch:invoker.vangle);
			RORN D 2 BD_SetPitch(pitch - invoker.pitchshift,SPF_INTERPOLATE);
			RORN C 2;
			RORN B 2;
			TNT1 A 0 A_StartSound("Mweapons/rocket/drum",slot:CHAN_VOICE,flags:CHANF_DEFAULT,volume:0.35);
			RORV ABCD 2;
			RORV A 2 A_Overlay(PSP_GUN2,"RocketLoad");			
			RORN A 1;
			goto ready;
		Fire1.Modern:
			RORN B 1;
			RORN C 1 A_FireProjectile(invoker.proj,useammo:true,spawnheight:-5,pitch:invoker.vangle);
			RORN D 2 BD_SetPitch(pitch - invoker.pitchshift,SPF_INTERPOLATE);
			RORN C 2;
			RORN B 2;
			TNT1 A 0 A_StartSound("Mweapons/rocket/drum",slot:CHAN_VOICE,flags:CHANF_DEFAULT,volume:0.35);
			RORV ABCE 2;
			RORV F 2 A_Overlay(PSP_GUN2,"RocketLoad");	
			RORE A 1;
			goto ready;
		Fire2.Modern:
			RORE B 1;
			RORN C 1 A_FireProjectile(invoker.proj,useammo:true,spawnheight:-5,pitch:invoker.vangle);
			RORN D 2 BD_SetPitch(pitch - invoker.pitchshift,SPF_INTERPOLATE);
			RORN C 2;
			RORE B 2;
			TNT1 A 0 A_StartSound("Mweapons/rocket/drum",slot:CHAN_VOICE,flags:CHANF_DEFAULT,volume:0.35);
			RORV FGCC 2;
			RORV C 2 A_Overlay(PSP_GUN2,"RocketLoad");	
			RORE C 1;
			goto ready;
		Fire3.Modern:
			RORE D 1;
			RORE E 2 A_FireProjectile(invoker.proj,useammo:true,spawnheight:-5,pitch:invoker.vangle);
			RORN D 2 BD_SetPitch(pitch - invoker.pitchshift,SPF_INTERPOLATE);
			RORE E 2;
			RORE D 2;
			RORV C 3;
			goto ready;
		RocketLoad:
			RORW ABC 1;
			stop;
		Flash.Modern:
			RLAF A 2 Bright A_Light1();
			RLAF B 2 Bright;
			RLAF C 1 Bright A_Light2();
			RLAF DE 1 Bright;
			Goto LightDone;
		DryReload:
			RORV C 12 {
				A_StartSound("Mweapons/dry");
				invoker.wasempty = true;
			}
			goto Reload;
		Reload:
			RORR A 0 {
				if (CountInv("BD_RLClip") >= 8 || CountInv("RocketAmmo") < 1)
					return ResolveState("Ready");
				if (invoker.wasempty) {
					let psp = player.FindPSprite (PSP_Weapon);
					psp.sprite = GetSpriteIndex("RORS");
				}
				A_Overlay(PSP_MAG,"ReloadMag");
				A_OverlayFlags(PSP_MAG,PSPF_ADDWEAPON,false);
				A_OverlayOffset(PSP_MAG,0,32);
				return ResolveState(null);
			}			
			#### ABCDEEEE 1;
			#### # 1 {
				A_StartSound("Mweapons/rocket/clipout",slot:CHAN_5);
				A_WeaponOffset(1.5,0,WOF_ADD);
			}
			#### ### 1 A_WeaponOffset(-0.5,0,WOF_ADD);			
			#### # 26;
			#### # 10;			
			#### # 1 {
				BD_Reload();
				A_StartSound("Mweapons/rocket/clipin",slot:CHAN_5);
				A_OverlayFlags(PSP_MAG,PSPF_ADDWEAPON,true);
				A_OverlayOffset(PSP_MAG,0,0);
				A_WeaponOffset(-3,0,WOF_ADD);
			} 
			#### ### 1 A_WeaponOffset(1,0,WOF_ADD);
			#### EEEDCBA 2;
			TNT1 A 0 {
				if (invoker.wasempty)
					return ResolveState("ReloadEnd");
				return ResolveState(null);
			}
			goto ready;	
		ReloadMag:
			TNT1 A 0 {
				int mag = CountInv("BD_RLClip");
				if (mag < 2)
					BD_SetSprite("ROR3","QOR3");
				else if (mag < 3)
					BD_SetSprite("ROR2","QOR2");
				else
					BD_SetSprite("ROR1","QOR1");
			}
			#### ABCDEFGH 1;
			#### IJKLM 2;
			TNT1 A 20;
			TNT1 A 0 {
				int rock = CountInv("RocketAmmo");
				if (rock < 2)
					BD_SetSprite("ROR2","QOR2");
				else
					BD_SetSprite("ROR1","QOR1");
			}
			#### MLKJI 2;
			#### H 4;
			#### GFEDCBA 2;
			stop;
		ReloadEnd:
			TNT1 A 0 {
				A_StartSound("Mweapons/rocket/drum",slot:CHAN_VOICE,flags:CHANF_DEFAULT,volume:0.35);
				invoker.wasempty = false;
				int mag = CountInv("BD_RLClip");
				if (mag > 2)
					return ResolveState("ReloadEnd0");
				else if (mag > 1)
					return ResolveState("ReloadEnd1");
				return ResolveState(null);
			}
			RORV FGCC 2;
			RORV C 2 A_Overlay(PSP_GUN2,"RocketLoad");
			goto ready;
		ReloadEnd0:
			RORV ABCD 2;
			RORV A 2 A_Overlay(PSP_GUN2,"RocketLoad");
			goto ready;
		ReloadEnd1:
			RORV ABCE 2;
			RORV F 2 A_Overlay(PSP_GUN2,"RocketLoad");
			goto ready;			
	}
}


Class BD_RLClip : ammo {
	Default {
		inventory.icon "HROKZ0";
		inventory.amount 1;
		inventory.maxamount 8;
		ammo.backpackamount 0;
		ammo.backpackmaxamount 8;
	}
}

Class BD_Rocket : BDoomActor {
	Default {
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		Projectile;
		+DEHEXPLOSION
		+ROLLSPRITE
		Obituary "$OB_MPROCKET";
		scale 1.0;
		decal "bigscorch";
		seesound "none";
		deathsound "none";
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		if(bdoom_debris) {
			let flare = BD_ProjFlare(Spawn("BD_ProjFlare",pos));
			if (flare) {
				flare.master = self;
				flare.fcolor = 'red';
				flare.fscale = 0.11;
				flare.falpha = 0.4;
				flare.xoffset = -15;
			}
		}
		sound snd;
		if(bdoom_weapons == BD_WeaponSet.WS_VANILLA)
			snd = "weapons/rocklf";
		else 
			snd = "weapons/rlan/fire";
		A_StartSound(snd,slot:CHAN_5,flags:CHANF_DEFAULT,1.0);
		if (bdoom_projectiles < 2)
			bROCKETTRAIL = true;
	}
	states {
	Spawn:
		VROK AAAA 1 bright { 
			if(bdoom_debris && bdoom_projectiles >= 2)
				A_SpawnItemEx("BD_RocketTrail",-15,frandom(-2,2),frandom(-2,2));
		}
		TNT1 A 0 {
			A_StartSound("weapons/rlan/fly",slot:CHAN_BODY,flags:CHANF_DEFAULT|CHANF_LOOPING,1.0,attenuation:3);
			return ResolveState("SpawnDo");
		}		
	SpawnDo:
		VROK A 1 bright { 
			if(bdoom_debris && bdoom_projectiles >= 2)
				A_SpawnItemEx("BD_RocketTrail",-15,frandom(-2,2),frandom(-2,2));
		}
		wait;
	Death:
		TNT1 A 0 { 
			A_Explode();
			A_RemoveChildren(1,RMVF_EVERYTHING);
			A_StopSound(CHAN_BODY);
			bFORCEXYBILLBOARD = true;
			A_SetRenderStyle(0.85,STYLE_Add);
			if(bdoom_shakes)
				A_Quake(1,8,0,256,"");
			if(bdoom_weapons == BD_WeaponSet.WS_VANILLA)
				A_StartSound("weapons/rocklx",slot:CHAN_5);
			else
				A_StartSound("weapons/rlan/explosion",slot:CHAN_5);
			if (bdoom_projectiles < 2)
				return ResolveState("Death.Classic");
			double rs = (frandom(0.38,0.42)*randompick(-1,1));
			A_SetScale(rs,rs);
			A_SetRoll(random(0,359));
			if(bdoom_debris) {
				for (int i = random[bdsfx](3,7); i > 0; i--) 
					A_SpawnItemEx("BD_SmokingPiece",0,0,1, random(3,7),0,random(5,12),random(0,360));
				for (int i = random[bdsfx](5,15); i > 0; i--) {
					let a = Spawn("BD_WallPart",pos+(0,0,1));
					if (a) {
						a.vel = (frandom(-4,4),frandom(-4,4),frandom(2,8));
						a.A_SetScale(0.35);
					}
				}
			}
			return ResolveState(null);
		}
		BOM6 ABCDEFGHIJKLMNOPQRST 1 bright;
		stop;
	Death.Classic:
		TNT1 A 0 { 
			roll = 0; 
			A_SetScale(1);
			A_SetRenderStyle(0.6,Style_Add);
		}
		BOM0 ABCD 1 bright;
		BOM0 EFGHIJ 2 bright;
		stop;
	}
}

Class BD_HomingRocket : BD_Rocket {
	protected BD_ProjFlare sflare;
	Default {
		+SEEKERMISSILE;
		+SCREENSEEKER;
		speed 17;
	}
	states	{
	SpawnDo:
		HROK A 1 bright { 
			if(bdoom_debris && bdoom_projectiles >= 2)
				A_SpawnItemEx("BD_RocketTrail",-15,frandom(-2,2),frandom(-2,2));
			//we let the rocket wait 30 tics before starting to home, so that it can be more easily shot around corners/ledges
			if (GetAge() >= 10) {
				if (!sflare) {
					sflare = BD_ProjFlare(Spawn("BD_SeekerFlare",pos));
					sflare.master = self;
					sflare.xoffset = 18;
				}
				A_SeekerMissile(0,3, SMF_LOOK | SMF_PRECISE | SMF_CURSPEED,200);
			}
		}
		wait;
	}
}

Class BD_ModernRocket : BD_Rocket {
	Default {
		+FORCERADIUSDMG
		scale 0.4;
		speed 25;
		seesound "Mweapons/rocket/fire";
	}
	//lovely snippet for smoke trail by Arctangent
	override void Tick () {
		Vector3 oldPos = pos;		
		Super.Tick();
		if (!bdoom_debris || isFrozen() || GetAge() <= 3)
			return;
		Vector3 path = level.vec3Diff( pos, oldPos );
		double distance = path.length() / 4; //this determines how far apart the particles are
		Vector3 direction = path / distance;
		int steps = int( distance );
		
		for( int i = 0; i < steps; i++ )  {
			actor mo = Spawn("BD_ModernRocketTrail", oldPos );
			if (mo) {
				mo.vel = (frandom(-0.5,0.5),frandom(-0.5,0.5),frandom(-0.5,0.5));
			}
			if (GetClassname() == "BD_ModernRocket")
				actor fir = Spawn("BD_ModernRocketFireTrail", oldPos );				
			oldPos = level.vec3Offset( oldPos, direction );
		}
	}
	override void PostBeginPlay() {
		actor.PostBeginPlay();
		A_StartSound("weapons/rlan/fly",slot:CHAN_BODY,flags:CHANF_LOOPING,attenuation:1);
		if(Bdoom_debris){
			let flare = BD_ProjFlare(Spawn("BD_ProjFlare",pos));
			if (flare) {
				flare.master = self;
				flare.fcolor = 'yellow';
				flare.fscale = 0.06;
				flare.falpha = 0.4;
				flare.xoffset = -7;
			}
		}
	}
	states	{
	Spawn:
		MROK AAAA 1 bright A_ScaleVelocity(1.2);
		MROK A 1;
		wait;
	BrainExplode:
	Death:
		TNT1 A 0 { 
			A_RemoveChildren(1,RMVF_EVERYTHING);
			A_StopSound(CHAN_BODY);
			bFORCEXYBILLBOARD = true;
			A_SetRenderStyle(0.5,STYLE_Add);
			double rs = (frandom(0.55,0.57)*randompick(-1,1));
			A_SetScale(rs,rs);
			roll = random(0,359);
			A_StartSound("Mweapons/rocket/explosion",slot:CHAN_5);
			if(bdoom_shakes)
				A_Quake(2,8,0,256,"");
			if(bdoom_debris) {
				for (int i = random[bdsfx](8,20); i > 0; i--)
					A_SpawnItemEx("BD_RicochetSpark",0,0,1,	frandom(-6,6),frandom(-6,6),frandom(3,10));
				if (pos.z <= floorz+10) {
					for (int i = random[bdsfx](4,10); i > 0; i--)
						A_SpawnItemEx("BD_RocketDebris",0,0,1,	frandom(-4,4),frandom(-4,4),frandom(9,12));
				}
				else {
					for (int i = random[bdsfx](4,10); i > 0; i--)
						A_SpawnItemEx("BD_RocketDebris",0,0,0,	frandom(-6.5,6.5),frandom(-6.5,6.5),frandom(-2,14));
				}
			}
			A_Explode();
		}
		BOM4 ABCDEFGHIJKLMNOPQ 1 bright {
			if (bdoom_debris) {
				for (int i = random[bdsfx](1,4); i > 0; i --)
					A_SpawnItemEx("BD_BigBlackSmoke",random(-12,12),random(-12,12),random(0,12),frandom(-0.4,0.4),frandom(-0.4,0.4),frandom(0.1,0.5));
			}
		}
		BOM5 ABCDEFGH 1 bright {
			A_Fadeout(0.04);
			if (bdoom_debris) {
				for (int i = random[bdsfx](0,2); i > 0; i --)
					A_SpawnItemEx("BD_BigBlackSmoke",random(-12,12),random(-12,12),random(0,12),frandom(-0.4,0.4),frandom(-0.4,0.4),frandom(0.1,0.5));
			}
		}
		BOM5 IJKLMN 1 bright A_Fadeout(0.04);
		stop;
	}
}

Class BD_ModernRocketFireTrail : BD_BaseFlare {
	Default {
		scale 0.04;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		roll = random(0,359);
	}
	states {
	Spawn:
		BOM1 NOPQRSTUVWX 1 {
			scale *= 0.85;
		}
		stop;
	}
}

Class BD_ModernRocketTrail : BD_WallSmoke {
	Default {
		scale 0.03;
		alpha 0.3;
	}
	states {
	Spawn:
		SMO2 # 1 NoDelay {
			wrot *= 0.98;
			A_Fadeout(0.006);
			a_Setscale(clamp(scale.x*1.03,0.01,0.08),clamp(scale.y*1.03,0.01,0.08));
			vel*=0.94;
			roll+=wrot;
		}
		loop;
	}
}


Class BD_ModernGrenade : BD_ModernRocket {
	private state sspawn;
	Default	{
		scale 0.45;
		-NOGRAVITY;
		+NODECAL;
		decal "none";
		gravity 0.3;
		speed 25;
		radius 8;
		height 8;
		bouncetype 'hexen';
		bouncefactor 0.5;
		+ALLOWBOUNCEONACTORS
		+FORCEXYBILLBOARD
		+CANBOUNCEWATER
		-FLOORCLIP
		seesound "Mweapons/grenade/fire";
		bouncesound "Mweapons/grenade/bounce";	
	}
	override void PostBeginPlay() {
		actor.PostBeginPlay();
		if (bdoom_debris) {
			let a = Spawn("BD_ModernGrenadeFlare",pos);
			if (a)
				a.master = self;
		}
		sspawn = FindState("Spawn");
	}
	override void Tick() {
		super.Tick();
		if (isFrozen())
			return;
		if (InstateSequence(curstate,sspawn) && GetAge() > 250)
			SetStateLabel("Death");
		if (pos.z <= floorz && CheckLiquidFlat()) {
			//console.printf("hitting liquid, slowing down");
			vel *= 0.9;
		}
	}
	states {
	Spawn:
		MROG AABBCCDD 1 {
			/*A_FaceMovementDirection();
			FLineTraceData skycheck;
			LineTrace(angle,radius+vel.length(),pitch,data: skycheck);
			if (skycheck.HitType == Trace_HitSky || skycheck.HitTexture == skyflatnum)
				bNOINTERACTION = true;
			if (bNOINTERACTION)
				vel.z -= gravity;*/
			if (vel.length() < 3) {
				bMISSILE = false;	//stop bouncing and die without stopping dead
				return ResolveState("Death");
			}
			return ResolveState(null);
		}
		loop;
	Crash:
	Death:
		MROG # 40 bright {
			A_StartSound("Mweapons/grenade/bounce",slot:CHAN_WEAPON);
			A_StartSound("MWeapons/rocket/beep",slot:CHAN_7,flags:CHANF_DEFAULT|CHANF_LOOPING,volume:1.0,attenuation:2);
		}
		TNT1 A 0 A_StopSound(7);
		goto super::Death;
	XDeath:
		TNT1 A 0 { bNOGRAVITY = true; }
		goto super::Death;
	}
}

//yellow flare around the grenade
Class BD_ModernGrenadeFlare : BD_BaseFlare {
	Default {
		BD_BaseDebris.sfxtype 'debris';
		alpha 0.4;
		scale 0.05;
	}
	override void Tick() {
		super.Tick();
		if (master)
			SetOrigin(master.pos,true);
	}
	states {
	Spawn:
		LENY A 1 bright {
			if (master && master.InstateSequence(master.curstate,mdeath)) {
				scale *= 2;
				SetStateLabel("Death");
			}
		}
		loop;
	Death:
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		TNT1 A 3;
		LENR A 4 bright;
		stop;
	}
}

//flashes at the end of the homing version of the rocket
Class BD_SeekerFlare : BD_ProjFlare { 
	Default {
		alpha 0.6;
	} 
	states {
		Spawn:
			TNT1 A 0 NoDelay A_SetScale(0.22);
			LENG A 1 A_StartSound("weapons/rlan/seek",slot:CHAN_WEAPON,flags:CHANF_DEFAULT,1.0,attenuation:1);			
			LENG AAAAAAAAAAAAAAAAAAA 1 {
				scale *= 0.9;
			}
			loop;
	}
}