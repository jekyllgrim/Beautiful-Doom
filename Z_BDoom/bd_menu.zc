// ScaleSlader that can be greyed out. Supports up to 3 cvars and is greyed out if either is false

class OptionMenuItemScaleSliderGC : OptionMenuItemScaleSlider
{
	CVar mGrayCheck;
	CVar mGrayCheck2;
	CVar mGrayCheck3;
	
	OptionMenuItemScaleSliderGC Init(String label, Name command, double min, double max, double step, String zero, CVar graycheck = null, CVar graycheck2 = null, CVar graycheck3 = null)
	{
		Super.Init(label, command, min, max, step, zero);
		mCVar = CVar.FindCVar(command);
		mGrayCheck = graycheck;
		mGrayCheck2 = graycheck2;
		mGrayCheck3 = graycheck3;
		TextZero = zero;
		mClickVal = -10;
		return self;
	}

	//=============================================================================
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		bool grayed = isGrayedCompat();
		
		drawLabel(indent, y, selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor, grayed);

		int overlay = grayed? Color(96,48,0,0) : 0;
		int Selection = int(GetSliderValue());
		if ((Selection == 0 || Selection == -1) && mClickVal <= 0)
		{
			String text = Selection == 0? TextZero : "";
			screen.DrawText (SmallFont, OptionMenuSettings.mFontColorValue, indent + CursorSpace(), y, text, DTA_CleanNoMove_1, true);
		}
		else
		{
			mDrawX = indent + CursorSpace();
			DrawSlider (mDrawX, y, mMin, mMax, GetSliderValue(), mShowValue, indent);
		}
		return indent;
	}
	
	/*	this function had been defined here before an isGrayed virtual was added to the base ScaleSlider (what was in a dev build of GZDoom 
		prior 4.6.0), so I had to rename it to make sure it works both on stable 4.5.0 and on dev builds at the time.
	*/
	virtual bool isGrayedCompat()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() == 0) || (mGraycheck2 && mGrayCheck2.GetInt() == 0) || (mGraycheck3 && mGrayCheck3.GetInt() == 0)  )
			return true;
		else
			return false;
	}

	override bool Selectable()
	{
		return !isGrayedCompat();
	}
	
}

// Submenu that can be greyed out

class OptionMenuItemSubmenuGC : OptionMenuItemSubmenu
{
	CVar mGrayCheck;
	
	OptionMenuItemSubmenuGC Init(String label, Name command, CVar graycheck, int param = 0, bool centered = false)
	{
		Super.init(label, command, centered, param);
		mGrayCheck = graycheck;
		return self;
	}

	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		bool grayed = isGrayedCompat();		
		int x = drawLabel(indent, y, selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColorMore, grayed);
		int overlay = grayed? Color(96,48,0,0) : 0;
		if (mCentered) 
		{
			return x - 16*CleanXfac_1;
		}
		return indent;
	}

	virtual bool isGrayedCompat()
	{
		return mGrayCheck != null && !mGrayCheck.GetInt();
	}

	override bool Selectable()
	{
		return !isGrayedCompat();
	}
}

// Option menu that can be greyed out when CVAR != 2 (for background weapon autoreload option, it's only available when bdoom_weapons == 2)

Class OptionMenuItemOptionBGReload_bd_TLTP : OptionMenuItembd_TLTPOption
{
	CVar mCVar2;
	CVar mGrayCheck2;

	OptionMenuItemOptionBGReload_bd_TLTP Init(String label, String tooltip, Name tipColor, Name command, Name values, CVar graycheck = null, CVar graycheck2 = null)
	{
		Super.Init(label, tooltip, tipcolor, command, values, graycheck);
		mCVar2 = CVar.FindCVar(mAction);
		mGrayCheck2 = graycheck2;
		return self;
	}
	
	override bool isGrayed()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() != 2) || (mGraycheck2 && mGrayCheck2.GetInt() == 0)  )
			return true;
		else
			return false;
	}
}

//option item that is unselectable when either of 2 cvars is false
class OptionMenuItemOptionEither_bd_TLTP : OptionMenuItembd_TLTPOption
{
	CVar mCVar2;
	CVar mGrayCheck2;

	OptionMenuItemOption Init(String label, String tooltip, Name tipColor, Name command, Name values, CVar graycheck = null, CVar graycheck2 = null, int center = 0)
	{
		Super.Init(label, tooltip, tipcolor, command, values, graycheck, center);
		mCVar2 = CVar.FindCVar(mAction);
		mGrayCheck2 = graycheck2;
		return self;
	}

	override bool isGrayed()
	{
		if ( (mGraycheck && mGrayCheck.GetInt() == 0) || (mGraycheck2 && mGrayCheck2.GetInt() == 0)  )
			return true;
		else
			return false;
	}
}

//option item that is unselectable when both of 2 cvars is false
Class OptionMenuItemOptionBoth : OptionMenuItemOptionEither_bd_TLTP
{
	override bool isGrayed()
	{
		if (mGraycheck && mGrayCheck.GetInt() == 0 && mGraycheck2 && mGrayCheck2.GetInt() == 0)
			return true;
		else
			return false;
	}
}

//a control (keybind) widget that gets greyed out if CVar value is equal to CVarVal, OR, if InverseCheck is true, if it's NOT equal to CVarVal
class OptionMenuItemControlGC_bd_TLTP : OptionMenuItembd_TLTPControl
{	
	CVar mCVar;
	CVar mGrayCheck;
	int mCVarVal;
	int mInverseCheck;
	OptionMenuItemControlGC_bd_TLTP Init(String label, String tooltip, Name tipColor, Name command, CVar graycheck = null, int CvarVal = 0, int InverseCheck = 0)
	{
		mTooltip = tooltip;
		cr_TipColor = tipColor;
		Super.Init(label, tooltip, tipColor, command);
		mCVar = CVar.FindCVar(command);
		mGrayCheck = graycheck;
		mCvarVal = CvarVal;
		mInverseCheck = InverseCheck;
		return self;
	}
	override int Draw(OptionMenuDescriptor desc, int y, int indent, bool selected)
	{
		bool grayed = isGrayedCompat();
		drawLabel(indent, y, mWaiting? OptionMenuSettings.mFontColorHighlight: 
			(selected? OptionMenuSettings.mFontColorSelection : OptionMenuSettings.mFontColor),grayed);
		int overlay = grayed? Color(96,48,0,0) : 0;

		String description;
		int Key1, Key2;

		[Key1, Key2] = mBindings.GetKeysForCommand(mAction);
		description = KeyBindings.NameKeys (Key1, Key2);
		if (description.Length() > 0)
		{
			drawValue(indent, y, Font.CR_WHITE, description);
		}
		else
		{
			drawValue(indent, y, Font.CR_BLACK, "---");
		}
		return indent;
	}
	virtual bool isGrayedCompat()
	{
		if ((mInverseCheck == 1) && mGraycheck && (mGrayCheck.GetInt() != mCvarVal))
			return true;
		else if ((mInverseCheck == 0) && mGraycheck && (mGrayCheck.GetInt() == mCvarVal))
			return true;
		return false;
	}

	override bool Selectable()
	{
		return !isGrayedCompat();
	}
}